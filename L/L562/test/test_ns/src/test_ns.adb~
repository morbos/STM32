with HAL;    use HAL;
with STM32.Device;   use STM32.Device;
with STM32.Board;    use STM32.Board;
with STM32.MPU;      use STM32.MPU;
with NStask; use NStask;
with Ada.Real_Time; use Ada.Real_Time;
procedure Test_Ns is
   function NS_To_S (X : UInt32) return UInt32;
   pragma Import (C, NS_To_S, "s_from_ns_veneer");
   procedure Init_MPU;
   procedure Init_MPU
   is
      Ram : Attr_Type := (Outer => 4, Inner => 4);
      Dev : Attr_Type := (Outer => 0, Inner => 0);
   begin
      Add_Attrib (AttrIdx => 0, Attrib => Ram);
      Add_Attrib (AttrIdx => 1, Attrib => Dev);
      Add_Region (Region_Num => 0,
                  Addr       => 16#3000_0000#,
                  Size       => (2 ** 18) - 1,
                  AttIdx     => 0);
      Add_Region (Region_Num => 1,
                  Addr       => 16#2000_0000#,
                  Size       => (2 ** 18) - 1,
                  AttIdx     => 0);
      Add_Region (Region_Num => 3,
                  Addr       => 16#4000_0000#,
                  Size       => 16#1000_0000# - 1,
                  AttIdx     => 1);
      Add_Region (Region_Num => 4,
                  Addr       => 16#E000_0000#,
                  Size       => 16#1000_0000# - 1,
                  AttIdx     => 1);
      Enable_MPU;
   end Init_MPU;
   X : UInt32 := 0;
begin
   Init_MPU;
   loop
      X := 1 + NS_To_S (X);
--      Turn_On (Blue_LED);
--      delay until Clock + Milliseconds (1000);
--      Turn_Off (Blue_LED);
--      delay until Clock + Milliseconds (1000);
   end loop;
end Test_Ns;
