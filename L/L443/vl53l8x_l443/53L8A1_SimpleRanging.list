
53L8A1_SimpleRanging.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015acc  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e724  0801e724  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801e724  0801e724  0002e724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e72c  0801e72c  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e72c  0801e72c  0002e72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e730  0801e730  0002e730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801e734  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002910  200000b4  0801e7e8  000300b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200029c4  0801e7e8  000329c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001565d  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0001277d  00000000  00000000  00045741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ab  00000000  00000000  00057ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  0005af70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00093a7b  00000000  00000000  0005bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000e60  00000000  00000000  000ef990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000192be  00000000  00000000  000f07f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109aae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ac  00000000  00000000  00109b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c40 	.word	0x08008c40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	08008c40 	.word	0x08008c40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800058a:	490e      	ldr	r1, [pc, #56]	; (80005c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005a0:	4c0b      	ldr	r4, [pc, #44]	; (80005d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ae:	f004 f9b9 	bl	8004924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b2:	f007 faa9 	bl	8007b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b6:	f000 fb09 	bl	8000bcc <main>
  bx  lr    
 80005ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80005c8:	0801e734 	.word	0x0801e734
  ldr r2, =_sbss
 80005cc:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80005d0:	200029c4 	.word	0x200029c4

080005d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC_IRQHandler>

080005d6 <MX_TOF_Init>:
static void handle_cmd(uint8_t cmd);
static uint8_t get_key(void);
static uint32_t com_has_data(void);

void MX_TOF_Init(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L8A1_SimpleRanging_Init();
 80005da:	f000 f809 	bl	80005f0 <MX_53L8A1_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L8A1_SimpleRanging_Process();
 80005e6:	f000 f825 	bl	8000634 <MX_53L8A1_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_53L8A1_SimpleRanging_Init>:

static void MX_53L8A1_SimpleRanging_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fd8b 	bl	8001110 <BSP_COM_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80005fa:	2101      	movs	r1, #1
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fced 	bl	8000fdc <BSP_PB_Init>

  status = VL53L8A1_RANGING_SENSOR_Init(VL53L8A1_DEV_CENTER);
 8000602:	2001      	movs	r0, #1
 8000604:	f001 f858 	bl	80016b8 <VL53L8A1_RANGING_SENSOR_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <MX_53L8A1_SimpleRanging_Init+0x38>)
 800060c:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_53L8A1_SimpleRanging_Init+0x38>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <MX_53L8A1_SimpleRanging_Init+0x34>
  {
    printf("VL53L8A1_RANGING_SENSOR_Init failed\n");
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_53L8A1_SimpleRanging_Init+0x3c>)
 8000618:	f007 fb4c 	bl	8007cb4 <puts>
    printf("Check you're using ONLY the center device soldered on the shield, NO satellite shall be connected !\n");
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_53L8A1_SimpleRanging_Init+0x40>)
 800061e:	f007 fb49 	bl	8007cb4 <puts>
    while(1);
 8000622:	e7fe      	b.n	8000622 <MX_53L8A1_SimpleRanging_Init+0x32>
  }
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200005f8 	.word	0x200005f8
 800062c:	08008c58 	.word	0x08008c58
 8000630:	08008c7c 	.word	0x08008c7c

08000634 <MX_53L8A1_SimpleRanging_Process>:

static void MX_53L8A1_SimpleRanging_Process(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  uint32_t Id;

  VL53L8A1_RANGING_SENSOR_ReadID(VL53L8A1_DEV_CENTER, &Id);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4619      	mov	r1, r3
 800063e:	2001      	movs	r0, #1
 8000640:	f001 f84e 	bl	80016e0 <VL53L8A1_RANGING_SENSOR_ReadID>
  VL53L8A1_RANGING_SENSOR_GetCapabilities(VL53L8A1_DEV_CENTER, &Cap);
 8000644:	4921      	ldr	r1, [pc, #132]	; (80006cc <MX_53L8A1_SimpleRanging_Process+0x98>)
 8000646:	2001      	movs	r0, #1
 8000648:	f001 f872 	bl	8001730 <VL53L8A1_RANGING_SENSOR_GetCapabilities>

//  Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 800064e:	2203      	movs	r2, #3
 8000650:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 5 ms < TimingBudget < 100 ms */
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 8000654:	221e      	movs	r2, #30
 8000656:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 800065a:	2205      	movs	r2, #5
 800065c:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L8A1_RANGING_SENSOR_ConfigProfile(VL53L8A1_DEV_CENTER, &Profile);
 800066a:	4919      	ldr	r1, [pc, #100]	; (80006d0 <MX_53L8A1_SimpleRanging_Process+0x9c>)
 800066c:	2001      	movs	r0, #1
 800066e:	f001 f887 	bl	8001780 <VL53L8A1_RANGING_SENSOR_ConfigProfile>

  status = VL53L8A1_RANGING_SENSOR_Start(VL53L8A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000672:	2101      	movs	r1, #1
 8000674:	2001      	movs	r0, #1
 8000676:	f001 f8d3 	bl	8001820 <VL53L8A1_RANGING_SENSOR_Start>
 800067a:	4603      	mov	r3, r0
 800067c:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_53L8A1_SimpleRanging_Process+0xa0>)
 800067e:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_53L8A1_SimpleRanging_Process+0xa0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d003      	beq.n	8000690 <MX_53L8A1_SimpleRanging_Process+0x5c>
  {
    printf("VL53L8A1_RANGING_SENSOR_Start failed\n");
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_53L8A1_SimpleRanging_Process+0xa4>)
 800068a:	f007 fb13 	bl	8007cb4 <puts>
    while(1);
 800068e:	e7fe      	b.n	800068e <MX_53L8A1_SimpleRanging_Process+0x5a>
  }

  while (1)
  {
    /* polling mode */
    status = VL53L8A1_RANGING_SENSOR_GetDistance(VL53L8A1_DEV_CENTER, &Result);
 8000690:	4912      	ldr	r1, [pc, #72]	; (80006dc <MX_53L8A1_SimpleRanging_Process+0xa8>)
 8000692:	2001      	movs	r0, #1
 8000694:	f001 f89c 	bl	80017d0 <VL53L8A1_RANGING_SENSOR_GetDistance>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <MX_53L8A1_SimpleRanging_Process+0xa0>)
 800069c:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_53L8A1_SimpleRanging_Process+0xa0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <MX_53L8A1_SimpleRanging_Process+0x78>
    {
      print_result(&Result);
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_53L8A1_SimpleRanging_Process+0xa8>)
 80006a8:	f000 f81a 	bl	80006e0 <print_result>
    }

    if (com_has_data())
 80006ac:	f000 fa56 	bl	8000b5c <com_has_data>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d005      	beq.n	80006c2 <MX_53L8A1_SimpleRanging_Process+0x8e>
    {
      handle_cmd(get_key());
 80006b6:	f000 fa3d 	bl	8000b34 <get_key>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fa19 	bl	8000af4 <handle_cmd>
    }

    HAL_Delay(POLLING_PERIOD);
 80006c2:	20c8      	movs	r0, #200	; 0xc8
 80006c4:	f004 f9b2 	bl	8004a2c <HAL_Delay>
    status = VL53L8A1_RANGING_SENSOR_GetDistance(VL53L8A1_DEV_CENTER, &Result);
 80006c8:	e7e2      	b.n	8000690 <MX_53L8A1_SimpleRanging_Process+0x5c>
 80006ca:	bf00      	nop
 80006cc:	200000d0 	.word	0x200000d0
 80006d0:	200000e0 	.word	0x200000e0
 80006d4:	200005f8 	.word	0x200005f8
 80006d8:	08008ce0 	.word	0x08008ce0
 80006dc:	200000f4 	.word	0x200000f4

080006e0 <print_result>:
  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  int8_t i, j, k, l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80006e8:	4ba7      	ldr	r3, [pc, #668]	; (8000988 <print_result+0x2a8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d003      	beq.n	80006f8 <print_result+0x18>
         (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 80006f0:	4ba5      	ldr	r3, [pc, #660]	; (8000988 <print_result+0x2a8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d101      	bne.n	80006fc <print_result+0x1c>
 80006f8:	2308      	movs	r3, #8
 80006fa:	e000      	b.n	80006fe <print_result+0x1e>
 80006fc:	2304      	movs	r3, #4
 80006fe:	72fb      	strb	r3, [r7, #11]

  display_commands_banner();
 8000700:	f000 f9cc 	bl	8000a9c <display_commands_banner>

  printf("Cell Format :\n\n");
 8000704:	48a1      	ldr	r0, [pc, #644]	; (800098c <print_result+0x2ac>)
 8000706:	f007 fad5 	bl	8007cb4 <puts>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 800070a:	2300      	movs	r3, #0
 800070c:	733b      	strb	r3, [r7, #12]
 800070e:	e017      	b.n	8000740 <print_result+0x60>
  {
    printf(" \033[38;5;10m%20s\033[0m : %20s\n", "Distance [mm]", "Status");
 8000710:	4a9f      	ldr	r2, [pc, #636]	; (8000990 <print_result+0x2b0>)
 8000712:	49a0      	ldr	r1, [pc, #640]	; (8000994 <print_result+0x2b4>)
 8000714:	48a0      	ldr	r0, [pc, #640]	; (8000998 <print_result+0x2b8>)
 8000716:	f007 fa31 	bl	8007b7c <iprintf>
    if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 800071a:	4b9b      	ldr	r3, [pc, #620]	; (8000988 <print_result+0x2a8>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d103      	bne.n	800072a <print_result+0x4a>
 8000722:	4b99      	ldr	r3, [pc, #612]	; (8000988 <print_result+0x2a8>)
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d004      	beq.n	8000734 <print_result+0x54>
    {
      printf(" %20s : %20s\n", "Signal [kcps/spad]", "Ambient [kcps/spad]");
 800072a:	4a9c      	ldr	r2, [pc, #624]	; (800099c <print_result+0x2bc>)
 800072c:	499c      	ldr	r1, [pc, #624]	; (80009a0 <print_result+0x2c0>)
 800072e:	489d      	ldr	r0, [pc, #628]	; (80009a4 <print_result+0x2c4>)
 8000730:	f007 fa24 	bl	8007b7c <iprintf>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8000734:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	3301      	adds	r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	733b      	strb	r3, [r7, #12]
 8000740:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0e3      	beq.n	8000710 <print_result+0x30>
    }
  }

  printf("\n\n");
 8000748:	4897      	ldr	r0, [pc, #604]	; (80009a8 <print_result+0x2c8>)
 800074a:	f007 fab3 	bl	8007cb4 <puts>

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 800074e:	2300      	movs	r3, #0
 8000750:	73bb      	strb	r3, [r7, #14]
 8000752:	e0f9      	b.n	8000948 <print_result+0x268>
  {
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e008      	b.n	800076c <print_result+0x8c>
      printf(" -----------------");
 800075a:	4894      	ldr	r0, [pc, #592]	; (80009ac <print_result+0x2cc>)
 800075c:	f007 fa0e 	bl	8007b7c <iprintf>
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 8000760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	3301      	adds	r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	73fb      	strb	r3, [r7, #15]
 800076c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000770:	7afb      	ldrb	r3, [r7, #11]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbf1      	blt.n	800075a <print_result+0x7a>
    printf("\n");
 8000776:	200a      	movs	r0, #10
 8000778:	f007 fa18 	bl	8007bac <putchar>

    for (i = 0; i < zones_per_line; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e008      	b.n	8000794 <print_result+0xb4>
      printf("|                 ");
 8000782:	488b      	ldr	r0, [pc, #556]	; (80009b0 <print_result+0x2d0>)
 8000784:	f007 f9fa 	bl	8007b7c <iprintf>
    for (i = 0; i < zones_per_line; i++)
 8000788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	3301      	adds	r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000798:	7afb      	ldrb	r3, [r7, #11]
 800079a:	429a      	cmp	r2, r3
 800079c:	dbf1      	blt.n	8000782 <print_result+0xa2>
    printf("|\n");
 800079e:	4885      	ldr	r0, [pc, #532]	; (80009b4 <print_result+0x2d4>)
 80007a0:	f007 fa88 	bl	8007cb4 <puts>

    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	733b      	strb	r3, [r7, #12]
 80007a8:	e0c4      	b.n	8000934 <print_result+0x254>
    {
      /* Print distance and status */
      for (k = (zones_per_line - 1); k >= 0; k--)
 80007aa:	7afb      	ldrb	r3, [r7, #11]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	737b      	strb	r3, [r7, #13]
 80007b2:	e03f      	b.n	8000834 <print_result+0x154>
      {
        if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 80007b4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80007b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007bc:	441a      	add	r2, r3
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	3304      	adds	r3, #4
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d025      	beq.n	800081e <print_result+0x13e>
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
              (long)Result->ZoneResult[j+k].Distance[l],
 80007d2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80007d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007da:	441a      	add	r2, r3
 80007dc:	f997 000c 	ldrsb.w	r0, [r7, #12]
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	4403      	add	r3, r0
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	689b      	ldr	r3, [r3, #8]
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 80007f0:	461c      	mov	r4, r3
              (long)Result->ZoneResult[j+k].Status[l]);
 80007f2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80007f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007fa:	441a      	add	r2, r3
 80007fc:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8000800:	6879      	ldr	r1, [r7, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	4403      	add	r3, r0
 800080a:	3302      	adds	r3, #2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	685b      	ldr	r3, [r3, #4]
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 8000812:	461a      	mov	r2, r3
 8000814:	4621      	mov	r1, r4
 8000816:	4868      	ldr	r0, [pc, #416]	; (80009b8 <print_result+0x2d8>)
 8000818:	f007 f9b0 	bl	8007b7c <iprintf>
 800081c:	e004      	b.n	8000828 <print_result+0x148>
        else
          printf("| %5s  :  %5s ", "X", "X");
 800081e:	4a67      	ldr	r2, [pc, #412]	; (80009bc <print_result+0x2dc>)
 8000820:	4966      	ldr	r1, [pc, #408]	; (80009bc <print_result+0x2dc>)
 8000822:	4867      	ldr	r0, [pc, #412]	; (80009c0 <print_result+0x2e0>)
 8000824:	f007 f9aa 	bl	8007b7c <iprintf>
      for (k = (zones_per_line - 1); k >= 0; k--)
 8000828:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	3b01      	subs	r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	737b      	strb	r3, [r7, #13]
 8000834:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dabb      	bge.n	80007b4 <print_result+0xd4>
      }
      printf("|\n");
 800083c:	485d      	ldr	r0, [pc, #372]	; (80009b4 <print_result+0x2d4>)
 800083e:	f007 fa39 	bl	8007cb4 <puts>

      if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 8000842:	4b51      	ldr	r3, [pc, #324]	; (8000988 <print_result+0x2a8>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d103      	bne.n	8000852 <print_result+0x172>
 800084a:	4b4f      	ldr	r3, [pc, #316]	; (8000988 <print_result+0x2a8>)
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d06a      	beq.n	8000928 <print_result+0x248>
      {
        /* Print Signal and Ambient */
        for (k = (zones_per_line - 1); k >= 0; k--)
 8000852:	7afb      	ldrb	r3, [r7, #11]
 8000854:	3b01      	subs	r3, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	737b      	strb	r3, [r7, #13]
 800085a:	e05e      	b.n	800091a <print_result+0x23a>
        {
          if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 800085c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000860:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000864:	441a      	add	r2, r3
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	3304      	adds	r3, #4
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d044      	beq.n	8000904 <print_result+0x224>
          {
            if (Profile.EnableSignal != 0)
 800087a:	4b43      	ldr	r3, [pc, #268]	; (8000988 <print_result+0x2a8>)
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d019      	beq.n	80008b6 <print_result+0x1d6>
              printf("| %5ld  :  ", (long)Result->ZoneResult[j+k].Signal[l]);
 8000882:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000886:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800088a:	441a      	add	r2, r3
 800088c:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	4403      	add	r3, r0
 800089a:	3304      	adds	r3, #4
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	440b      	add	r3, r1
 80008a0:	3304      	adds	r3, #4
 80008a2:	edd3 7a00 	vldr	s15, [r3]
 80008a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008aa:	ee17 1a90 	vmov	r1, s15
 80008ae:	4845      	ldr	r0, [pc, #276]	; (80009c4 <print_result+0x2e4>)
 80008b0:	f007 f964 	bl	8007b7c <iprintf>
 80008b4:	e003      	b.n	80008be <print_result+0x1de>
            else
              printf("| %5s  :  ", "X");
 80008b6:	4941      	ldr	r1, [pc, #260]	; (80009bc <print_result+0x2dc>)
 80008b8:	4843      	ldr	r0, [pc, #268]	; (80009c8 <print_result+0x2e8>)
 80008ba:	f007 f95f 	bl	8007b7c <iprintf>

            if (Profile.EnableAmbient != 0)
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <print_result+0x2a8>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d019      	beq.n	80008fa <print_result+0x21a>
              printf("%5ld ", (long)Result->ZoneResult[j+k].Ambient[l]);
 80008c6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80008ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008ce:	441a      	add	r2, r3
 80008d0:	f997 000c 	ldrsb.w	r0, [r7, #12]
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	4403      	add	r3, r0
 80008de:	3302      	adds	r3, #2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	3308      	adds	r3, #8
 80008e6:	edd3 7a00 	vldr	s15, [r3]
 80008ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ee:	ee17 1a90 	vmov	r1, s15
 80008f2:	4836      	ldr	r0, [pc, #216]	; (80009cc <print_result+0x2ec>)
 80008f4:	f007 f942 	bl	8007b7c <iprintf>
 80008f8:	e009      	b.n	800090e <print_result+0x22e>
            else
              printf("%5s ", "X");
 80008fa:	4930      	ldr	r1, [pc, #192]	; (80009bc <print_result+0x2dc>)
 80008fc:	4834      	ldr	r0, [pc, #208]	; (80009d0 <print_result+0x2f0>)
 80008fe:	f007 f93d 	bl	8007b7c <iprintf>
 8000902:	e004      	b.n	800090e <print_result+0x22e>
          }
          else
            printf("| %5s  :  %5s ", "X", "X");
 8000904:	4a2d      	ldr	r2, [pc, #180]	; (80009bc <print_result+0x2dc>)
 8000906:	492d      	ldr	r1, [pc, #180]	; (80009bc <print_result+0x2dc>)
 8000908:	482d      	ldr	r0, [pc, #180]	; (80009c0 <print_result+0x2e0>)
 800090a:	f007 f937 	bl	8007b7c <iprintf>
        for (k = (zones_per_line - 1); k >= 0; k--)
 800090e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	737b      	strb	r3, [r7, #13]
 800091a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800091e:	2b00      	cmp	r3, #0
 8000920:	da9c      	bge.n	800085c <print_result+0x17c>
        }
        printf("|\n");
 8000922:	4824      	ldr	r0, [pc, #144]	; (80009b4 <print_result+0x2d4>)
 8000924:	f007 f9c6 	bl	8007cb4 <puts>
    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8000928:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	3301      	adds	r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	733b      	strb	r3, [r7, #12]
 8000934:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000938:	2b00      	cmp	r3, #0
 800093a:	f43f af36 	beq.w	80007aa <print_result+0xca>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 800093e:	7bba      	ldrb	r2, [r7, #14]
 8000940:	7afb      	ldrb	r3, [r7, #11]
 8000942:	4413      	add	r3, r2
 8000944:	b2db      	uxtb	r3, r3
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	429a      	cmp	r2, r3
 8000952:	f4ff aeff 	bcc.w	8000754 <print_result+0x74>
      }
    }
  }

  for (i = 0; i < zones_per_line; i++)
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e008      	b.n	800096e <print_result+0x28e>
    printf(" -----------------");
 800095c:	4813      	ldr	r0, [pc, #76]	; (80009ac <print_result+0x2cc>)
 800095e:	f007 f90d 	bl	8007b7c <iprintf>
  for (i = 0; i < zones_per_line; i++)
 8000962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	3301      	adds	r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	73fb      	strb	r3, [r7, #15]
 800096e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf1      	blt.n	800095c <print_result+0x27c>
  printf("\n");
 8000978:	200a      	movs	r0, #10
 800097a:	f007 f917 	bl	8007bac <putchar>
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	bf00      	nop
 8000988:	200000e0 	.word	0x200000e0
 800098c:	08008d08 	.word	0x08008d08
 8000990:	08008d18 	.word	0x08008d18
 8000994:	08008d20 	.word	0x08008d20
 8000998:	08008d30 	.word	0x08008d30
 800099c:	08008d4c 	.word	0x08008d4c
 80009a0:	08008d60 	.word	0x08008d60
 80009a4:	08008d74 	.word	0x08008d74
 80009a8:	08008d84 	.word	0x08008d84
 80009ac:	08008d88 	.word	0x08008d88
 80009b0:	08008d9c 	.word	0x08008d9c
 80009b4:	08008db0 	.word	0x08008db0
 80009b8:	08008db4 	.word	0x08008db4
 80009bc:	08008dd4 	.word	0x08008dd4
 80009c0:	08008dd8 	.word	0x08008dd8
 80009c4:	08008de8 	.word	0x08008de8
 80009c8:	08008df4 	.word	0x08008df4
 80009cc:	08008e00 	.word	0x08008e00
 80009d0:	08008e08 	.word	0x08008e08

080009d4 <toggle_resolution>:

static void toggle_resolution(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  VL53L8A1_RANGING_SENSOR_Stop(VL53L8A1_DEV_CENTER);
 80009d8:	2001      	movs	r0, #1
 80009da:	f000 ff49 	bl	8001870 <VL53L8A1_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <toggle_resolution+0x64>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d81b      	bhi.n	8000a20 <toggle_resolution+0x4c>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <toggle_resolution+0x1c>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a09 	.word	0x08000a09
 80009f4:	08000a01 	.word	0x08000a01
 80009f8:	08000a19 	.word	0x08000a19
 80009fc:	08000a11 	.word	0x08000a11
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <toggle_resolution+0x64>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	601a      	str	r2, [r3, #0]
      break;
 8000a06:	e00c      	b.n	8000a22 <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <toggle_resolution+0x64>)
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	601a      	str	r2, [r3, #0]
      break;
 8000a0e:	e008      	b.n	8000a22 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <toggle_resolution+0x64>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	601a      	str	r2, [r3, #0]
      break;
 8000a16:	e004      	b.n	8000a22 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <toggle_resolution+0x64>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
      break;
 8000a1e:	e000      	b.n	8000a22 <toggle_resolution+0x4e>

    default:
      break;
 8000a20:	bf00      	nop
  }

  VL53L8A1_RANGING_SENSOR_ConfigProfile(VL53L8A1_DEV_CENTER, &Profile);
 8000a22:	4905      	ldr	r1, [pc, #20]	; (8000a38 <toggle_resolution+0x64>)
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 feab 	bl	8001780 <VL53L8A1_RANGING_SENSOR_ConfigProfile>
  VL53L8A1_RANGING_SENSOR_Start(VL53L8A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 fef7 	bl	8001820 <VL53L8A1_RANGING_SENSOR_Start>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000e0 	.word	0x200000e0

08000a3c <toggle_signal_and_ambient>:

static void toggle_signal_and_ambient(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  VL53L8A1_RANGING_SENSOR_Stop(VL53L8A1_DEV_CENTER);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f000 ff15 	bl	8001870 <VL53L8A1_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <toggle_signal_and_ambient+0x48>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2301      	moveq	r3, #1
 8000a50:	2300      	movne	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <toggle_signal_and_ambient+0x48>)
 8000a58:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <toggle_signal_and_ambient+0x48>)
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf0c      	ite	eq
 8000a62:	2301      	moveq	r3, #1
 8000a64:	2300      	movne	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <toggle_signal_and_ambient+0x48>)
 8000a6c:	611a      	str	r2, [r3, #16]

  VL53L8A1_RANGING_SENSOR_ConfigProfile(VL53L8A1_DEV_CENTER, &Profile);
 8000a6e:	4905      	ldr	r1, [pc, #20]	; (8000a84 <toggle_signal_and_ambient+0x48>)
 8000a70:	2001      	movs	r0, #1
 8000a72:	f000 fe85 	bl	8001780 <VL53L8A1_RANGING_SENSOR_ConfigProfile>
  VL53L8A1_RANGING_SENSOR_Start(VL53L8A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000a76:	2101      	movs	r1, #1
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 fed1 	bl	8001820 <VL53L8A1_RANGING_SENSOR_Start>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000e0 	.word	0x200000e0

08000a88 <clear_screen>:

static void clear_screen(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  printf("%c[2J", 27); /* 27 is ESC command */
 8000a8c:	211b      	movs	r1, #27
 8000a8e:	4802      	ldr	r0, [pc, #8]	; (8000a98 <clear_screen+0x10>)
 8000a90:	f007 f874 	bl	8007b7c <iprintf>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	08008e10 	.word	0x08008e10

08000a9c <display_commands_banner>:

static void display_commands_banner(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* clear screen */
  printf("%c[2H", 27);
 8000aa0:	211b      	movs	r1, #27
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <display_commands_banner+0x3c>)
 8000aa4:	f007 f86a 	bl	8007b7c <iprintf>

  printf("53L8A1 Simple Ranging demo application\n");
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <display_commands_banner+0x40>)
 8000aaa:	f007 f903 	bl	8007cb4 <puts>
  printf("--------------------------------------\n\n");
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <display_commands_banner+0x44>)
 8000ab0:	f007 f900 	bl	8007cb4 <puts>

  printf("Use the following keys to control application\n");
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <display_commands_banner+0x48>)
 8000ab6:	f007 f8fd 	bl	8007cb4 <puts>
  printf(" 'r' : change resolution\n");
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <display_commands_banner+0x4c>)
 8000abc:	f007 f8fa 	bl	8007cb4 <puts>
  printf(" 's' : enable signal and ambient\n");
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <display_commands_banner+0x50>)
 8000ac2:	f007 f8f7 	bl	8007cb4 <puts>
  printf(" 'c' : clear screen\n");
 8000ac6:	480a      	ldr	r0, [pc, #40]	; (8000af0 <display_commands_banner+0x54>)
 8000ac8:	f007 f8f4 	bl	8007cb4 <puts>
  printf("\n");
 8000acc:	200a      	movs	r0, #10
 8000ace:	f007 f86d 	bl	8007bac <putchar>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08008e18 	.word	0x08008e18
 8000adc:	08008e20 	.word	0x08008e20
 8000ae0:	08008e48 	.word	0x08008e48
 8000ae4:	08008e70 	.word	0x08008e70
 8000ae8:	08008ea0 	.word	0x08008ea0
 8000aec:	08008ebc 	.word	0x08008ebc
 8000af0:	08008ee0 	.word	0x08008ee0

08000af4 <handle_cmd>:

static void handle_cmd(uint8_t cmd)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b73      	cmp	r3, #115	; 0x73
 8000b02:	d00a      	beq.n	8000b1a <handle_cmd+0x26>
 8000b04:	2b73      	cmp	r3, #115	; 0x73
 8000b06:	dc10      	bgt.n	8000b2a <handle_cmd+0x36>
 8000b08:	2b63      	cmp	r3, #99	; 0x63
 8000b0a:	d00b      	beq.n	8000b24 <handle_cmd+0x30>
 8000b0c:	2b72      	cmp	r3, #114	; 0x72
 8000b0e:	d10c      	bne.n	8000b2a <handle_cmd+0x36>
  {
    case 'r':
      toggle_resolution();
 8000b10:	f7ff ff60 	bl	80009d4 <toggle_resolution>
      clear_screen();
 8000b14:	f7ff ffb8 	bl	8000a88 <clear_screen>
      break;
 8000b18:	e008      	b.n	8000b2c <handle_cmd+0x38>

    case 's':
      toggle_signal_and_ambient();
 8000b1a:	f7ff ff8f 	bl	8000a3c <toggle_signal_and_ambient>
      clear_screen();
 8000b1e:	f7ff ffb3 	bl	8000a88 <clear_screen>
      break;
 8000b22:	e003      	b.n	8000b2c <handle_cmd+0x38>

    case 'c':
      clear_screen();
 8000b24:	f7ff ffb0 	bl	8000a88 <clear_screen>
      break;
 8000b28:	e000      	b.n	8000b2c <handle_cmd+0x38>

    default:
      break;
 8000b2a:	bf00      	nop
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <get_key>:

static uint8_t get_key(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 8000b3e:	1df9      	adds	r1, r7, #7
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	2201      	movs	r2, #1
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <get_key+0x24>)
 8000b48:	f006 fc54 	bl	80073f4 <HAL_UART_Receive>

  return cmd;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000620 	.word	0x20000620

08000b5c <com_has_data>:

static uint32_t com_has_data(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <com_has_data+0x24>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	2b20      	cmp	r3, #32
 8000b6c:	bf0c      	ite	eq
 8000b6e:	2301      	moveq	r3, #1
 8000b70:	2300      	movne	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000620 	.word	0x20000620

08000b84 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <BSP_PB_Callback+0x1c>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	200005fc 	.word	0x200005fc

08000ba4 <HAL_GPIO_EXTI_Callback>:
#include "app_tof_pin_conf.h"

extern volatile uint8_t ToF_EventDetected;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	2b10      	cmp	r3, #16
 8000bb2:	d102      	bne.n	8000bba <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200005fd 	.word	0x200005fd

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f003 feba 	bl	8004948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f80a 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f000 f8d0 	bl	8000d7c <MX_GPIO_Init>
  MX_RTC_Init();
 8000bdc:	f000 f874 	bl	8000cc8 <MX_RTC_Init>
  MX_TOF_Init();
 8000be0:	f7ff fcf9 	bl	80005d6 <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 8000be4:	f7ff fcfd 	bl	80005e2 <MX_TOF_Process>
 8000be8:	e7fc      	b.n	8000be4 <main+0x18>
	...

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	; 0x50
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	2230      	movs	r2, #48	; 0x30
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f006 ffb6 	bl	8007b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <SystemClock_Config+0xd4>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a29      	ldr	r2, [pc, #164]	; (8000cc0 <SystemClock_Config+0xd4>)
 8000c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <SystemClock_Config+0xd4>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <SystemClock_Config+0xd8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c38:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <SystemClock_Config+0xd8>)
 8000c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <SystemClock_Config+0xd8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c54:	2310      	movs	r3, #16
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c64:	2310      	movs	r3, #16
 8000c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c72:	2307      	movs	r3, #7
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f005 fb16 	bl	80062ac <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c86:	f000 f913 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f005 fd78 	bl	800679c <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cb2:	f000 f8fd 	bl	8000eb0 <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3750      	adds	r7, #80	; 0x50
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cdc:	2300      	movs	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_RTC_Init+0xac>)
 8000ce2:	4a25      	ldr	r2, [pc, #148]	; (8000d78 <MX_RTC_Init+0xb0>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <MX_RTC_Init+0xac>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_RTC_Init+0xac>)
 8000cee:	227f      	movs	r2, #127	; 0x7f
 8000cf0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <MX_RTC_Init+0xac>)
 8000cf4:	22ff      	movs	r2, #255	; 0xff
 8000cf6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_RTC_Init+0xac>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_RTC_Init+0xac>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_RTC_Init+0xac>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d0a:	481a      	ldr	r0, [pc, #104]	; (8000d74 <MX_RTC_Init+0xac>)
 8000d0c:	f006 f854 	bl	8006db8 <HAL_RTC_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d16:	f000 f8cb 	bl	8000eb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	480f      	ldr	r0, [pc, #60]	; (8000d74 <MX_RTC_Init+0xac>)
 8000d36:	f006 f8b5 	bl	8006ea4 <HAL_RTC_SetTime>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f000 f8b6 	bl	8000eb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d44:	2301      	movs	r3, #1
 8000d46:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	2201      	movs	r2, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_RTC_Init+0xac>)
 8000d5c:	f006 f93c 	bl	8006fd8 <HAL_RTC_SetDate>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000d66:	f000 f8a3 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000600 	.word	0x20000600
 8000d78:	40002800 	.word	0x40002800

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a42      	ldr	r2, [pc, #264]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a34      	ldr	r2, [pc, #208]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <MX_GPIO_Init+0x128>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2120      	movs	r1, #32
 8000e06:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <MX_GPIO_Init+0x12c>)
 8000e08:	f004 fa00 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4825      	ldr	r0, [pc, #148]	; (8000ea8 <MX_GPIO_Init+0x12c>)
 8000e12:	f004 f9fb 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4824      	ldr	r0, [pc, #144]	; (8000eac <MX_GPIO_Init+0x130>)
 8000e1c:	f004 f9f6 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	4821      	ldr	r0, [pc, #132]	; (8000eac <MX_GPIO_Init+0x130>)
 8000e26:	f004 f9f1 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <MX_GPIO_Init+0x12c>)
 8000e40:	f003 ff7c 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <MX_GPIO_Init+0x12c>)
 8000e5c:	f003 ff6e 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8000e60:	2341      	movs	r3, #65	; 0x41
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_GPIO_Init+0x130>)
 8000e78:	f003 ff60 	bl	8004d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	200a      	movs	r0, #10
 8000e82:	f003 fed2 	bl	8004c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e86:	200a      	movs	r0, #10
 8000e88:	f003 feeb 	bl	8004c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2028      	movs	r0, #40	; 0x28
 8000e92:	f003 feca 	bl	8004c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e96:	2028      	movs	r0, #40	; 0x28
 8000e98:	f003 fee3 	bl	8004c62 <HAL_NVIC_EnableIRQ>

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	; 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40020400 	.word	0x40020400

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000efa:	2007      	movs	r0, #7
 8000efc:	f003 fe8a 	bl	8004c14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <HAL_RTC_MspInit+0x50>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d111      	bne.n	8000f52 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f36:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 fe4d 	bl	8006bdc <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f48:	f7ff ffb2 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <HAL_RTC_MspInit+0x54>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40002800 	.word	0x40002800
 8000f60:	42470e3c 	.word	0x42470e3c

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f003 fd1c 	bl	80049ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000fbc:	2010      	movs	r0, #16
 8000fbe:	f004 f93f 	bl	8005240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <EXTI15_10_IRQHandler+0x10>)
 8000fce:	f003 fe91 	bl	8004cf4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000

08000fdc <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <BSP_PB_Init+0x94>)
 8000ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d132      	bne.n	8001066 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <BSP_PB_Init+0x98>)
 8001006:	441a      	add	r2, r3
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	491b      	ldr	r1, [pc, #108]	; (8001078 <BSP_PB_Init+0x9c>)
 800100c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001010:	4619      	mov	r1, r3
 8001012:	4610      	mov	r0, r2
 8001014:	f003 fe59 	bl	8004cca <HAL_EXTI_GetHandle>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800101e:	f06f 0303 	mvn.w	r3, #3
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e01f      	b.n	8001066 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <BSP_PB_Init+0x98>)
 800102c:	1898      	adds	r0, r3, r2
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <BSP_PB_Init+0xa0>)
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	461a      	mov	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	f003 fe2c 	bl	8004c96 <HAL_EXTI_RegisterCallback>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001044:	f06f 0303 	mvn.w	r3, #3
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	e00c      	b.n	8001066 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800104c:	2028      	movs	r0, #40	; 0x28
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <BSP_PB_Init+0xa4>)
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	f003 fde6 	bl	8004c2a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800105e:	2328      	movs	r3, #40	; 0x28
 8001060:	4618      	mov	r0, r3
 8001062:	f003 fdfe 	bl	8004c62 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08008f68 	.word	0x08008f68
 8001074:	20000000 	.word	0x20000000
 8001078:	08008f6c 	.word	0x08008f6c
 800107c:	08008f70 	.word	0x08008f70
 8001080:	08008f74 	.word	0x08008f74

08001084 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff fd7b 	bl	8000b84 <BSP_PB_Callback>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <BUTTON_USER_GPIO_Init+0x74>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <BUTTON_USER_GPIO_Init+0x74>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <BUTTON_USER_GPIO_Init+0x74>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <BUTTON_USER_GPIO_Init+0x74>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <BUTTON_USER_GPIO_Init+0x74>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <BUTTON_USER_GPIO_Init+0x74>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <BUTTON_USER_GPIO_Init+0x78>)
 80010fa:	f003 fe1f 	bl	8004d3c <HAL_GPIO_Init>

}
 80010fe:	bf00      	nop
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40020800 	.word	0x40020800

08001110 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d903      	bls.n	800112c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001124:	f06f 0301 	mvn.w	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e025      	b.n	8001178 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	4914      	ldr	r1, [pc, #80]	; (8001184 <BSP_COM_Init+0x74>)
 8001132:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <BSP_COM_Init+0x78>)
 8001138:	4613      	mov	r3, r2
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4403      	add	r3, r0
 8001142:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	4613      	mov	r3, r2
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <BSP_COM_Init+0x78>)
 8001150:	4413      	add	r3, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f864 	bl	8001220 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	4613      	mov	r3, r2
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <BSP_COM_Init+0x78>)
 8001164:	4413      	add	r3, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f810 	bl	800118c <MX_USART2_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001172:	f06f 0303 	mvn.w	r3, #3
 8001176:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001178:	68fb      	ldr	r3, [r7, #12]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	20000620 	.word	0x20000620

0800118c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 800119c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 460800;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80011a4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f006 f829 	bl	8007222 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40004400 	.word	0x40004400

080011e8 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <__io_putchar+0x30>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4613      	mov	r3, r2
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <__io_putchar+0x34>)
 8001200:	1898      	adds	r0, r3, r2
 8001202:	1d39      	adds	r1, r7, #4
 8001204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001208:	2201      	movs	r2, #1
 800120a:	f006 f861 	bl	80072d0 <HAL_UART_Transmit>
  return ch;
 800120e:	687b      	ldr	r3, [r7, #4]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000664 	.word	0x20000664
 800121c:	20000620 	.word	0x20000620

08001220 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <USART2_MspInit+0x88>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <USART2_MspInit+0x88>)
 8001232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <USART2_MspInit+0x88>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <USART2_MspInit+0x88>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <USART2_MspInit+0x88>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <USART2_MspInit+0x88>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001260:	2304      	movs	r3, #4
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001270:	2307      	movs	r3, #7
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <USART2_MspInit+0x8c>)
 800127c:	f003 fd5e 	bl	8004d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001280:	2308      	movs	r3, #8
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001290:	2307      	movs	r3, #7
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <USART2_MspInit+0x8c>)
 800129c:	f003 fd4e 	bl	8004d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <BSP_I2C1_Init+0x58>)
 80012bc:	4a13      	ldr	r2, [pc, #76]	; (800130c <BSP_I2C1_Init+0x5c>)
 80012be:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <BSP_I2C1_Init+0x60>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	4912      	ldr	r1, [pc, #72]	; (8001310 <BSP_I2C1_Init+0x60>)
 80012c8:	600a      	str	r2, [r1, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d117      	bne.n	80012fe <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80012ce:	480e      	ldr	r0, [pc, #56]	; (8001308 <BSP_I2C1_Init+0x58>)
 80012d0:	f004 fc76 	bl	8005bc0 <HAL_I2C_GetState>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d111      	bne.n	80012fe <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80012da:	480b      	ldr	r0, [pc, #44]	; (8001308 <BSP_I2C1_Init+0x58>)
 80012dc:	f000 f8e2 	bl	80014a4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10b      	bne.n	80012fe <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <BSP_I2C1_Init+0x58>)
 80012e8:	f000 f8a8 	bl	800143c <MX_I2C1_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80012f2:	f06f 0307 	mvn.w	r3, #7
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	e001      	b.n	80012fe <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000668 	.word	0x20000668
 800130c:	40005400 	.word	0x40005400
 8001310:	200006bc 	.word	0x200006bc

08001314 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <BSP_I2C1_DeInit+0x48>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d014      	beq.n	8001350 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <BSP_I2C1_DeInit+0x48>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <BSP_I2C1_DeInit+0x48>)
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <BSP_I2C1_DeInit+0x48>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10b      	bne.n	8001350 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <BSP_I2C1_DeInit+0x4c>)
 800133a:	f000 f8fd 	bl	8001538 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <BSP_I2C1_DeInit+0x4c>)
 8001340:	f004 f8da 	bl	80054f8 <HAL_I2C_DeInit>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800134a:	f06f 0307 	mvn.w	r3, #7
 800134e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200006bc 	.word	0x200006bc
 8001360:	20000668 	.word	0x20000668

08001364 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af04      	add	r7, sp, #16
 800136a:	60ba      	str	r2, [r7, #8]
 800136c:	461a      	mov	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	81fb      	strh	r3, [r7, #14]
 8001372:	460b      	mov	r3, r1
 8001374:	81bb      	strh	r3, [r7, #12]
 8001376:	4613      	mov	r3, r2
 8001378:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800137e:	89ba      	ldrh	r2, [r7, #12]
 8001380:	89f9      	ldrh	r1, [r7, #14]
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2310      	movs	r3, #16
 8001392:	480c      	ldr	r0, [pc, #48]	; (80013c4 <BSP_I2C1_WriteReg16+0x60>)
 8001394:	f004 f8f4 	bl	8005580 <HAL_I2C_Mem_Write>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00c      	beq.n	80013b8 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800139e:	4809      	ldr	r0, [pc, #36]	; (80013c4 <BSP_I2C1_WriteReg16+0x60>)
 80013a0:	f004 fc1c 	bl	8005bdc <HAL_I2C_GetError>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d103      	bne.n	80013b2 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013aa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e002      	b.n	80013b8 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80013b2:	f06f 0303 	mvn.w	r3, #3
 80013b6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80013b8:	697b      	ldr	r3, [r7, #20]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000668 	.word	0x20000668

080013c8 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af04      	add	r7, sp, #16
 80013ce:	60ba      	str	r2, [r7, #8]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4603      	mov	r3, r0
 80013d4:	81fb      	strh	r3, [r7, #14]
 80013d6:	460b      	mov	r3, r1
 80013d8:	81bb      	strh	r3, [r7, #12]
 80013da:	4613      	mov	r3, r2
 80013dc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80013e2:	89ba      	ldrh	r2, [r7, #12]
 80013e4:	89f9      	ldrh	r1, [r7, #14]
 80013e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2310      	movs	r3, #16
 80013f6:	480c      	ldr	r0, [pc, #48]	; (8001428 <BSP_I2C1_ReadReg16+0x60>)
 80013f8:	f004 f9bc 	bl	8005774 <HAL_I2C_Mem_Read>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00c      	beq.n	800141c <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <BSP_I2C1_ReadReg16+0x60>)
 8001404:	f004 fbea 	bl	8005bdc <HAL_I2C_GetError>
 8001408:	4603      	mov	r3, r0
 800140a:	2b04      	cmp	r3, #4
 800140c:	d003      	beq.n	8001416 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800140e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e002      	b.n	800141c <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001416:	f06f 0303 	mvn.w	r3, #3
 800141a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800141c:	697b      	ldr	r3, [r7, #20]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000668 	.word	0x20000668

0800142c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001430:	f003 faf0 	bl	8004a14 <HAL_GetTick>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a14      	ldr	r2, [pc, #80]	; (800149c <MX_I2C1_Init+0x60>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <MX_I2C1_Init+0x64>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001466:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f003 fef5 	bl	8005270 <HAL_I2C_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40005400 	.word	0x40005400
 80014a0:	00061a80 	.word	0x00061a80

080014a4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <I2C1_MspInit+0x8c>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <I2C1_MspInit+0x8c>)
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <I2C1_MspInit+0x8c>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80014c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ce:	2312      	movs	r3, #18
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80014da:	2304      	movs	r3, #4
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <I2C1_MspInit+0x90>)
 80014e6:	f003 fc29 	bl	8004d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80014fc:	2304      	movs	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	480b      	ldr	r0, [pc, #44]	; (8001534 <I2C1_MspInit+0x90>)
 8001508:	f003 fc18 	bl	8004d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <I2C1_MspInit+0x8c>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <I2C1_MspInit+0x8c>)
 8001516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <I2C1_MspInit+0x8c>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <I2C1_MspDeInit+0x30>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a08      	ldr	r2, [pc, #32]	; (8001568 <I2C1_MspDeInit+0x30>)
 8001546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800154c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001550:	4806      	ldr	r0, [pc, #24]	; (800156c <I2C1_MspDeInit+0x34>)
 8001552:	f003 fd77 	bl	8005044 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <I2C1_MspDeInit+0x34>)
 800155c:	f003 fd72 	bl	8005044 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40020400 	.word	0x40020400

08001570 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e00a      	b.n	8001598 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001582:	f3af 8000 	nop.w
 8001586:	4601      	mov	r1, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf0      	blt.n	8001582 <_read+0x12>
  }

  return len;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e009      	b.n	80015d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fe0f 	bl	80011e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbf1      	blt.n	80015bc <_write+0x12>
  }
  return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_close>:

int _close(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160a:	605a      	str	r2, [r3, #4]
  return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_isatty>:

int _isatty(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f006 fa3e 	bl	8007afc <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <_sbrk+0x64>)
 800169c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20018000 	.word	0x20018000
 80016ac:	00000800 	.word	0x00000800
 80016b0:	200006c0 	.word	0x200006c0
 80016b4:	200029c8 	.word	0x200029c8

080016b8 <VL53L8A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d903      	bls.n	80016ce <VL53L8A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016c6:	f06f 0301 	mvn.w	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	e003      	b.n	80016d6 <VL53L8A1_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L8CX_Probe(Instance);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f8f4 	bl	80018bc <VL53L8CX_Probe>
 80016d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <VL53L8A1_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d903      	bls.n	80016f8 <VL53L8A1_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016f0:	f06f 0301 	mvn.w	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e012      	b.n	800171e <VL53L8A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->ReadID(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <VL53L8A1_RANGING_SENSOR_ReadID+0x48>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	490b      	ldr	r1, [pc, #44]	; (800172c <VL53L8A1_RANGING_SENSOR_ReadID+0x4c>)
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	4610      	mov	r0, r2
 800170a:	4798      	blx	r3
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	da03      	bge.n	800171a <VL53L8A1_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001712:	f06f 0304 	mvn.w	r3, #4
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e001      	b.n	800171e <VL53L8A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200006d0 	.word	0x200006d0
 800172c:	200006c4 	.word	0x200006c4

08001730 <VL53L8A1_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d903      	bls.n	8001748 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001740:	f06f 0301 	mvn.w	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e012      	b.n	800176e <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x48>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	490b      	ldr	r1, [pc, #44]	; (800177c <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x4c>)
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001756:	6839      	ldr	r1, [r7, #0]
 8001758:	4610      	mov	r0, r2
 800175a:	4798      	blx	r3
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	da03      	bge.n	800176a <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001762:	f06f 0304 	mvn.w	r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e001      	b.n	800176e <VL53L8A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200006d0 	.word	0x200006d0
 800177c:	200006c4 	.word	0x200006c4

08001780 <VL53L8A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d903      	bls.n	8001798 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001790:	f06f 0301 	mvn.w	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e012      	b.n	80017be <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x48>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	490b      	ldr	r1, [pc, #44]	; (80017cc <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	4610      	mov	r0, r2
 80017aa:	4798      	blx	r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da03      	bge.n	80017ba <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80017b2:	f06f 0304 	mvn.w	r3, #4
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e001      	b.n	80017be <VL53L8A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200006d0 	.word	0x200006d0
 80017cc:	200006c4 	.word	0x200006c4

080017d0 <VL53L8A1_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d903      	bls.n	80017e8 <VL53L8A1_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017e0:	f06f 0301 	mvn.w	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	e012      	b.n	800180e <VL53L8A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->GetDistance(VL53L8A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <VL53L8A1_RANGING_SENSOR_GetDistance+0x48>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	490b      	ldr	r1, [pc, #44]	; (800181c <VL53L8A1_RANGING_SENSOR_GetDistance+0x4c>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017f6:	6839      	ldr	r1, [r7, #0]
 80017f8:	4610      	mov	r0, r2
 80017fa:	4798      	blx	r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da03      	bge.n	800180a <VL53L8A1_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001802:	f06f 0304 	mvn.w	r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e001      	b.n	800180e <VL53L8A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200006d0 	.word	0x200006d0
 800181c:	200006c4 	.word	0x200006c4

08001820 <VL53L8A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d903      	bls.n	8001838 <VL53L8A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001830:	f06f 0301 	mvn.w	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e012      	b.n	800185e <VL53L8A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->Start(VL53L8A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <VL53L8A1_RANGING_SENSOR_Start+0x48>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	490b      	ldr	r1, [pc, #44]	; (800186c <VL53L8A1_RANGING_SENSOR_Start+0x4c>)
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	4610      	mov	r0, r2
 800184a:	4798      	blx	r3
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	da03      	bge.n	800185a <VL53L8A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001852:	f06f 0304 	mvn.w	r3, #4
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e001      	b.n	800185e <VL53L8A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200006d0 	.word	0x200006d0
 800186c:	200006c4 	.word	0x200006c4

08001870 <VL53L8A1_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L8A1_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d903      	bls.n	8001886 <VL53L8A1_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800187e:	f06f 0301 	mvn.w	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e011      	b.n	80018aa <VL53L8A1_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L8A1_RANGING_SENSOR_Drv->Stop(VL53L8A1_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <VL53L8A1_RANGING_SENSOR_Stop+0x44>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	490a      	ldr	r1, [pc, #40]	; (80018b8 <VL53L8A1_RANGING_SENSOR_Stop+0x48>)
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001894:	4610      	mov	r0, r2
 8001896:	4798      	blx	r3
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	da03      	bge.n	80018a6 <VL53L8A1_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800189e:	f06f 0304 	mvn.w	r3, #4
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e001      	b.n	80018aa <VL53L8A1_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200006d0 	.word	0x200006d0
 80018b8:	200006c4 	.word	0x200006c4

080018bc <VL53L8CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L8CX_Probe(uint32_t Instance)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  VL53L8CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L8CX_Object_t   VL53L8CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L8CX_ADDRESS;
 80018c4:	2352      	movs	r3, #82	; 0x52
 80018c6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L8A1_I2C_Init;
 80018c8:	4b38      	ldr	r3, [pc, #224]	; (80019ac <VL53L8CX_Probe+0xf0>)
 80018ca:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L8A1_I2C_DeInit;
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <VL53L8CX_Probe+0xf4>)
 80018ce:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L8A1_I2C_WriteReg;
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <VL53L8CX_Probe+0xf8>)
 80018d2:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L8A1_I2C_ReadReg;
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <VL53L8CX_Probe+0xfc>)
 80018d6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L8A1_GetTick;
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <VL53L8CX_Probe+0x100>)
 80018da:	623b      	str	r3, [r7, #32]

  if (VL53L8CX_RegisterBusIO(&(VL53L8CXObj[Instance]), &IOCtx) != VL53L8CX_OK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f640 1254 	movw	r2, #2388	; 0x954
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <VL53L8CX_Probe+0x104>)
 80018e8:	4413      	add	r3, r2
 80018ea:	f107 020c 	add.w	r2, r7, #12
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f918 	bl	8001b26 <VL53L8CX_RegisterBusIO>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <VL53L8CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80018fc:	f06f 0304 	mvn.w	r3, #4
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	e04d      	b.n	80019a0 <VL53L8CX_Probe+0xe4>
  }
  else
  {
    VL53L8A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L8CX_RANGING_SENSOR_Driver;
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <VL53L8CX_Probe+0x108>)
 8001906:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <VL53L8CX_Probe+0x10c>)
 8001908:	601a      	str	r2, [r3, #0]
    VL53L8A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L8CXObj[Instance]);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f640 1254 	movw	r2, #2388	; 0x954
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <VL53L8CX_Probe+0x104>)
 8001916:	441a      	add	r2, r3
 8001918:	492c      	ldr	r1, [pc, #176]	; (80019cc <VL53L8CX_Probe+0x110>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L8CX_ReadID(&(VL53L8CXObj[Instance]), &id) != VL53L8CX_OK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f640 1254 	movw	r2, #2388	; 0x954
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <VL53L8CX_Probe+0x104>)
 800192c:	4413      	add	r3, r2
 800192e:	f107 0208 	add.w	r2, r7, #8
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f9a6 	bl	8001c86 <VL53L8CX_ReadID>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <VL53L8CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001940:	f06f 0304 	mvn.w	r3, #4
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
 8001946:	e02b      	b.n	80019a0 <VL53L8CX_Probe+0xe4>
    }
    else if (id != VL53L8CX_ID)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f24f 020c 	movw	r2, #61452	; 0xf00c
 800194e:	4293      	cmp	r3, r2
 8001950:	d003      	beq.n	800195a <VL53L8CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001952:	f06f 0306 	mvn.w	r3, #6
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	e022      	b.n	80019a0 <VL53L8CX_Probe+0xe4>
    }
    else if (VL53L8A1_RANGING_SENSOR_Drv->Init(VL53L8A1_RANGING_SENSOR_CompObj[Instance]) != VL53L8CX_OK)
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <VL53L8CX_Probe+0x108>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	491a      	ldr	r1, [pc, #104]	; (80019cc <VL53L8CX_Probe+0x110>)
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001968:	4610      	mov	r0, r2
 800196a:	4798      	blx	r3
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <VL53L8CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001972:	f06f 0304 	mvn.w	r3, #4
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	e012      	b.n	80019a0 <VL53L8CX_Probe+0xe4>
    }
    else if (VL53L8A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L8A1_RANGING_SENSOR_CompObj[Instance],
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <VL53L8CX_Probe+0x108>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4912      	ldr	r1, [pc, #72]	; (80019cc <VL53L8CX_Probe+0x110>)
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001988:	4911      	ldr	r1, [pc, #68]	; (80019d0 <VL53L8CX_Probe+0x114>)
 800198a:	4610      	mov	r0, r2
 800198c:	4798      	blx	r3
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <VL53L8CX_Probe+0xe0>
                                                          &VL53L8A1_RANGING_SENSOR_Cap) != VL53L8CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001994:	f06f 0304 	mvn.w	r3, #4
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	e001      	b.n	80019a0 <VL53L8CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	080012b1 	.word	0x080012b1
 80019b0:	08001315 	.word	0x08001315
 80019b4:	08001365 	.word	0x08001365
 80019b8:	080013c9 	.word	0x080013c9
 80019bc:	0800142d 	.word	0x0800142d
 80019c0:	200006e4 	.word	0x200006e4
 80019c4:	200006d0 	.word	0x200006d0
 80019c8:	2000000c 	.word	0x2000000c
 80019cc:	200006c4 	.word	0x200006c4
 80019d0:	200006d4 	.word	0x200006d4

080019d4 <RdByte>:

uint8_t RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	460b      	mov	r3, r1
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	689c      	ldr	r4, [r3, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8818      	ldrh	r0, [r3, #0]
 80019ea:	8979      	ldrh	r1, [r7, #10]
 80019ec:	2301      	movs	r3, #1
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	47a0      	blx	r4
 80019f2:	4603      	mov	r3, r0
 80019f4:	b2db      	uxtb	r3, r3
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}

080019fe <WrByte>:

uint8_t WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80019fe:	b590      	push	{r4, r7, lr}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	807b      	strh	r3, [r7, #2]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685c      	ldr	r4, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	8818      	ldrh	r0, [r3, #0]
 8001a16:	1c7a      	adds	r2, r7, #1
 8001a18:	8879      	ldrh	r1, [r7, #2]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	47a0      	blx	r4
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b2db      	uxtb	r3, r3
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}

08001a2a <WrMulti>:
uint8_t WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8001a2a:	b590      	push	{r4, r7, lr}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	460b      	mov	r3, r1
 8001a38:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	685c      	ldr	r4, [r3, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8818      	ldrh	r0, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	8979      	ldrh	r1, [r7, #10]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	47a0      	blx	r4
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b2db      	uxtb	r3, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}

08001a58 <RdMulti>:
uint8_t RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	460b      	mov	r3, r1
 8001a66:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	689c      	ldr	r4, [r3, #8]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8818      	ldrh	r0, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	8979      	ldrh	r1, [r7, #10]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	47a0      	blx	r4
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b2db      	uxtb	r3, r3
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}

08001a86 <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e021      	b.n	8001adc <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	440b      	add	r3, r1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	3203      	adds	r2, #3
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	440a      	add	r2, r1
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	4313      	orrs	r3, r2
    tmp = (
 8001aca:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3d9      	bcc.n	8001a98 <SwapBuffer+0x12>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <WaitMs>:

uint8_t WaitMs(
		VL53L8CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4798      	blx	r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8001b06:	bf00      	nop
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4798      	blx	r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f5      	bhi.n	8001b08 <WaitMs+0x16>

  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <VL53L8CX_RegisterBusIO>:
  * @param pObj    vl53l8cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_RegisterBusIO(VL53L8CX_Object_t *pObj, VL53L8CX_IO_t *pIO)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <VL53L8CX_RegisterBusIO+0x16>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d103      	bne.n	8001b44 <VL53L8CX_RegisterBusIO+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001b3c:	f06f 0301 	mvn.w	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e033      	b.n	8001bac <VL53L8CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	891a      	ldrh	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	615a      	str	r2, [r3, #20]

    /* fill vl53l8cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	891a      	ldrh	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <VL53L8CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4798      	blx	r3
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	e002      	b.n	8001bac <VL53L8CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L8CX_ERROR;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001bac:	68fb      	ldr	r3, [r7, #12]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <VL53L8CX_Init>:
  * @brief Initializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Init(VL53L8CX_Object_t *pObj)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d103      	bne.n	8001bcc <VL53L8CX_Init+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001bc4:	f06f 0301 	mvn.w	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e02e      	b.n	8001c2a <VL53L8CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <VL53L8CX_Init+0x28>
  {
    ret =  VL53L8CX_ERROR;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e025      	b.n	8001c2a <VL53L8CX_Init+0x74>
  }
  else if (vl53l8cx_init(&pObj->Dev) != VL53L8CX_STATUS_OK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3318      	adds	r3, #24
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 f876 	bl	8002cd4 <vl53l8cx_init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <VL53L8CX_Init+0x40>
  {
    ret = VL53L8CX_ERROR;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e019      	b.n	8001c2a <VL53L8CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    pObj->IsBlocking = 0U;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
    pObj->IsContinuous = 0U;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
    pObj->IsAmbientEnabled = 0U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = 0U;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsInitialized = 1U;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
    ret = VL53L8CX_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <VL53L8CX_DeInit>:
  * @brief Deinitializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_DeInit(VL53L8CX_Object_t *pObj)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d103      	bne.n	8001c4a <VL53L8CX_DeInit+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001c42:	f06f 0301 	mvn.w	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e018      	b.n	8001c7c <VL53L8CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d110      	bne.n	8001c76 <VL53L8CX_DeInit+0x42>
  {
    /* De-initialize the vl53l8cx interface */
    if (pObj->IO.DeInit() != 0)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4798      	blx	r3
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <VL53L8CX_DeInit+0x34>
    {
      ret = VL53L8CX_ERROR;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e009      	b.n	8001c7c <VL53L8CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L8CX_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8001c74:	e002      	b.n	8001c7c <VL53L8CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L8CX_ERROR;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <VL53L8CX_ReadID>:
  * @param pObj    vl53l8cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ReadID(VL53L8CX_Object_t *pObj, uint32_t *pId)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L8CX_STATUS_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <VL53L8CX_ReadID+0x22>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d103      	bne.n	8001cb0 <VL53L8CX_ReadID+0x2a>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001ca8:	f06f 0301 	mvn.w	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e045      	b.n	8001d3c <VL53L8CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3318      	adds	r3, #24
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fe9f 	bl	80019fe <WrByte>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3318      	adds	r3, #24
 8001cce:	f107 020a 	add.w	r2, r7, #10
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fe7d 	bl	80019d4 <RdByte>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3318      	adds	r3, #24
 8001ce8:	f107 0209 	add.w	r2, r7, #9
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fe70 	bl	80019d4 <RdByte>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3318      	adds	r3, #24
 8001d02:	2202      	movs	r2, #2
 8001d04:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fe78 	bl	80019fe <WrByte>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8001d18:	7afb      	ldrb	r3, [r7, #11]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d108      	bne.n	8001d30 <VL53L8CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8001d1e:	7abb      	ldrb	r3, [r7, #10]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	7a7a      	ldrb	r2, [r7, #9]
 8001d24:	441a      	add	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e005      	b.n	8001d3c <VL53L8CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_ERROR;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <VL53L8CX_GetCapabilities>:
  * @param pObj    vl53l8cx context object.
  * @param pCap    Pointer to the vl53l8cx capabilities.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetCapabilities(VL53L8CX_Object_t *pObj, VL53L8CX_Capabilities_t *pCap)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <VL53L8CX_GetCapabilities+0x16>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <VL53L8CX_GetCapabilities+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001d5c:	f06f 0301 	mvn.w	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	e00d      	b.n	8001d80 <VL53L8CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L8CX_RESOLUTION_8X8;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2240      	movs	r2, #64	; 0x40
 8001d68:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L8CX_TARGET_PER_ZONE;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	60da      	str	r2, [r3, #12]

    ret = VL53L8CX_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <VL53L8CX_ConfigProfile>:
  * @param pObj    vl53l8cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigProfile(VL53L8CX_Object_t *pObj, VL53L8CX_ProfileConfig_t *pConfig)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L8CX_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <VL53L8CX_ConfigProfile+0x4c>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d018      	beq.n	8001ddc <VL53L8CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L8CX_INVALID_PARAM;
  }

  switch (profile)
 8001dbc:	7c7b      	ldrb	r3, [r7, #17]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d822      	bhi.n	8001e0a <VL53L8CX_ConfigProfile+0x7a>
 8001dc4:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <VL53L8CX_ConfigProfile+0x3c>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001de3 	.word	0x08001de3
 8001dd0:	08001ded 	.word	0x08001ded
 8001dd4:	08001df7 	.word	0x08001df7
 8001dd8:	08001e01 	.word	0x08001e01
    return VL53L8CX_INVALID_PARAM;
 8001ddc:	f06f 0301 	mvn.w	r3, #1
 8001de0:	e070      	b.n	8001ec4 <VL53L8CX_ConfigProfile+0x134>
  {
  case VL53L8CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 8001de2:	2310      	movs	r3, #16
 8001de4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 8001de6:	2301      	movs	r3, #1
 8001de8:	74bb      	strb	r3, [r7, #18]
    break;
 8001dea:	e016      	b.n	8001e1a <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 8001dec:	2310      	movs	r3, #16
 8001dee:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8001df0:	2303      	movs	r3, #3
 8001df2:	74bb      	strb	r3, [r7, #18]
    break;
 8001df4:	e011      	b.n	8001e1a <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 8001df6:	2340      	movs	r3, #64	; 0x40
 8001df8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	74bb      	strb	r3, [r7, #18]
    break;
 8001dfe:	e00c      	b.n	8001e1a <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 8001e00:	2340      	movs	r3, #64	; 0x40
 8001e02:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8001e04:	2303      	movs	r3, #3
 8001e06:	74bb      	strb	r3, [r7, #18]
    break;
 8001e08:	e007      	b.n	8001e1a <VL53L8CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 8001e0e:	2300      	movs	r3, #0
 8001e10:	74bb      	strb	r3, [r7, #18]
    ret = VL53L8CX_INVALID_PARAM;
 8001e12:	f06f 0301 	mvn.w	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
    break;
 8001e18:	bf00      	nop
  }

  if (ret != VL53L8CX_OK)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <VL53L8CX_ConfigProfile+0x94>
  {
    return ret;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	e04f      	b.n	8001ec4 <VL53L8CX_ConfigProfile+0x134>
  }
  else if (vl53l8cx_set_resolution(&pObj->Dev, resolution) != VL53L8CX_STATUS_OK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3318      	adds	r3, #24
 8001e28:	7cfa      	ldrb	r2, [r7, #19]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 f906 	bl	800403e <vl53l8cx_set_resolution>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <VL53L8CX_ConfigProfile+0xb0>
  {
    ret = VL53L8CX_ERROR;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e040      	b.n	8001ec2 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L8CX_STATUS_OK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3318      	adds	r3, #24
 8001e44:	7cba      	ldrb	r2, [r7, #18]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fa22 	bl	8004292 <vl53l8cx_set_ranging_mode>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <VL53L8CX_ConfigProfile+0xcc>
  {
    ret = VL53L8CX_ERROR;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e032      	b.n	8001ec2 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L8CX_STATUS_OK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3318      	adds	r3, #24
 8001e60:	68f9      	ldr	r1, [r7, #12]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 f9e0 	bl	8004228 <vl53l8cx_set_integration_time_ms>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <VL53L8CX_ConfigProfile+0xe6>
  {
    ret = VL53L8CX_ERROR;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	e025      	b.n	8001ec2 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L8CX_STATUS_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3318      	adds	r3, #24
 8001e7a:	7afa      	ldrb	r2, [r7, #11]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 f9b1 	bl	80041e6 <vl53l8cx_set_ranging_frequency_hz>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <VL53L8CX_ConfigProfile+0x102>
  {
    ret = VL53L8CX_ERROR;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e017      	b.n	8001ec2 <VL53L8CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951

    ret = VL53L8CX_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001ec2:	697b      	ldr	r3, [r7, #20]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <VL53L8CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigROI(VL53L8CX_Object_t *pObj, VL53L8CX_ROIConfig_t *pROIConfig)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L8CX_NOT_IMPLEMENTED;
 8001ed6:	f06f 0303 	mvn.w	r3, #3
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <VL53L8CX_ConfigIT>:
  * @param pObj    vl53l8cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigIT(VL53L8CX_Object_t *pObj, VL53L8CX_ITConfig_t *pITConfig)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	72bb      	strb	r3, [r7, #10]
  static VL53L8CX_DetectionThresholds thresholds[VL53L8CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <VL53L8CX_ConfigIT+0x1a>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <VL53L8CX_ConfigIT+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001f02:	f06f 0301 	mvn.w	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e09f      	b.n	800204a <VL53L8CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L8CX_IT_DEFAULT)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d113      	bne.n	8001f3a <VL53L8CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3318      	adds	r3, #24
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fb65 	bl	80045e8 <vl53l8cx_set_detection_thresholds_enable>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	7abb      	ldrb	r3, [r7, #10]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 8001f28:	7abb      	ldrb	r3, [r7, #10]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <VL53L8CX_ConfigIT+0x4c>
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e000      	b.n	8001f36 <VL53L8CX_ConfigIT+0x4e>
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e087      	b.n	800204a <VL53L8CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l8cx_get_resolution(&pObj->Dev, &res);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	f107 0209 	add.w	r2, r7, #9
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 f855 	bl	8003ff4 <vl53l8cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	72fb      	strb	r3, [r7, #11]
 8001f4e:	e044      	b.n	8001fda <VL53L8CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8001f50:	7afa      	ldrb	r2, [r7, #11]
 8001f52:	4940      	ldr	r1, [pc, #256]	; (8002054 <VL53L8CX_ConfigIT+0x16c>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	330a      	adds	r3, #10
 8001f60:	7afa      	ldrb	r2, [r7, #11]
 8001f62:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L8CX_DISTANCE_MM;
 8001f64:	7afa      	ldrb	r2, [r7, #11]
 8001f66:	493b      	ldr	r1, [pc, #236]	; (8002054 <VL53L8CX_ConfigIT+0x16c>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3308      	adds	r3, #8
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	7afa      	ldrb	r2, [r7, #11]
 8001f7e:	b2d8      	uxtb	r0, r3
 8001f80:	4934      	ldr	r1, [pc, #208]	; (8002054 <VL53L8CX_ConfigIT+0x16c>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3309      	adds	r3, #9
 8001f8e:	4602      	mov	r2, r0
 8001f90:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L8CX_OPERATION_NONE;
 8001f92:	7afa      	ldrb	r2, [r7, #11]
 8001f94:	492f      	ldr	r1, [pc, #188]	; (8002054 <VL53L8CX_ConfigIT+0x16c>)
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	330b      	adds	r3, #11
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	7afa      	ldrb	r2, [r7, #11]
 8001fac:	4618      	mov	r0, r3
 8001fae:	4929      	ldr	r1, [pc, #164]	; (8002054 <VL53L8CX_ConfigIT+0x16c>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	7afa      	ldrb	r2, [r7, #11]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	4923      	ldr	r1, [pc, #140]	; (8002054 <VL53L8CX_ConfigIT+0x16c>)
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	72fb      	strb	r3, [r7, #11]
 8001fda:	7a7b      	ldrb	r3, [r7, #9]
 8001fdc:	7afa      	ldrb	r2, [r7, #11]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d3b6      	bcc.n	8001f50 <VL53L8CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L8CX_LAST_THRESHOLD;
 8001fe2:	7afa      	ldrb	r2, [r7, #11]
 8001fe4:	491b      	ldr	r1, [pc, #108]	; (8002054 <VL53L8CX_ConfigIT+0x16c>)
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	330a      	adds	r3, #10
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	7afa      	ldrb	r2, [r7, #11]
 8001ff6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ffa:	b2d8      	uxtb	r0, r3
 8001ffc:	4915      	ldr	r1, [pc, #84]	; (8002054 <VL53L8CX_ConfigIT+0x16c>)
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	330a      	adds	r3, #10
 800200a:	4602      	mov	r2, r0
 800200c:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l8cx_set_detection_thresholds(&pObj->Dev, thresholds);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3318      	adds	r3, #24
 8002012:	4910      	ldr	r1, [pc, #64]	; (8002054 <VL53L8CX_ConfigIT+0x16c>)
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fb2d 	bl	8004674 <vl53l8cx_set_detection_thresholds>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	7abb      	ldrb	r3, [r7, #10]
 8002020:	4313      	orrs	r3, r2
 8002022:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3318      	adds	r3, #24
 8002028:	2101      	movs	r1, #1
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fadc 	bl	80045e8 <vl53l8cx_set_detection_thresholds_enable>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	7abb      	ldrb	r3, [r7, #10]
 8002036:	4313      	orrs	r3, r2
 8002038:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 800203a:	7abb      	ldrb	r3, [r7, #10]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <VL53L8CX_ConfigIT+0x15e>
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	e000      	b.n	8002048 <VL53L8CX_ConfigIT+0x160>
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200022e0 	.word	0x200022e0

08002058 <VL53L8CX_GetDistance>:
  * @param pObj    vl53l8cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetDistance(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <VL53L8CX_GetDistance+0x16>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <VL53L8CX_GetDistance+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800206e:	f06f 0301 	mvn.w	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e019      	b.n	80020aa <VL53L8CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 800207c:	2b00      	cmp	r3, #0
 800207e:	d103      	bne.n	8002088 <VL53L8CX_GetDistance+0x30>
  {
    ret = VL53L8CX_ERROR;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	e010      	b.n	80020aa <VL53L8CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 800208e:	2b01      	cmp	r3, #1
 8002090:	d106      	bne.n	80020a0 <VL53L8CX_GetDistance+0x48>
    {
      ret = vl53l8cx_poll_for_measurement(pObj, V53L8CX_POLL_TIMEOUT);
 8002092:	f241 3188 	movw	r1, #5000	; 0x1388
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f93a 	bl	8002310 <vl53l8cx_poll_for_measurement>
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	e004      	b.n	80020aa <VL53L8CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l8cx_poll_for_measurement(pObj, 0U);
 80020a0:	2100      	movs	r1, #0
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f934 	bl	8002310 <vl53l8cx_poll_for_measurement>
 80020a8:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L8CX_OK)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d104      	bne.n	80020ba <VL53L8CX_GetDistance+0x62>
  {
    ret = vl53l8cx_get_result(pObj, pResult);
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f960 	bl	8002378 <vl53l8cx_get_result>
 80020b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <VL53L8CX_Start>:
  * @param pObj    vl53l8cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Start(VL53L8CX_Object_t *pObj, uint32_t Mode)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d103      	bne.n	80020dc <VL53L8CX_Start+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80020d4:	f06f 0301 	mvn.w	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e04c      	b.n	8002176 <VL53L8CX_Start+0xb2>
  }
  else if (vl53l8cx_start_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3318      	adds	r3, #24
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 fb17 	bl	8003714 <vl53l8cx_start_ranging>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d141      	bne.n	8002170 <VL53L8CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L8CX_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d82f      	bhi.n	8002160 <VL53L8CX_Start+0x9c>
 8002100:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <VL53L8CX_Start+0x44>)
 8002102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002106:	bf00      	nop
 8002108:	08002119 	.word	0x08002119
 800210c:	0800212b 	.word	0x0800212b
 8002110:	0800213d 	.word	0x0800213d
 8002114:	0800214f 	.word	0x0800214f
    {
      case VL53L8CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 8002128:	e025      	b.n	8002176 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800213a:	e01c      	b.n	8002176 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800214c:	e013      	b.n	8002176 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800215e:	e00a      	b.n	8002176 <VL53L8CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
        ret = VL53L8CX_INVALID_PARAM;
 8002168:	f06f 0301 	mvn.w	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
        break;
 800216e:	e002      	b.n	8002176 <VL53L8CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L8CX_ERROR;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
 8002174:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <VL53L8CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Stop(VL53L8CX_Object_t *pObj)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <VL53L8CX_Stop+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800218e:	f06f 0301 	mvn.w	r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e01a      	b.n	80021cc <VL53L8CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 800219c:	2b00      	cmp	r3, #0
 800219e:	d103      	bne.n	80021a8 <VL53L8CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L8CX_ERROR;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e011      	b.n	80021cc <VL53L8CX_Stop+0x4c>
  }
  else if (vl53l8cx_stop_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3318      	adds	r3, #24
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 fc41 	bl	8003a34 <vl53l8cx_stop_ranging>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <VL53L8CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L8CX_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e002      	b.n	80021cc <VL53L8CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L8CX_ERROR;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80021cc:	68fb      	ldr	r3, [r7, #12]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <VL53L8CX_SetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param Address     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetAddress(VL53L8CX_Object_t *pObj, uint32_t Address)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <VL53L8CX_SetAddress+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80021e6:	f06f 0301 	mvn.w	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e016      	b.n	800221c <VL53L8CX_SetAddress+0x46>
  }
  else if (vl53l8cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L8CX_STATUS_OK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3318      	adds	r3, #24
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	b292      	uxth	r2, r2
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 f992 	bl	8003524 <vl53l8cx_set_i2c_address>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <VL53L8CX_SetAddress+0x38>
  {
    ret = VL53L8CX_ERROR;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e006      	b.n	800221c <VL53L8CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	811a      	strh	r2, [r3, #8]
    ret = VL53L8CX_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800221c:	68fb      	ldr	r3, [r7, #12]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <VL53L8CX_GetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetAddress(VL53L8CX_Object_t *pObj, uint32_t *pAddress)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <VL53L8CX_GetAddress+0x16>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d103      	bne.n	8002244 <VL53L8CX_GetAddress+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800223c:	f06f 0301 	mvn.w	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e006      	b.n	8002252 <VL53L8CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	891b      	ldrh	r3, [r3, #8]
 8002248:	461a      	mov	r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <VL53L8CX_SetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetPowerMode(VL53L8CX_Object_t *pObj, uint32_t PowerMode)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d103      	bne.n	8002278 <VL53L8CX_SetPowerMode+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002270:	f06f 0301 	mvn.w	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e01a      	b.n	80022ae <VL53L8CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L8CX_POWER_MODE_SLEEP) &&
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <VL53L8CX_SetPowerMode+0x2c>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d003      	beq.n	800228c <VL53L8CX_SetPowerMode+0x2c>
           (PowerMode != VL53L8CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002284:	f06f 0301 	mvn.w	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e010      	b.n	80022ae <VL53L8CX_SetPowerMode+0x4e>
  }
  else if (vl53l8cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L8CX_STATUS_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3318      	adds	r3, #24
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f001 f9bd 	bl	8003616 <vl53l8cx_set_power_mode>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <VL53L8CX_SetPowerMode+0x4a>
  {
    ret = VL53L8CX_ERROR;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e001      	b.n	80022ae <VL53L8CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L8CX_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <VL53L8CX_GetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetPowerMode(VL53L8CX_Object_t *pObj, uint32_t *pPowerMode)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <VL53L8CX_GetPowerMode+0x16>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <VL53L8CX_GetPowerMode+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80022ce:	f06f 0301 	mvn.w	r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e017      	b.n	8002306 <VL53L8CX_GetPowerMode+0x4e>
  }
  else if (vl53l8cx_get_power_mode(&pObj->Dev, &powermode) != VL53L8CX_STATUS_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3318      	adds	r3, #24
 80022da:	f107 020b 	add.w	r2, r7, #11
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f955 	bl	8003590 <vl53l8cx_get_power_mode>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <VL53L8CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_ERROR;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e005      	b.n	8002306 <VL53L8CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 80022fa:	7afb      	ldrb	r3, [r7, #11]
 80022fc:	461a      	mov	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <vl53l8cx_poll_for_measurement>:

/** @defgroup VL53L8CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l8cx_poll_for_measurement(VL53L8CX_Object_t *pObj, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d103      	bne.n	800232c <vl53l8cx_poll_for_measurement+0x1c>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002324:	f06f 0301 	mvn.w	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e01f      	b.n	800236c <vl53l8cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L8CX_TIMEOUT;
 800232c:	f06f 0302 	mvn.w	r3, #2
 8002330:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4798      	blx	r3
 8002338:	4603      	mov	r3, r0
 800233a:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l8cx_check_data_ready(&pObj->Dev, &NewDataReady);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3318      	adds	r3, #24
 8002340:	f107 020f 	add.w	r2, r7, #15
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f001 fc3f 	bl	8003bca <vl53l8cx_check_data_ready>

      if (NewDataReady == 1U)
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d102      	bne.n	8002358 <vl53l8cx_poll_for_measurement+0x48>
      {
        ret = VL53L8CX_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
        break;
 8002356:	e009      	b.n	800236c <vl53l8cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4798      	blx	r3
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8e7      	bhi.n	800233c <vl53l8cx_poll_for_measurement+0x2c>

  }

  return ret;
 800236c:	697b      	ldr	r3, [r7, #20]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <vl53l8cx_get_result>:

static int32_t vl53l8cx_get_result(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L8CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <vl53l8cx_get_result+0x16>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <vl53l8cx_get_result+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800238e:	f06f 0301 	mvn.w	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e0cf      	b.n	8002536 <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_resolution(&pObj->Dev, &resolution) != VL53L8CX_STATUS_OK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3318      	adds	r3, #24
 800239a:	f107 0208 	add.w	r2, r7, #8
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 fe27 	bl	8003ff4 <vl53l8cx_get_resolution>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <vl53l8cx_get_result+0x3c>
  {
    ret = VL53L8CX_ERROR;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e0c0      	b.n	8002536 <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_ranging_data(&pObj->Dev, &data) != VL53L8CX_STATUS_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3318      	adds	r3, #24
 80023b8:	4961      	ldr	r1, [pc, #388]	; (8002540 <vl53l8cx_get_result+0x1c8>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 fc56 	bl	8003c6c <vl53l8cx_get_ranging_data>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <vl53l8cx_get_result+0x56>
  {
    ret = VL53L8CX_ERROR;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e0b3      	b.n	8002536 <vl53l8cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 80023ce:	7a3b      	ldrb	r3, [r7, #8]
 80023d0:	461a      	mov	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	72fb      	strb	r3, [r7, #11]
 80023da:	e0a5      	b.n	8002528 <vl53l8cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 80023dc:	7afb      	ldrb	r3, [r7, #11]
 80023de:	7afa      	ldrb	r2, [r7, #11]
 80023e0:	4957      	ldr	r1, [pc, #348]	; (8002540 <vl53l8cx_get_result+0x1c8>)
 80023e2:	440b      	add	r3, r1
 80023e4:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	3304      	adds	r3, #4
 80023f6:	4602      	mov	r2, r0
 80023f8:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	72bb      	strb	r3, [r7, #10]
 80023fe:	e087      	b.n	8002510 <vl53l8cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8002400:	7afa      	ldrb	r2, [r7, #11]
 8002402:	7abb      	ldrb	r3, [r7, #10]
 8002404:	4413      	add	r3, r2
 8002406:	4a4e      	ldr	r2, [pc, #312]	; (8002540 <vl53l8cx_get_result+0x1c8>)
 8002408:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002414:	7afa      	ldrb	r2, [r7, #11]
 8002416:	7ab8      	ldrb	r0, [r7, #10]
 8002418:	461c      	mov	r4, r3
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	4403      	add	r3, r0
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 8002430:	2b01      	cmp	r3, #1
 8002432:	d116      	bne.n	8002462 <vl53l8cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8002434:	7afb      	ldrb	r3, [r7, #11]
 8002436:	4a42      	ldr	r2, [pc, #264]	; (8002540 <vl53l8cx_get_result+0x1c8>)
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	7afa      	ldrb	r2, [r7, #11]
 8002440:	7ab8      	ldrb	r0, [r7, #10]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	4403      	add	r3, r0
 8002454:	3302      	adds	r3, #2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3308      	adds	r3, #8
 800245c:	edc3 7a00 	vstr	s15, [r3]
 8002460:	e00d      	b.n	800247e <vl53l8cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8002462:	7afa      	ldrb	r2, [r7, #11]
 8002464:	7ab8      	ldrb	r0, [r7, #10]
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	4403      	add	r3, r0
 8002470:	3302      	adds	r3, #2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3308      	adds	r3, #8
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 8002484:	2b01      	cmp	r3, #1
 8002486:	d119      	bne.n	80024bc <vl53l8cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8002488:	7afa      	ldrb	r2, [r7, #11]
 800248a:	7abb      	ldrb	r3, [r7, #10]
 800248c:	4413      	add	r3, r2
 800248e:	4a2c      	ldr	r2, [pc, #176]	; (8002540 <vl53l8cx_get_result+0x1c8>)
 8002490:	3350      	adds	r3, #80	; 0x50
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8002498:	7afa      	ldrb	r2, [r7, #11]
 800249a:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 800249c:	ee07 3a90 	vmov	s15, r3
 80024a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	4403      	add	r3, r0
 80024ae:	3304      	adds	r3, #4
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3304      	adds	r3, #4
 80024b6:	edc3 7a00 	vstr	s15, [r3]
 80024ba:	e00d      	b.n	80024d8 <vl53l8cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80024bc:	7afa      	ldrb	r2, [r7, #11]
 80024be:	7ab8      	ldrb	r0, [r7, #10]
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	4403      	add	r3, r0
 80024ca:	3304      	adds	r3, #4
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3304      	adds	r3, #4
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80024d8:	7afa      	ldrb	r2, [r7, #11]
 80024da:	7abb      	ldrb	r3, [r7, #10]
 80024dc:	4413      	add	r3, r2
 80024de:	4a18      	ldr	r2, [pc, #96]	; (8002540 <vl53l8cx_get_result+0x1c8>)
 80024e0:	4413      	add	r3, r2
 80024e2:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 80024e6:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l8cx_map_target_status(target_status);
 80024e8:	7a7b      	ldrb	r3, [r7, #9]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f82a 	bl	8002544 <vl53l8cx_map_target_status>
 80024f0:	4603      	mov	r3, r0
 80024f2:	7afa      	ldrb	r2, [r7, #11]
 80024f4:	7ab8      	ldrb	r0, [r7, #10]
 80024f6:	461c      	mov	r4, r3
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	4403      	add	r3, r0
 8002502:	3302      	adds	r3, #2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 800250a:	7abb      	ldrb	r3, [r7, #10]
 800250c:	3301      	adds	r3, #1
 800250e:	72bb      	strb	r3, [r7, #10]
 8002510:	7afb      	ldrb	r3, [r7, #11]
 8002512:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <vl53l8cx_get_result+0x1c8>)
 8002514:	4413      	add	r3, r2
 8002516:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800251a:	7aba      	ldrb	r2, [r7, #10]
 800251c:	429a      	cmp	r2, r3
 800251e:	f4ff af6f 	bcc.w	8002400 <vl53l8cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 8002522:	7afb      	ldrb	r3, [r7, #11]
 8002524:	3301      	adds	r3, #1
 8002526:	72fb      	strb	r3, [r7, #11]
 8002528:	7a3b      	ldrb	r3, [r7, #8]
 800252a:	7afa      	ldrb	r2, [r7, #11]
 800252c:	429a      	cmp	r2, r3
 800252e:	f4ff af55 	bcc.w	80023dc <vl53l8cx_get_result+0x64>
      }
    }

    ret = VL53L8CX_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bd90      	pop	{r4, r7, pc}
 8002540:	200025e0 	.word	0x200025e0

08002544 <vl53l8cx_map_target_status>:

static uint8_t vl53l8cx_map_target_status(uint8_t status)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	2b05      	cmp	r3, #5
 8002552:	d002      	beq.n	800255a <vl53l8cx_map_target_status+0x16>
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	2b09      	cmp	r3, #9
 8002558:	d102      	bne.n	8002560 <vl53l8cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e007      	b.n	8002570 <vl53l8cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <vl53l8cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 8002566:	23ff      	movs	r3, #255	; 0xff
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	e001      	b.n	8002570 <vl53l8cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	4608      	mov	r0, r1
 8002588:	4611      	mov	r1, r2
 800258a:	461a      	mov	r2, r3
 800258c:	4603      	mov	r3, r0
 800258e:	70fb      	strb	r3, [r7, #3]
 8002590:	460b      	mov	r3, r1
 8002592:	70bb      	strb	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 80025a0:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	8839      	ldrh	r1, [r7, #0]
 80025ac:	f7ff fa54 	bl	8001a58 <RdMulti>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	210a      	movs	r1, #10
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fa97 	bl	8001af2 <WaitMs>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 80025ce:	7bbb      	ldrb	r3, [r7, #14]
 80025d0:	2bc7      	cmp	r3, #199	; 0xc7
 80025d2:	d904      	bls.n	80025de <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
			break;
 80025dc:	e01a      	b.n	8002614 <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d909      	bls.n	80025f8 <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 80025ea:	2b7e      	cmp	r3, #126	; 0x7e
 80025ec:	d904      	bls.n	80025f8 <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80025f4:	73fb      	strb	r3, [r7, #15]
			break;
 80025f6:	e00d      	b.n	8002614 <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80025f8:	7bbb      	ldrb	r3, [r7, #14]
 80025fa:	3301      	adds	r3, #1
 80025fc:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80025fe:	78bb      	ldrb	r3, [r7, #2]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002608:	7e3b      	ldrb	r3, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	b2db      	uxtb	r3, r3
 800260e:	7f3a      	ldrb	r2, [r7, #28]
 8002610:	429a      	cmp	r2, r3
 8002612:	d1c5      	bne.n	80025a0 <_vl53l8cx_poll_for_answer+0x22>

	return status;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f107 020b 	add.w	r2, r7, #11
 8002634:	2106      	movs	r1, #6
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f9cc 	bl	80019d4 <RdByte>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	4313      	orrs	r3, r2
 8002644:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8002646:	7afb      	ldrb	r3, [r7, #11]
 8002648:	b25b      	sxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	da10      	bge.n	8002670 <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f107 020a 	add.w	r2, r7, #10
 8002654:	2107      	movs	r1, #7
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f9bc 	bl	80019d4 <RdByte>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	4313      	orrs	r3, r2
 8002664:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 8002666:	7abb      	ldrb	r3, [r7, #10]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fa3c 	bl	8001af2 <WaitMs>
		timeout++;
 800267a:	89bb      	ldrh	r3, [r7, #12]
 800267c:	3301      	adds	r3, #1
 800267e:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8002680:	7afb      	ldrb	r3, [r7, #11]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 800268a:	89bb      	ldrh	r3, [r7, #12]
 800268c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002690:	d3cd      	bcc.n	800262e <_vl53l8cx_poll_for_mcu_boot+0x10>
 8002692:	e002      	b.n	800269a <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 8002694:	bf00      	nop
 8002696:	e000      	b.n	800269a <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 8002698:	bf00      	nop

   return status;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b0ea      	sub	sp, #424	; 0x1a8
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80026ae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026b2:	6018      	str	r0, [r3, #0]
 80026b4:	460a      	mov	r2, r1
 80026b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80026ba:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 80026be:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80026c6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80026ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026ce:	4ad9      	ldr	r2, [pc, #868]	; (8002a34 <_vl53l8cx_send_offset_data+0x390>)
 80026d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026d4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80026d8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80026dc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026e0:	4ad5      	ldr	r2, [pc, #852]	; (8002a38 <_vl53l8cx_send_offset_data+0x394>)
 80026e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026e6:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80026ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80026ee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 80026f8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80026fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8002704:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002708:	4619      	mov	r1, r3
 800270a:	f005 fa21 	bl	8007b50 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 800270e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002712:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b10      	cmp	r3, #16
 800271a:	f040 8122 	bne.w	8002962 <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800271e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002722:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 800272c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002730:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002734:	cb03      	ldmia	r3!, {r0, r1}
 8002736:	6010      	str	r0, [r2, #0]
 8002738:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 800273a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800273e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002748:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f99a 	bl	8001a86 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8002752:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002756:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 8002760:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002768:	4618      	mov	r0, r3
 800276a:	f005 f9f1 	bl	8007b50 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 800276e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002772:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 800277c:	f107 0318 	add.w	r3, r7, #24
 8002780:	2280      	movs	r2, #128	; 0x80
 8002782:	4618      	mov	r0, r3
 8002784:	f005 f9e4 	bl	8007b50 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8002788:	2300      	movs	r3, #0
 800278a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800278e:	e0ac      	b.n	80028ea <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002790:	2300      	movs	r3, #0
 8002792:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8002796:	e09c      	b.n	80028d2 <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8002798:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800279c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	005a      	lsls	r2, r3, #1
 80027a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80027aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 80027b2:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80027b6:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	1c59      	adds	r1, r3, #1
 80027c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80027c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027ce:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80027d0:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80027d4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	3304      	adds	r3, #4
 80027de:	0059      	lsls	r1, r3, #1
 80027e0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80027e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027ec:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80027ee:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80027f2:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	f103 0109 	add.w	r1, r3, #9
 8002800:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002808:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800280c:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800280e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8002812:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	440a      	add	r2, r1
                                  /(uint32_t)4;
 800281a:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800281c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8002828:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800282c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800283a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800283e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002842:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8002844:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8002848:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002858:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800285c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002860:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8002862:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8002866:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800286a:	00d2      	lsls	r2, r2, #3
 800286c:	440a      	add	r2, r1
 800286e:	3204      	adds	r2, #4
 8002870:	0051      	lsls	r1, r2, #1
 8002872:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002876:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800287a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800287e:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8002880:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8002884:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8002888:	00d2      	lsls	r2, r2, #3
 800288a:	440a      	add	r2, r1
 800288c:	0052      	lsls	r2, r2, #1
 800288e:	f102 0109 	add.w	r1, r2, #9
 8002892:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002896:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800289a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800289e:	4413      	add	r3, r2
                                  /(int16_t)4;
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da00      	bge.n	80028a6 <_vl53l8cx_send_offset_data+0x202>
 80028a4:	3303      	adds	r3, #3
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 80028aa:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80028ae:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	441a      	add	r2, r3
 80028b6:	b209      	sxth	r1, r1
 80028b8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80028bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80028c4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80028d2:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	f77f af5e 	ble.w	8002798 <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80028dc:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80028ea:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	f77f af4e 	ble.w	8002790 <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80028f4:	f107 0318 	add.w	r3, r7, #24
 80028f8:	3320      	adds	r3, #32
 80028fa:	2260      	movs	r2, #96	; 0x60
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f005 f934 	bl	8007b6c <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8002904:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002908:	3340      	adds	r3, #64	; 0x40
 800290a:	22c0      	movs	r2, #192	; 0xc0
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f005 f92c 	bl	8007b6c <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8002914:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002918:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8002922:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800292a:	4618      	mov	r0, r3
 800292c:	f005 f910 	bl	8007b50 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8002930:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002934:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800293e:	f107 0118 	add.w	r1, r7, #24
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	4618      	mov	r0, r3
 8002946:	f005 f903 	bl	8007b50 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 800294a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800294e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002958:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f892 	bl	8001a86 <SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8002962:	2300      	movs	r3, #0
 8002964:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8002968:	e01b      	b.n	80029a2 <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800296a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800296e:	f103 0208 	add.w	r2, r3, #8
 8002972:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8002976:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800297a:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 800297e:	6809      	ldr	r1, [r1, #0]
 8002980:	440a      	add	r2, r1
 8002982:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 8002986:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800298a:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	4413      	add	r3, r2
 8002992:	460a      	mov	r2, r1
 8002994:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8002998:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800299c:	3301      	adds	r3, #1
 800299e:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 80029a2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80029a6:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 80029aa:	d3de      	bcc.n	800296a <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 80029ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80029b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 80029ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80029be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029c2:	cb03      	ldmia	r3!, {r0, r1}
 80029c4:	6010      	str	r0, [r2, #0]
 80029c6:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80029c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80029cc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80029d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80029e0:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80029e4:	f642 6118 	movw	r1, #11800	; 0x2e18
 80029e8:	f7ff f81f 	bl	8001a2a <WrMulti>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80029fa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80029fe:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8002a02:	2303      	movs	r3, #3
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	23ff      	movs	r3, #255	; 0xff
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2104      	movs	r1, #4
 8002a12:	6800      	ldr	r0, [r0, #0]
 8002a14:	f7ff fdb3 	bl	800257e <_vl53l8cx_poll_for_answer>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002a26:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	08008ef4 	.word	0x08008ef4
 8002a38:	08008efc 	.word	0x08008efc

08002a3c <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b0ca      	sub	sp, #296	; 0x128
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a4a:	6018      	str	r0, [r3, #0]
 8002a4c:	460a      	mov	r2, r1
 8002a4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a52:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8002a56:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8002a5e:	4a9a      	ldr	r2, [pc, #616]	; (8002cc8 <_vl53l8cx_send_xtalk_data+0x28c>)
 8002a60:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a68:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8002a6c:	4a97      	ldr	r2, [pc, #604]	; (8002ccc <_vl53l8cx_send_xtalk_data+0x290>)
 8002a6e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a76:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8002a7a:	4b95      	ldr	r3, [pc, #596]	; (8002cd0 <_vl53l8cx_send_xtalk_data+0x294>)
 8002a7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8002a80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 8002a8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a9c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f005 f855 	bl	8007b50 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 8002aa6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002aaa:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	f040 80d2 	bne.w	8002c5a <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8002ab6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002aba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002aca:	cb03      	ldmia	r3!, {r0, r1}
 8002acc:	6010      	str	r0, [r2, #0]
 8002ace:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8002ad0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ad4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002ae4:	cb03      	ldmia	r3!, {r0, r1}
 8002ae6:	6010      	str	r0, [r2, #0]
 8002ae8:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8002aea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002aee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002af8:	f44f 7142 	mov.w	r1, #776	; 0x308
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe ffc2 	bl	8001a86 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8002b02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f203 5144 	addw	r1, r3, #1348	; 0x544
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f005 f819 	bl	8007b50 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002b24:	e05d      	b.n	8002be2 <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8002b2c:	e04e      	b.n	8002bcc <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8002b2e:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 8002b32:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	005a      	lsls	r2, r3, #1
 8002b3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8002b48:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8002b4c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b64:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8002b66:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8002b6a:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3304      	adds	r3, #4
 8002b74:	0059      	lsls	r1, r3, #1
 8002b76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b7a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b82:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002b84:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8002b88:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	f103 0109 	add.w	r1, r3, #9
 8002b96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b9a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ba2:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8002ba4:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8002ba8:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8002bac:	0092      	lsls	r2, r2, #2
 8002bae:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002bb0:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8002bb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002bb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8002bbe:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8002bcc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	ddac      	ble.n	8002b2e <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8002bd4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002be2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	dd9d      	ble.n	8002b26 <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8002bea:	f107 0308 	add.w	r3, r7, #8
 8002bee:	3340      	adds	r3, #64	; 0x40
 8002bf0:	22c0      	movs	r2, #192	; 0xc0
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 ffb9 	bl	8007b6c <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8002bfa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002bfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8002c08:	f107 0108 	add.w	r1, r7, #8
 8002c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c10:	4618      	mov	r0, r3
 8002c12:	f004 ff9d 	bl	8007b50 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8002c16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002c24:	f44f 7142 	mov.w	r1, #776	; 0x308
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe ff2c 	bl	8001a86 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8002c2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8002c3c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002c40:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8002c42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8002c50:	2204      	movs	r2, #4
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 ff89 	bl	8007b6c <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8002c5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c62:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8002c64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8002c72:	f44f 7342 	mov.w	r3, #776	; 0x308
 8002c76:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 8002c7a:	f7fe fed6 	bl	8001a2a <WrMulti>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8002c8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c90:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8002c94:	2303      	movs	r3, #3
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	23ff      	movs	r3, #255	; 0xff
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	6800      	ldr	r0, [r0, #0]
 8002ca6:	f7ff fc6a 	bl	800257e <_vl53l8cx_poll_for_answer>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002cb8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	08008f04 	.word	0x08008f04
 8002ccc:	08008f0c 	.word	0x08008f0c
 8002cd0:	0001fca0 	.word	0x0001fca0

08002cd4 <vl53l8cx_init>:
	return status;
}

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8002ce0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002ce4:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a7e      	ldr	r2, [pc, #504]	; (8002ee8 <vl53l8cx_init+0x214>)
 8002cee:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	; (8002eec <vl53l8cx_init+0x218>)
 8002cf4:	619a      	str	r2, [r3, #24]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fe7d 	bl	80019fe <WrByte>
 8002d04:	4603      	mov	r3, r0
 8002d06:	461a      	mov	r2, r3
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2204      	movs	r2, #4
 8002d12:	2109      	movs	r1, #9
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe fe72 	bl	80019fe <WrByte>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2240      	movs	r2, #64	; 0x40
 8002d28:	210f      	movs	r1, #15
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fe67 	bl	80019fe <WrByte>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	210a      	movs	r1, #10
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fe5c 	bl	80019fe <WrByte>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f107 0216 	add.w	r2, r7, #22
 8002d56:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fe3a 	bl	80019d4 <RdByte>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	210c      	movs	r1, #12
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fe44 	bl	80019fe <WrByte>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f240 1101 	movw	r1, #257	; 0x101
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe fe38 	bl	80019fe <WrByte>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe fe2c 	bl	80019fe <WrByte>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fe20 	bl	80019fe <WrByte>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f244 0102 	movw	r1, #16386	; 0x4002
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fe14 	bl	80019fe <WrByte>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f244 0102 	movw	r1, #16386	; 0x4002
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fe08 	bl	80019fe <WrByte>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe fdfc 	bl	80019fe <WrByte>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f240 1103 	movw	r1, #259	; 0x103
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fdf0 	bl	80019fe <WrByte>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	210c      	movs	r1, #12
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fde5 	bl	80019fe <WrByte>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2243      	movs	r2, #67	; 0x43
 8002e42:	210f      	movs	r1, #15
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fdda 	bl	80019fe <WrByte>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2101      	movs	r1, #1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fe4a 	bl	8001af2 <WaitMs>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	210f      	movs	r1, #15
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fdc5 	bl	80019fe <WrByte>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461a      	mov	r2, r3
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	210a      	movs	r1, #10
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fdba 	bl	80019fe <WrByte>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2164      	movs	r1, #100	; 0x64
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fe2a 	bl	8001af2 <WaitMs>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fda4 	bl	80019fe <WrByte>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	23ff      	movs	r3, #255	; 0xff
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2306      	movs	r3, #6
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2101      	movs	r1, #1
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fb55 	bl	800257e <_vl53l8cx_poll_for_answer>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 830c 	bne.w	80034fe <vl53l8cx_init+0x82a>
 8002ee6:	e003      	b.n	8002ef0 <vl53l8cx_init+0x21c>
 8002ee8:	0801e344 	.word	0x0801e344
 8002eec:	0801df78 	.word	0x0801df78
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	210e      	movs	r1, #14
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fd81 	bl	80019fe <WrByte>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fd75 	bl	80019fe <WrByte>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fd69 	bl	80019fe <WrByte>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	2106      	movs	r1, #6
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fd5e 	bl	80019fe <WrByte>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	2310      	movs	r3, #16
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2321      	movs	r3, #33	; 0x21
 8002f56:	2200      	movs	r2, #0
 8002f58:	2101      	movs	r1, #1
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fb0f 	bl	800257e <_vl53l8cx_poll_for_answer>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fd43 	bl	80019fe <WrByte>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f107 0216 	add.w	r2, r7, #22
 8002f88:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fd21 	bl	80019d4 <RdByte>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	210c      	movs	r1, #12
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fd2b 	bl	80019fe <WrByte>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fd1f 	bl	80019fe <WrByte>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f240 1101 	movw	r1, #257	; 0x101
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fd13 	bl	80019fe <WrByte>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fd07 	bl	80019fe <WrByte>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fcfb 	bl	80019fe <WrByte>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	4313      	orrs	r3, r2
 8003010:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f244 0102 	movw	r1, #16386	; 0x4002
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fcef 	bl	80019fe <WrByte>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	4313      	orrs	r3, r2
 8003028:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f244 0102 	movw	r1, #16386	; 0x4002
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe fce3 	bl	80019fe <WrByte>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	4313      	orrs	r3, r2
 8003040:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2203      	movs	r2, #3
 8003046:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fcd7 	bl	80019fe <WrByte>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	4313      	orrs	r3, r2
 8003058:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f240 1103 	movw	r1, #259	; 0x103
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fccb 	bl	80019fe <WrByte>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	4313      	orrs	r3, r2
 8003070:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f244 010f 	movw	r1, #16399	; 0x400f
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fcbf 	bl	80019fe <WrByte>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	4313      	orrs	r3, r2
 8003088:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2243      	movs	r2, #67	; 0x43
 800308e:	f240 211a 	movw	r1, #538	; 0x21a
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fcb3 	bl	80019fe <WrByte>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	4313      	orrs	r3, r2
 80030a0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2203      	movs	r2, #3
 80030a6:	f240 211a 	movw	r1, #538	; 0x21a
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fca7 	bl	80019fe <WrByte>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f240 211a 	movw	r1, #538	; 0x21a
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fc9b 	bl	80019fe <WrByte>
 80030c8:	4603      	mov	r3, r0
 80030ca:	461a      	mov	r2, r3
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f240 211a 	movw	r1, #538	; 0x21a
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fc8f 	bl	80019fe <WrByte>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f240 2119 	movw	r1, #537	; 0x219
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fc83 	bl	80019fe <WrByte>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	4313      	orrs	r3, r2
 8003100:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f240 211b 	movw	r1, #539	; 0x21b
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fc77 	bl	80019fe <WrByte>
 8003110:	4603      	mov	r3, r0
 8003112:	461a      	mov	r2, r3
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	4313      	orrs	r3, r2
 8003118:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fc6b 	bl	80019fe <WrByte>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	4313      	orrs	r3, r2
 8003130:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f107 0216 	add.w	r2, r7, #22
 8003138:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fc49 	bl	80019d4 <RdByte>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	4313      	orrs	r3, r2
 800314a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	210c      	movs	r1, #12
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fc53 	bl	80019fe <WrByte>
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	4313      	orrs	r3, r2
 8003160:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fc47 	bl	80019fe <WrByte>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	4313      	orrs	r3, r2
 8003178:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2207      	movs	r2, #7
 800317e:	2120      	movs	r1, #32
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fc3c 	bl	80019fe <WrByte>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	7dfb      	ldrb	r3, [r7, #23]
 800318c:	4313      	orrs	r3, r2
 800318e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2206      	movs	r2, #6
 8003194:	2120      	movs	r1, #32
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fc31 	bl	80019fe <WrByte>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2209      	movs	r2, #9
 80031aa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fc25 	bl	80019fe <WrByte>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c4:	4ad2      	ldr	r2, [pc, #840]	; (8003510 <vl53l8cx_init+0x83c>)
 80031c6:	2100      	movs	r1, #0
 80031c8:	f7fe fc2f 	bl	8001a2a <WrMulti>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	220a      	movs	r2, #10
 80031da:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe fc0d 	bl	80019fe <WrByte>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f4:	4ac7      	ldr	r2, [pc, #796]	; (8003514 <vl53l8cx_init+0x840>)
 80031f6:	2100      	movs	r1, #0
 80031f8:	f7fe fc17 	bl	8001a2a <WrMulti>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	4313      	orrs	r3, r2
 8003204:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	220b      	movs	r2, #11
 800320a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fbf5 	bl	80019fe <WrByte>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	4313      	orrs	r3, r2
 800321c:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003224:	4abc      	ldr	r2, [pc, #752]	; (8003518 <vl53l8cx_init+0x844>)
 8003226:	2100      	movs	r1, #0
 8003228:	f7fe fbff 	bl	8001a2a <WrMulti>
 800322c:	4603      	mov	r3, r0
 800322e:	461a      	mov	r2, r3
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	4313      	orrs	r3, r2
 8003234:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fbdd 	bl	80019fe <WrByte>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	4313      	orrs	r3, r2
 800324c:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fbd1 	bl	80019fe <WrByte>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	4313      	orrs	r3, r2
 8003264:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	2106      	movs	r1, #6
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe fbc6 	bl	80019fe <WrByte>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	4313      	orrs	r3, r2
 800327a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 800327c:	2310      	movs	r3, #16
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	2310      	movs	r3, #16
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	2321      	movs	r3, #33	; 0x21
 8003286:	2200      	movs	r2, #0
 8003288:	2101      	movs	r1, #1
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff f977 	bl	800257e <_vl53l8cx_poll_for_answer>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	4313      	orrs	r3, r2
 8003298:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fbab 	bl	80019fe <WrByte>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f107 0216 	add.w	r2, r7, #22
 80032b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fb89 	bl	80019d4 <RdByte>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	210c      	movs	r1, #12
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fb93 	bl	80019fe <WrByte>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	4313      	orrs	r3, r2
 80032e0:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe fb87 	bl	80019fe <WrByte>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fb7b 	bl	80019fe <WrByte>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	4313      	orrs	r3, r2
 8003310:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f240 1115 	movw	r1, #277	; 0x115
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fb6f 	bl	80019fe <WrByte>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	4313      	orrs	r3, r2
 8003328:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2242      	movs	r2, #66	; 0x42
 800332e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fb63 	bl	80019fe <WrByte>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	4313      	orrs	r3, r2
 8003340:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f240 1117 	movw	r1, #279	; 0x117
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe fb57 	bl	80019fe <WrByte>
 8003350:	4603      	mov	r3, r0
 8003352:	461a      	mov	r2, r3
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	4313      	orrs	r3, r2
 8003358:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	210b      	movs	r1, #11
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe fb4c 	bl	80019fe <WrByte>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	4313      	orrs	r3, r2
 800336e:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f107 0216 	add.w	r2, r7, #22
 8003376:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fb2a 	bl	80019d4 <RdByte>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	4313      	orrs	r3, r2
 8003388:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	210c      	movs	r1, #12
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe fb34 	bl	80019fe <WrByte>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	4313      	orrs	r3, r2
 800339e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	210b      	movs	r1, #11
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fb29 	bl	80019fe <WrByte>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff f931 	bl	800261e <_vl53l8cx_poll_for_mcu_boot>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 809a 	bne.w	8003502 <vl53l8cx_init+0x82e>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fb11 	bl	80019fe <WrByte>
 80033dc:	4603      	mov	r3, r0
 80033de:	461a      	mov	r2, r3
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	2328      	movs	r3, #40	; 0x28
 80033ea:	4a4c      	ldr	r2, [pc, #304]	; (800351c <vl53l8cx_init+0x848>)
 80033ec:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 80033f0:	f7fe fb1b 	bl	8001a2a <WrMulti>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 80033fe:	2302      	movs	r3, #2
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	23ff      	movs	r3, #255	; 0xff
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800340a:	2200      	movs	r2, #0
 800340c:	2104      	movs	r1, #4
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff f8b5 	bl	800257e <_vl53l8cx_poll_for_answer>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	4313      	orrs	r3, r2
 800341c:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 800341e:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8003426:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 800342a:	f642 4104 	movw	r1, #11268	; 0x2c04
 800342e:	f7fe fb13 	bl	8001a58 <RdMulti>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	4313      	orrs	r3, r2
 800343a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f103 0020 	add.w	r0, r3, #32
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003448:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800344c:	4619      	mov	r1, r3
 800344e:	f004 fb7f 	bl	8007b50 <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8003452:	2110      	movs	r1, #16
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff f925 	bl	80026a4 <_vl53l8cx_send_offset_data>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	4313      	orrs	r3, r2
 8003462:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800346a:	4a2d      	ldr	r2, [pc, #180]	; (8003520 <vl53l8cx_init+0x84c>)
 800346c:	4618      	mov	r0, r3
 800346e:	4611      	mov	r1, r2
 8003470:	f44f 7342 	mov.w	r3, #776	; 0x308
 8003474:	461a      	mov	r2, r3
 8003476:	f004 fb6b 	bl	8007b50 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 800347a:	2110      	movs	r1, #16
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fadd 	bl	8002a3c <_vl53l8cx_send_xtalk_data>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	4313      	orrs	r3, r2
 800348a:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8003496:	f642 4134 	movw	r1, #11316	; 0x2c34
 800349a:	f7fe fac6 	bl	8001a2a <WrMulti>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80034a8:	2303      	movs	r3, #3
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	23ff      	movs	r3, #255	; 0xff
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80034b4:	2201      	movs	r2, #1
 80034b6:	2104      	movs	r1, #4
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff f860 	bl	800257e <_vl53l8cx_poll_for_answer>
 80034be:	4603      	mov	r3, r0
 80034c0:	461a      	mov	r2, r3
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80034c8:	f107 0110 	add.w	r1, r7, #16
 80034cc:	2304      	movs	r3, #4
 80034ce:	f64d 3280 	movw	r2, #56192	; 0xdb80
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 ffbe 	bl	8004454 <vl53l8cx_dci_write_data>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	4313      	orrs	r3, r2
 80034e0:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80034e2:	f107 010c 	add.w	r1, r7, #12
 80034e6:	2304      	movs	r3, #4
 80034e8:	f64d 1264 	movw	r2, #55652	; 0xd964
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 ffb1 	bl	8004454 <vl53l8cx_dci_write_data>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	75fb      	strb	r3, [r7, #23]
 80034fc:	e002      	b.n	8003504 <vl53l8cx_init+0x830>
		goto exit;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <vl53l8cx_init+0x830>
		goto exit;
 8003502:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 8003504:	7dfb      	ldrb	r3, [r7, #23]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	08008f78 	.word	0x08008f78
 8003514:	08010f78 	.word	0x08010f78
 8003518:	08018f78 	.word	0x08018f78
 800351c:	0801e64c 	.word	0x0801e64c
 8003520:	0801e344 	.word	0x0801e344

08003524 <vl53l8cx_set_i2c_address>:

uint8_t vl53l8cx_set_i2c_address(
		VL53L8CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fa5e 	bl	80019fe <WrByte>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	4313      	orrs	r3, r2
 800354a:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	b29b      	uxth	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	2104      	movs	r1, #4
 800355a:	f7fe fa50 	bl	80019fe <WrByte>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	4313      	orrs	r3, r2
 8003566:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fa41 	bl	80019fe <WrByte>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	4313      	orrs	r3, r2
 8003584:	73fb      	strb	r3, [r7, #15]

	return status;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <vl53l8cx_get_power_mode>:

uint8_t vl53l8cx_get_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe fa29 	bl	80019fe <WrByte>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f107 020e 	add.w	r2, r7, #14
 80035bc:	2109      	movs	r1, #9
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fa08 	bl	80019d4 <RdByte>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 80035ce:	7bbb      	ldrb	r3, [r7, #14]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d005      	beq.n	80035e0 <vl53l8cx_get_power_mode+0x50>
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d107      	bne.n	80035e8 <vl53l8cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L8CX_POWER_MODE_WAKEUP;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
			break;
 80035de:	e009      	b.n	80035f4 <vl53l8cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]

			break;
 80035e6:	e005      	b.n	80035f4 <vl53l8cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
			status = VL53L8CX_STATUS_ERROR;
 80035ee:	23ff      	movs	r3, #255	; 0xff
 80035f0:	73fb      	strb	r3, [r7, #15]
			break;
 80035f2:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe f9fe 	bl	80019fe <WrByte>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	4313      	orrs	r3, r2
 800360a:	73fb      	strb	r3, [r7, #15]

	return status;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <vl53l8cx_set_power_mode>:

uint8_t vl53l8cx_set_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af02      	add	r7, sp, #8
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	460b      	mov	r3, r1
 8003620:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L8CX_STATUS_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_get_power_mode(p_dev, &current_power_mode);
 8003626:	f107 030e 	add.w	r3, r7, #14
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ffaf 	bl	8003590 <vl53l8cx_get_power_mode>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	4313      	orrs	r3, r2
 800363a:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 800363c:	7bbb      	ldrb	r3, [r7, #14]
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	429a      	cmp	r2, r3
 8003642:	d061      	beq.n	8003708 <vl53l8cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d028      	beq.n	800369c <vl53l8cx_set_power_mode+0x86>
 800364a:	2b01      	cmp	r3, #1
 800364c:	d14d      	bne.n	80036ea <vl53l8cx_set_power_mode+0xd4>
	{
		case VL53L8CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe f9d1 	bl	80019fe <WrByte>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	4313      	orrs	r3, r2
 8003664:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2204      	movs	r2, #4
 800366a:	2109      	movs	r1, #9
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe f9c6 	bl	80019fe <WrByte>
 8003672:	4603      	mov	r3, r0
 8003674:	461a      	mov	r2, r3
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	4313      	orrs	r3, r2
 800367a:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 800367c:	2301      	movs	r3, #1
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	2301      	movs	r3, #1
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2306      	movs	r3, #6
 8003686:	2200      	movs	r2, #0
 8003688:	2101      	movs	r1, #1
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe ff77 	bl	800257e <_vl53l8cx_poll_for_answer>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	4313      	orrs	r3, r2
 8003698:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 800369a:	e029      	b.n	80036f0 <vl53l8cx_set_power_mode+0xda>

		case VL53L8CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe f9aa 	bl	80019fe <WrByte>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	2109      	movs	r1, #9
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe f99f 	bl	80019fe <WrByte>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 80036ca:	2300      	movs	r3, #0
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	2301      	movs	r3, #1
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2306      	movs	r3, #6
 80036d4:	2200      	movs	r2, #0
 80036d6:	2101      	movs	r1, #1
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7fe ff50 	bl	800257e <_vl53l8cx_poll_for_answer>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 80036e8:	e002      	b.n	80036f0 <vl53l8cx_set_power_mode+0xda>

		default:
			status = VL53L8CX_STATUS_ERROR;
 80036ea:	23ff      	movs	r3, #255	; 0xff
 80036ec:	73fb      	strb	r3, [r7, #15]
			break;
 80036ee:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe f980 	bl	80019fe <WrByte>
 80036fe:	4603      	mov	r3, r0
 8003700:	461a      	mov	r2, r3
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	4313      	orrs	r3, r2
 8003706:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <vl53l8cx_start_ranging>:

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8003714:	b5b0      	push	{r4, r5, r7, lr}
 8003716:	b09c      	sub	sp, #112	; 0x70
 8003718:	af02      	add	r7, sp, #8
 800371a:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8003722:	2300      	movs	r3, #0
 8003724:	653b      	str	r3, [r7, #80]	; 0x50
 8003726:	2300      	movs	r3, #0
 8003728:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 800372a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800372e:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 8003730:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fc5c 	bl	8003ff4 <vl53l8cx_get_resolution>
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003744:	4313      	orrs	r3, r2
 8003746:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	22ff      	movs	r2, #255	; 0xff
 8003754:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8003756:	4bb5      	ldr	r3, [pc, #724]	; (8003a2c <vl53l8cx_start_ranging+0x318>)
 8003758:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800375c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800375e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 8003762:	4bb3      	ldr	r3, [pc, #716]	; (8003a30 <vl53l8cx_start_ranging+0x31c>)
 8003764:	f107 040c 	add.w	r4, r7, #12
 8003768:	461d      	mov	r5, r3
 800376a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800376c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800376e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003772:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	3308      	adds	r3, #8
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8003780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003782:	3320      	adds	r3, #32
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8003786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003788:	3340      	adds	r3, #64	; 0x40
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 800378c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8003794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003796:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 800379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037a2:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80037a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	663b      	str	r3, [r7, #96]	; 0x60
 80037b0:	e073      	b.n	800389a <vl53l8cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 80037b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3368      	adds	r3, #104	; 0x68
 80037b8:	443b      	add	r3, r7
 80037ba:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d067      	beq.n	8003892 <vl53l8cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 80037c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	3368      	adds	r3, #104	; 0x68
 80037ca:	443b      	add	r3, r7
 80037cc:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80037d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d057      	beq.n	8003892 <vl53l8cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80037e2:	f107 020c 	add.w	r2, r7, #12
 80037e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80037ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d03a      	beq.n	8003872 <vl53l8cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80037fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d833      	bhi.n	8003872 <vl53l8cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 800380a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380c:	885b      	ldrh	r3, [r3, #2]
 800380e:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8003812:	4293      	cmp	r3, r2
 8003814:	d910      	bls.n	8003838 <vl53l8cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8003816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003818:	885b      	ldrh	r3, [r3, #2]
 800381a:	f645 028f 	movw	r2, #22671	; 0x588f
 800381e:	4293      	cmp	r3, r2
 8003820:	d80a      	bhi.n	8003838 <vl53l8cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 8003822:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382a:	b299      	uxth	r1, r3
 800382c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800382e:	8813      	ldrh	r3, [r2, #0]
 8003830:	f361 130f 	bfi	r3, r1, #4, #12
 8003834:	8013      	strh	r3, [r2, #0]
 8003836:	e009      	b.n	800384c <vl53l8cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8003838:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800383c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003840:	b299      	uxth	r1, r3
 8003842:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003844:	8813      	ldrh	r3, [r2, #0]
 8003846:	f361 130f 	bfi	r3, r1, #4, #12
 800384a:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003852:	7812      	ldrb	r2, [r2, #0]
 8003854:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	4611      	mov	r1, r2
 800385c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800385e:	8812      	ldrh	r2, [r2, #0]
 8003860:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8003864:	b292      	uxth	r2, r2
 8003866:	fb01 f202 	mul.w	r2, r1, r2
 800386a:	441a      	add	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	615a      	str	r2, [r3, #20]
 8003870:	e009      	b.n	8003886 <vl53l8cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003878:	8812      	ldrh	r2, [r2, #0]
 800387a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800387e:	b292      	uxth	r2, r2
 8003880:	441a      	add	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	1d1a      	adds	r2, r3, #4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	615a      	str	r2, [r3, #20]
 8003890:	e000      	b.n	8003894 <vl53l8cx_start_ranging+0x180>
			continue;
 8003892:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8003894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003896:	3301      	adds	r3, #1
 8003898:	663b      	str	r3, [r7, #96]	; 0x60
 800389a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800389c:	2b0b      	cmp	r3, #11
 800389e:	d988      	bls.n	80037b2 <vl53l8cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f103 0218 	add.w	r2, r3, #24
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	615a      	str	r2, [r3, #20]

	status |= vl53l8cx_dci_write_data(p_dev,
 80038ac:	f107 010c 	add.w	r1, r7, #12
 80038b0:	2330      	movs	r3, #48	; 0x30
 80038b2:	f64d 1280 	movw	r2, #55680	; 0xd980
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fdcc 	bl	8004454 <vl53l8cx_dci_write_data>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 80038d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d2:	3301      	adds	r3, #1
 80038d4:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 80038d6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80038da:	2308      	movs	r3, #8
 80038dc:	f64d 1268 	movw	r2, #55656	; 0xd968
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fdb7 	bl	8004454 <vl53l8cx_dci_write_data>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 80038f4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80038f8:	2310      	movs	r3, #16
 80038fa:	f64d 1270 	movw	r2, #55664	; 0xd970
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fda8 	bl	8004454 <vl53l8cx_dci_write_data>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800390c:	4313      	orrs	r3, r2
 800390e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe f86f 	bl	80019fe <WrByte>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003928:	4313      	orrs	r3, r2
 800392a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2205      	movs	r2, #5
 8003932:	2109      	movs	r1, #9
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe f862 	bl	80019fe <WrByte>
 800393a:	4603      	mov	r3, r0
 800393c:	461a      	mov	r2, r3
 800393e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003942:	4313      	orrs	r3, r2
 8003944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe f854 	bl	80019fe <WrByte>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800395e:	4313      	orrs	r3, r2
 8003960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800396a:	2304      	movs	r3, #4
 800396c:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8003970:	f7fe f85b 	bl	8001a2a <WrMulti>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800397c:	4313      	orrs	r3, r2
 800397e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8003982:	2303      	movs	r3, #3
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	23ff      	movs	r3, #255	; 0xff
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800398e:	2201      	movs	r2, #1
 8003990:	2104      	movs	r1, #4
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fe fdf3 	bl	800257e <_vl53l8cx_poll_for_answer>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 80039ac:	230c      	movs	r3, #12
 80039ae:	f245 4240 	movw	r2, #21568	; 0x5440
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fcc4 	bl	8004340 <vl53l8cx_dci_read_data>
 80039b8:	4603      	mov	r3, r0
 80039ba:	461a      	mov	r2, r3
 80039bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 80039d4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d002      	beq.n	80039e8 <vl53l8cx_start_ranging+0x2d4>
	{
		status |= VL53L8CX_STATUS_ERROR;
 80039e2:	23ff      	movs	r3, #255	; 0xff
 80039e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 80039ee:	2308      	movs	r3, #8
 80039f0:	f24e 02c4 	movw	r2, #57540	; 0xe0c4
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fca3 	bl	8004340 <vl53l8cx_dci_read_data>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <vl53l8cx_start_ranging+0x30a>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 8003a12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a16:	f043 0303 	orr.w	r3, r3, #3
 8003a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 8003a1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3768      	adds	r7, #104	; 0x68
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bdb0      	pop	{r4, r5, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	08008f14 	.word	0x08008f14
 8003a30:	08008f24 	.word	0x08008f24

08003a34 <vl53l8cx_stop_ranging>:

uint8_t vl53l8cx_stop_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L8CX_STATUS_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	74fb      	strb	r3, [r7, #19]
 8003a40:	2300      	movs	r3, #0
 8003a42:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f107 020c 	add.w	r2, r7, #12
 8003a52:	2304      	movs	r3, #4
 8003a54:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8003a58:	f7fd fffe 	bl	8001a58 <RdMulti>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if(auto_stop_flag != (uint32_t)0x4FF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d048      	beq.n	8003b02 <vl53l8cx_stop_ranging+0xce>
	{
	        status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd ffc0 	bl	80019fe <WrByte>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2216      	movs	r2, #22
 8003a8c:	2115      	movs	r1, #21
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd ffb5 	bl	80019fe <WrByte>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	75fb      	strb	r3, [r7, #23]
	        status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2114      	movs	r1, #20
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fd ffaa 	bl	80019fe <WrByte>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8003ab4:	e021      	b.n	8003afa <vl53l8cx_stop_ranging+0xc6>
	        {
	        	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f107 0213 	add.w	r2, r7, #19
 8003abc:	2106      	movs	r1, #6
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd ff88 	bl	80019d4 <RdByte>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	75fb      	strb	r3, [r7, #23]
	        	status |= WaitMs(&(p_dev->platform), 10);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	210a      	movs	r1, #10
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe f80d 	bl	8001af2 <WaitMs>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8003ae2:	8abb      	ldrh	r3, [r7, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8003ae8:	8abb      	ldrh	r3, [r7, #20]
 8003aea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003aee:	d904      	bls.n	8003afa <vl53l8cx_stop_ranging+0xc6>
				{
					status |= tmp;
 8003af0:	7cfa      	ldrb	r2, [r7, #19]
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	75fb      	strb	r3, [r7, #23]
					break;
 8003af8:	e003      	b.n	8003b02 <vl53l8cx_stop_ranging+0xce>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	b25b      	sxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dad9      	bge.n	8003ab6 <vl53l8cx_stop_ranging+0x82>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f107 0213 	add.w	r2, r7, #19
 8003b08:	2106      	movs	r1, #6
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd ff62 	bl	80019d4 <RdByte>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	b25b      	sxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	da15      	bge.n	8003b4e <vl53l8cx_stop_ranging+0x11a>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f107 0213 	add.w	r2, r7, #19
 8003b28:	2107      	movs	r1, #7
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd ff52 	bl	80019d4 <RdByte>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461a      	mov	r2, r3
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	2b84      	cmp	r3, #132	; 0x84
 8003b3e:	d006      	beq.n	8003b4e <vl53l8cx_stop_ranging+0x11a>
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	2b85      	cmp	r3, #133	; 0x85
 8003b44:	d003      	beq.n	8003b4e <vl53l8cx_stop_ranging+0x11a>
		   status |= tmp;
 8003b46:	7cfa      	ldrb	r2, [r7, #19]
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd ff51 	bl	80019fe <WrByte>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2114      	movs	r1, #20
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fd ff46 	bl	80019fe <WrByte>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2115      	movs	r1, #21
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd ff3b 	bl	80019fe <WrByte>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2204      	movs	r2, #4
 8003b96:	2109      	movs	r1, #9
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd ff30 	bl	80019fe <WrByte>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fd ff24 	bl	80019fe <WrByte>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	75fb      	strb	r3, [r7, #23]

	return status;
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <vl53l8cx_check_data_ready>:

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8003be0:	2304      	movs	r3, #4
 8003be2:	2100      	movs	r1, #0
 8003be4:	f7fd ff38 	bl	8001a58 <RdMulti>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7c1b      	ldrb	r3, [r3, #16]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d020      	beq.n	8003c42 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8003c06:	2bff      	cmp	r3, #255	; 0xff
 8003c08:	d01b      	beq.n	8003c42 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d116      	bne.n	8003c42 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8003c1a:	f003 0305 	and.w	r3, r3, #5
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d10f      	bne.n	8003c42 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	741a      	strb	r2, [r3, #16]
 8003c40:	e00e      	b.n	8003c60 <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8003c48:	b25b      	sxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da05      	bge.n	8003c5a <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 8003c7a:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2100      	movs	r1, #0
 8003c88:	f7fd fee6 	bl	8001a58 <RdMulti>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	7ffb      	ldrb	r3, [r7, #31]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f7fd fee9 	bl	8001a86 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e0db      	b.n	8003e72 <vl53l8cx_get_ranging_data+0x206>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d915      	bls.n	8003d00 <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d80e      	bhi.n	8003d00 <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	fb02 f303 	mul.w	r3, r2, r3
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e005      	b.n	8003d0c <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	885b      	ldrh	r3, [r3, #2]
 8003d10:	f24e 0284 	movw	r2, #57476	; 0xe084
 8003d14:	4293      	cmp	r3, r2
 8003d16:	f000 8088 	beq.w	8003e2a <vl53l8cx_get_ranging_data+0x1be>
 8003d1a:	f24e 0284 	movw	r2, #57476	; 0xe084
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f300 809f 	bgt.w	8003e62 <vl53l8cx_get_ranging_data+0x1f6>
 8003d24:	f24e 0244 	movw	r2, #57412	; 0xe044
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d070      	beq.n	8003e0e <vl53l8cx_get_ranging_data+0x1a2>
 8003d2c:	f24e 0244 	movw	r2, #57412	; 0xe044
 8003d30:	4293      	cmp	r3, r2
 8003d32:	f300 8096 	bgt.w	8003e62 <vl53l8cx_get_ranging_data+0x1f6>
 8003d36:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d059      	beq.n	8003df2 <vl53l8cx_get_ranging_data+0x186>
 8003d3e:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8003d42:	4293      	cmp	r3, r2
 8003d44:	f300 808d 	bgt.w	8003e62 <vl53l8cx_get_ranging_data+0x1f6>
 8003d48:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d042      	beq.n	8003dd6 <vl53l8cx_get_ranging_data+0x16a>
 8003d50:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8003d54:	4293      	cmp	r3, r2
 8003d56:	f300 8084 	bgt.w	8003e62 <vl53l8cx_get_ranging_data+0x1f6>
 8003d5a:	f64d 3284 	movw	r2, #56196	; 0xdb84
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02b      	beq.n	8003dba <vl53l8cx_get_ranging_data+0x14e>
 8003d62:	f64d 3284 	movw	r2, #56196	; 0xdb84
 8003d66:	4293      	cmp	r3, r2
 8003d68:	dc7b      	bgt.n	8003e62 <vl53l8cx_get_ranging_data+0x1f6>
 8003d6a:	f64d 0258 	movw	r2, #55384	; 0xd858
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d069      	beq.n	8003e46 <vl53l8cx_get_ranging_data+0x1da>
 8003d72:	f64d 0258 	movw	r2, #55384	; 0xd858
 8003d76:	4293      	cmp	r3, r2
 8003d78:	dc73      	bgt.n	8003e62 <vl53l8cx_get_ranging_data+0x1f6>
 8003d7a:	f245 42b4 	movw	r2, #21684	; 0x54b4
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <vl53l8cx_get_ranging_data+0x120>
 8003d82:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00a      	beq.n	8003da0 <vl53l8cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8003d8a:	e06a      	b.n	8003e62 <vl53l8cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4413      	add	r3, r2
 8003d94:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8003d98:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	701a      	strb	r2, [r3, #0]
				break;
 8003d9e:	e061      	b.n	8003e64 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	3304      	adds	r3, #4
 8003da8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4619      	mov	r1, r3
 8003db4:	f003 fecc 	bl	8007b50 <memcpy>
				break;
 8003db8:	e054      	b.n	8003e64 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f003 febe 	bl	8007b50 <memcpy>
				break;
 8003dd4:	e046      	b.n	8003e64 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	3304      	adds	r3, #4
 8003de0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4619      	mov	r1, r3
 8003dec:	f003 feb0 	bl	8007b50 <memcpy>
				break;
 8003df0:	e038      	b.n	8003e64 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4619      	mov	r1, r3
 8003e08:	f003 fea2 	bl	8007b50 <memcpy>
				break;
 8003e0c:	e02a      	b.n	8003e64 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	3304      	adds	r3, #4
 8003e18:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4619      	mov	r1, r3
 8003e24:	f003 fe94 	bl	8007b50 <memcpy>
				break;
 8003e28:	e01c      	b.n	8003e64 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	3304      	adds	r3, #4
 8003e34:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f003 fe86 	bl	8007b50 <memcpy>
				break;
 8003e44:	e00e      	b.n	8003e64 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f003 fe78 	bl	8007b50 <memcpy>
				break;
 8003e60:	e000      	b.n	8003e64 <vl53l8cx_get_ranging_data+0x1f8>
				break;
 8003e62:	bf00      	nop
		}
		i += msize;
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
	for (i = (uint32_t)16; i 
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	f4ff af1e 	bcc.w	8003cba <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e00d      	b.n	8003ea0 <vl53l8cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	0ada      	lsrs	r2, r3, #11
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b3f      	cmp	r3, #63	; 0x3f
 8003ea4:	d9ee      	bls.n	8003e84 <vl53l8cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e033      	b.n	8003f14 <vl53l8cx_get_ranging_data+0x2a8>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	da00      	bge.n	8003ec2 <vl53l8cx_get_ranging_data+0x256>
 8003ec0:	3303      	adds	r3, #3
 8003ec2:	109b      	asrs	r3, r3, #2
 8003ec4:	b219      	sxth	r1, r3
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4413      	add	r3, r2
 8003ed2:	460a      	mov	r2, r1
 8003ed4:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	b2d9      	uxtb	r1, r3
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8003ef0:	460a      	mov	r2, r1
 8003ef2:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3350      	adds	r3, #80	; 0x50
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	0ada      	lsrs	r2, r3, #11
 8003f02:	6839      	ldr	r1, [r7, #0]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	3350      	adds	r3, #80	; 0x50
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	3301      	adds	r3, #1
 8003f12:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b3f      	cmp	r3, #63	; 0x3f
 8003f18:	d9c8      	bls.n	8003eac <vl53l8cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	e01b      	b.n	8003f58 <vl53l8cx_get_ranging_data+0x2ec>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d110      	bne.n	8003f52 <vl53l8cx_get_ranging_data+0x2e6>
			for(j = 0; j < (uint32_t)
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e00a      	b.n	8003f4c <vl53l8cx_get_ranging_data+0x2e0>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	4413      	add	r3, r2
 8003f40:	22ff      	movs	r2, #255	; 0xff
 8003f42:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f1      	beq.n	8003f36 <vl53l8cx_get_ranging_data+0x2ca>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b3f      	cmp	r3, #63	; 0x3f
 8003f5c:	d9e0      	bls.n	8003f20 <vl53l8cx_get_ranging_data+0x2b4>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e012      	b.n	8003f8a <vl53l8cx_get_ranging_data+0x31e>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	33d2      	adds	r3, #210	; 0xd2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <vl53l8cx_get_ranging_data+0x384>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0bda      	lsrs	r2, r3, #15
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	33d2      	adds	r3, #210	; 0xd2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	3301      	adds	r3, #1
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b1f      	cmp	r3, #31
 8003f8e:	d9e9      	bls.n	8003f64 <vl53l8cx_get_ranging_data+0x2f8>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	89fb      	ldrh	r3, [r7, #14]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8003fae:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8003fc2:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	89bb      	ldrh	r3, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8003fd4:	89fa      	ldrh	r2, [r7, #14]
 8003fd6:	89bb      	ldrh	r3, [r7, #12]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d003      	beq.n	8003fe4 <vl53l8cx_get_ranging_data+0x378>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 8003fdc:	7ffb      	ldrb	r3, [r7, #31]
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8003fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	80008001 	.word	0x80008001

08003ff4 <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004008:	2308      	movs	r3, #8
 800400a:	f245 4250 	movw	r2, #21584	; 0x5450
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f996 	bl	8004340 <vl53l8cx_dci_read_data>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	4313      	orrs	r3, r2
 800401c:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 800402a:	fb12 f303 	smulbb	r3, r2, r3
 800402e:	b2da      	uxtb	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	701a      	strb	r2, [r3, #0]

	return status;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <vl53l8cx_set_resolution>:


uint8_t vl53l8cx_set_resolution(
		VL53L8CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	2b10      	cmp	r3, #16
 8004052:	d002      	beq.n	800405a <vl53l8cx_set_resolution+0x1c>
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d055      	beq.n	8004104 <vl53l8cx_set_resolution+0xc6>
 8004058:	e0a9      	b.n	80041ae <vl53l8cx_set_resolution+0x170>
		case VL53L8CX_RESOLUTION_4X4:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8004060:	2310      	movs	r3, #16
 8004062:	f64a 5238 	movw	r2, #44344	; 0xad38
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f96a 	bl	8004340 <vl53l8cx_dci_read_data>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	4313      	orrs	r3, r2
 8004074:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2240      	movs	r2, #64	; 0x40
 800407a:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2204      	movs	r2, #4
 800408a:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8004094:	2310      	movs	r3, #16
 8004096:	f64a 5238 	movw	r2, #44344	; 0xad38
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9da 	bl	8004454 <vl53l8cx_dci_write_data>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80040b0:	2308      	movs	r3, #8
 80040b2:	f245 4250 	movw	r2, #21584	; 0x5450
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f942 	bl	8004340 <vl53l8cx_dci_read_data>
 80040bc:	4603      	mov	r3, r0
 80040be:	461a      	mov	r2, r3
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2204      	movs	r2, #4
 80040d2:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2208      	movs	r2, #8
 80040da:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2208      	movs	r2, #8
 80040e2:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 80040ec:	2308      	movs	r3, #8
 80040ee:	f245 4250 	movw	r2, #21584	; 0x5450
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f9ae 	bl	8004454 <vl53l8cx_dci_write_data>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	4313      	orrs	r3, r2
 8004100:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			break;
 8004102:	e057      	b.n	80041b4 <vl53l8cx_set_resolution+0x176>

		case VL53L8CX_RESOLUTION_8X8:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 800410a:	2310      	movs	r3, #16
 800410c:	f64a 5238 	movw	r2, #44344	; 0xad38
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f915 	bl	8004340 <vl53l8cx_dci_read_data>
 8004116:	4603      	mov	r3, r0
 8004118:	461a      	mov	r2, r3
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	4313      	orrs	r3, r2
 800411e:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2210      	movs	r2, #16
 8004124:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2210      	movs	r2, #16
 800412c:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 800413e:	2310      	movs	r3, #16
 8004140:	f64a 5238 	movw	r2, #44344	; 0xad38
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f985 	bl	8004454 <vl53l8cx_dci_write_data>
 800414a:	4603      	mov	r3, r0
 800414c:	461a      	mov	r2, r3
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	4313      	orrs	r3, r2
 8004152:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 800415a:	2308      	movs	r3, #8
 800415c:	f245 4250 	movw	r2, #21584	; 0x5450
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f8ed 	bl	8004340 <vl53l8cx_dci_read_data>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	4313      	orrs	r3, r2
 800416e:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2208      	movs	r2, #8
 8004174:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2208      	movs	r2, #8
 800417c:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2204      	movs	r2, #4
 8004184:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2204      	movs	r2, #4
 800418c:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8004196:	2308      	movs	r3, #8
 8004198:	f245 4250 	movw	r2, #21584	; 0x5450
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f959 	bl	8004454 <vl53l8cx_dci_write_data>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);

			break;
 80041ac:	e002      	b.n	80041b4 <vl53l8cx_set_resolution+0x176>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 80041ae:	237f      	movs	r3, #127	; 0x7f
 80041b0:	73fb      	strb	r3, [r7, #15]
			break;
 80041b2:	bf00      	nop
		}

	status |= _vl53l8cx_send_offset_data(p_dev, resolution);
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7fe fa73 	bl	80026a4 <_vl53l8cx_send_offset_data>
 80041be:	4603      	mov	r3, r0
 80041c0:	461a      	mov	r2, r3
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l8cx_send_xtalk_data(p_dev, resolution);
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fe fc35 	bl	8002a3c <_vl53l8cx_send_xtalk_data>
 80041d2:	4603      	mov	r3, r0
 80041d4:	461a      	mov	r2, r3
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	4313      	orrs	r3, r2
 80041da:	73fb      	strb	r3, [r7, #15]

	return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b088      	sub	sp, #32
 80041ea:	af04      	add	r7, sp, #16
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80041fc:	2301      	movs	r3, #1
 80041fe:	9302      	str	r3, [sp, #8]
 8004200:	2301      	movs	r3, #1
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	1cfb      	adds	r3, r7, #3
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2304      	movs	r3, #4
 800420a:	f245 4258 	movw	r2, #21592	; 0x5458
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f9be 	bl	8004590 <vl53l8cx_dci_replace_data>
 8004214:	4603      	mov	r3, r0
 8004216:	461a      	mov	r2, r3
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	4313      	orrs	r3, r2
 800421c:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <vl53l8cx_set_integration_time_ms>:
}

uint8_t vl53l8cx_set_integration_time_ms(
		VL53L8CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af04      	add	r7, sp, #16
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d903      	bls.n	8004248 <vl53l8cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004246:	d904      	bls.n	8004252 <vl53l8cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L8CX_STATUS_INVALID_PARAM;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e01a      	b.n	8004288 <vl53l8cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	60bb      	str	r3, [r7, #8]

		status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004264:	2300      	movs	r3, #0
 8004266:	9302      	str	r3, [sp, #8]
 8004268:	2304      	movs	r3, #4
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	f107 0308 	add.w	r3, r7, #8
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2314      	movs	r3, #20
 8004274:	f245 425c 	movw	r2, #21596	; 0x545c
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f989 	bl	8004590 <vl53l8cx_dci_replace_data>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	4313      	orrs	r3, r2
 8004286:	73fb      	strb	r3, [r7, #15]
				VL53L8CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80042ac:	2308      	movs	r3, #8
 80042ae:	f64a 5230 	movw	r2, #44336	; 0xad30
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f844 	bl	8004340 <vl53l8cx_dci_read_data>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	4313      	orrs	r3, r2
 80042c0:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d002      	beq.n	80042ce <vl53l8cx_set_ranging_mode+0x3c>
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d00b      	beq.n	80042e4 <vl53l8cx_set_ranging_mode+0x52>
 80042cc:	e015      	b.n	80042fa <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2203      	movs	r2, #3
 80042da:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
			break;
 80042e2:	e00d      	b.n	8004300 <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2203      	movs	r2, #3
 80042e8:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 80042f4:	2301      	movs	r3, #1
 80042f6:	60bb      	str	r3, [r7, #8]
			break;
 80042f8:	e002      	b.n	8004300 <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 80042fa:	237f      	movs	r3, #127	; 0x7f
 80042fc:	73fb      	strb	r3, [r7, #15]
			break;
 80042fe:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004306:	2308      	movs	r3, #8
 8004308:	f64a 5230 	movw	r2, #44336	; 0xad30
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f8a1 	bl	8004454 <vl53l8cx_dci_write_data>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	4313      	orrs	r3, r2
 800431a:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800431c:	f107 0108 	add.w	r1, r7, #8
 8004320:	2304      	movs	r3, #4
 8004322:	f64d 1264 	movw	r2, #55652	; 0xd964
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f894 	bl	8004454 <vl53l8cx_dci_write_data>
 800432c:	4603      	mov	r3, r0
 800432e:	461a      	mov	r2, r3
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	4313      	orrs	r3, r2
 8004334:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8004336:	7bfb      	ldrb	r3, [r7, #15]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	; 0x30
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	330c      	adds	r3, #12
 8004358:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800435a:	4a3d      	ldr	r2, [pc, #244]	; (8004450 <vl53l8cx_dci_read_data+0x110>)
 800435c:	f107 0314 	add.w	r3, r7, #20
 8004360:	ca07      	ldmia	r2, {r0, r1, r2}
 8004362:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 8004366:	887b      	ldrh	r3, [r7, #2]
 8004368:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 800436c:	d903      	bls.n	8004376 <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 800436e:	23ff      	movs	r3, #255	; 0xff
 8004370:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004374:	e065      	b.n	8004442 <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	b2db      	uxtb	r3, r3
 800437c:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	111b      	asrs	r3, r3, #4
 8004388:	b2db      	uxtb	r3, r3
 800438a:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 800438c:	887b      	ldrh	r3, [r7, #2]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	b2db      	uxtb	r3, r3
 8004394:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f107 0214 	add.w	r2, r7, #20
 800439c:	230c      	movs	r3, #12
 800439e:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 80043a2:	f7fd fb42 	bl	8001a2a <WrMulti>
 80043a6:	4603      	mov	r3, r0
 80043a8:	461a      	mov	r2, r3
 80043aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80043b4:	2303      	movs	r3, #3
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	23ff      	movs	r3, #255	; 0xff
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80043c0:	2201      	movs	r2, #1
 80043c2:	2104      	movs	r1, #4
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7fe f8da 	bl	800257e <_vl53l8cx_poll_for_answer>
 80043ca:	4603      	mov	r3, r0
 80043cc:	461a      	mov	r2, r3
 80043ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 80043d8:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	f642 4104 	movw	r1, #11268	; 0x2c04
 80043e6:	f7fd fb37 	bl	8001a58 <RdMulti>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461a      	mov	r2, r3
 80043ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80043fe:	887b      	ldrh	r3, [r7, #2]
 8004400:	330c      	adds	r3, #12
 8004402:	b29b      	uxth	r3, r3
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f7fd fb3d 	bl	8001a86 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 800440c:	2300      	movs	r3, #0
 800440e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004410:	e011      	b.n	8004436 <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8004412:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004416:	1d1a      	adds	r2, r3, #4
 8004418:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	440b      	add	r3, r1
 8004420:	68f9      	ldr	r1, [r7, #12]
 8004422:	440a      	add	r2, r1
 8004424:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8004428:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 800442a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800442e:	b29b      	uxth	r3, r3
 8004430:	3301      	adds	r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004436:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800443a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800443e:	429a      	cmp	r2, r3
 8004440:	dbe7      	blt.n	8004412 <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 8004442:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8004446:	4618      	mov	r0, r3
 8004448:	3728      	adds	r7, #40	; 0x28
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	08008f54 	.word	0x08008f54

08004454 <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	; 0x30
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800446c:	2300      	movs	r3, #0
 800446e:	753b      	strb	r3, [r7, #20]
 8004470:	2300      	movs	r3, #0
 8004472:	757b      	strb	r3, [r7, #21]
 8004474:	2300      	movs	r3, #0
 8004476:	75bb      	strb	r3, [r7, #22]
 8004478:	230f      	movs	r3, #15
 800447a:	75fb      	strb	r3, [r7, #23]
 800447c:	2305      	movs	r3, #5
 800447e:	763b      	strb	r3, [r7, #24]
 8004480:	2301      	movs	r3, #1
 8004482:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8004484:	887b      	ldrh	r3, [r7, #2]
 8004486:	3308      	adds	r3, #8
 8004488:	121b      	asrs	r3, r3, #8
 800448a:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800448c:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	3308      	adds	r3, #8
 8004494:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004496:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 8004498:	887b      	ldrh	r3, [r7, #2]
 800449a:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 800449e:	3334      	adds	r3, #52	; 0x34
 80044a0:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 80044a8:	d903      	bls.n	80044b2 <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 80044aa:	23ff      	movs	r3, #255	; 0xff
 80044ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044b0:	e068      	b.n	8004584 <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	111b      	asrs	r3, r3, #4
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	4619      	mov	r1, r3
 80044d6:	68b8      	ldr	r0, [r7, #8]
 80044d8:	f7fd fad5 	bl	8001a86 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044e4:	e012      	b.n	800450c <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 80044e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	441a      	add	r2, r3
 80044ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80044f2:	3304      	adds	r3, #4
 80044f4:	7811      	ldrb	r1, [r2, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	460a      	mov	r2, r1
 80044fc:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004500:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29b      	uxth	r3, r3
 800450a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800450c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004510:	2b00      	cmp	r3, #0
 8004512:	dae8      	bge.n	80044e6 <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	3304      	adds	r3, #4
 8004522:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	461a      	mov	r2, r3
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	cb03      	ldmia	r3!, {r0, r1}
 8004532:	6010      	str	r0, [r2, #0]
 8004534:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8004536:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800453e:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8004540:	330c      	adds	r3, #12
 8004542:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004544:	f7fd fa71 	bl	8001a2a <WrMulti>
 8004548:	4603      	mov	r3, r0
 800454a:	461a      	mov	r2, r3
 800454c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004550:	4313      	orrs	r3, r2
 8004552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8004556:	2303      	movs	r3, #3
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	23ff      	movs	r3, #255	; 0xff
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004562:	2201      	movs	r2, #1
 8004564:	2104      	movs	r1, #4
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7fe f809 	bl	800257e <_vl53l8cx_poll_for_answer>
 800456c:	4603      	mov	r3, r0
 800456e:	461a      	mov	r2, r3
 8004570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004574:	4313      	orrs	r3, r2
 8004576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 800457a:	887b      	ldrh	r3, [r7, #2]
 800457c:	4619      	mov	r1, r3
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f7fd fa81 	bl	8001a86 <SwapBuffer>
	}

	return status;
 8004584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004588:	4618      	mov	r0, r3
 800458a:	3728      	adds	r7, #40	; 0x28
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 80045a2:	887b      	ldrh	r3, [r7, #2]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff fec9 	bl	8004340 <vl53l8cx_dci_read_data>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 80045b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045c0:	6a39      	ldr	r1, [r7, #32]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f003 fac4 	bl	8007b50 <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff ff40 	bl	8004454 <vl53l8cx_dci_write_data>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	4313      	orrs	r3, r2
 80045dc:	75fb      	strb	r3, [r7, #23]

	return status;
 80045de:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <vl53l8cx_set_detection_thresholds_enable>:
}

uint8_t vl53l8cx_set_detection_thresholds_enable(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af04      	add	r7, sp, #16
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 80045f8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80045fc:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d104      	bne.n	800460e <vl53l8cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8004604:	2301      	movs	r3, #1
 8004606:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8004608:	2304      	movs	r3, #4
 800460a:	73bb      	strb	r3, [r7, #14]
 800460c:	e003      	b.n	8004616 <vl53l8cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 800460e:	2300      	movs	r3, #0
 8004610:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8004612:	230c      	movs	r3, #12
 8004614:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 800461c:	2300      	movs	r3, #0
 800461e:	9302      	str	r3, [sp, #8]
 8004620:	2304      	movs	r3, #4
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	f107 0308 	add.w	r3, r7, #8
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2308      	movs	r3, #8
 800462c:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ffad 	bl	8004590 <vl53l8cx_dci_replace_data>
 8004636:	4603      	mov	r3, r0
 8004638:	461a      	mov	r2, r3
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	4313      	orrs	r3, r2
 800463e:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004646:	2311      	movs	r3, #17
 8004648:	9302      	str	r3, [sp, #8]
 800464a:	2301      	movs	r3, #1
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	f107 030e 	add.w	r3, r7, #14
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	2314      	movs	r3, #20
 8004656:	f245 4288 	movw	r2, #21640	; 0x5488
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff ff98 	bl	8004590 <vl53l8cx_dci_replace_data>
 8004660:	4603      	mov	r3, r0
 8004662:	461a      	mov	r2, r3
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	4313      	orrs	r3, r2
 8004668:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <vl53l8cx_set_detection_thresholds>:
}

uint8_t vl53l8cx_set_detection_thresholds(
		VL53L8CX_Configuration			*p_dev,
		VL53L8CX_DetectionThresholds	*p_thresholds)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L8CX_STATUS_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8004682:	4aa7      	ldr	r2, [pc, #668]	; (8004920 <vl53l8cx_set_detection_thresholds+0x2ac>)
 8004684:	f107 030c 	add.w	r3, r7, #12
 8004688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800468c:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8004690:	2300      	movs	r3, #0
 8004692:	75fb      	strb	r3, [r7, #23]
 8004694:	e120      	b.n	80048d8 <vl53l8cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	7a1b      	ldrb	r3, [r3, #8]
 800469a:	3b01      	subs	r3, #1
 800469c:	2b12      	cmp	r3, #18
 800469e:	f200 8117 	bhi.w	80048d0 <vl53l8cx_set_detection_thresholds+0x25c>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <vl53l8cx_set_detection_thresholds+0x34>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046f5 	.word	0x080046f5
 80046ac:	08004743 	.word	0x08004743
 80046b0:	080048d1 	.word	0x080048d1
 80046b4:	08004791 	.word	0x08004791
 80046b8:	080048d1 	.word	0x080048d1
 80046bc:	080048d1 	.word	0x080048d1
 80046c0:	080048d1 	.word	0x080048d1
 80046c4:	080047df 	.word	0x080047df
 80046c8:	080048d1 	.word	0x080048d1
 80046cc:	080048d1 	.word	0x080048d1
 80046d0:	080048d1 	.word	0x080048d1
 80046d4:	080048d1 	.word	0x080048d1
 80046d8:	0800482d 	.word	0x0800482d
 80046dc:	080048d1 	.word	0x080048d1
 80046e0:	080048d1 	.word	0x080048d1
 80046e4:	080048d1 	.word	0x080048d1
 80046e8:	080048d1 	.word	0x080048d1
 80046ec:	080048d1 	.word	0x080048d1
 80046f0:	0800487b 	.word	0x0800487b
		{
			case VL53L8CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 80046f4:	7dfa      	ldrb	r2, [r7, #23]
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	461a      	mov	r2, r3
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4413      	add	r3, r2
 8004704:	6819      	ldr	r1, [r3, #0]
 8004706:	7dfa      	ldrb	r2, [r7, #23]
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	461a      	mov	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	4413      	add	r3, r2
 8004716:	008a      	lsls	r2, r1, #2
 8004718:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 800471a:	7dfa      	ldrb	r2, [r7, #23]
 800471c:	4613      	mov	r3, r2
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	461a      	mov	r2, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	4413      	add	r3, r2
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	7dfa      	ldrb	r2, [r7, #23]
 800472e:	4613      	mov	r3, r2
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	461a      	mov	r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	4413      	add	r3, r2
 800473c:	008a      	lsls	r2, r1, #2
 800473e:	605a      	str	r2, [r3, #4]
				break;
 8004740:	e0c7      	b.n	80048d2 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8004742:	7dfa      	ldrb	r2, [r7, #23]
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	461a      	mov	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4413      	add	r3, r2
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	7dfa      	ldrb	r2, [r7, #23]
 8004756:	4613      	mov	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	461a      	mov	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4413      	add	r3, r2
 8004764:	02ca      	lsls	r2, r1, #11
 8004766:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8004768:	7dfa      	ldrb	r2, [r7, #23]
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	461a      	mov	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	4413      	add	r3, r2
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	7dfa      	ldrb	r2, [r7, #23]
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	461a      	mov	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	4413      	add	r3, r2
 800478a:	02ca      	lsls	r2, r1, #11
 800478c:	605a      	str	r2, [r3, #4]
				break;
 800478e:	e0a0      	b.n	80048d2 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8004790:	7dfa      	ldrb	r2, [r7, #23]
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	461a      	mov	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4413      	add	r3, r2
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	7dfa      	ldrb	r2, [r7, #23]
 80047a4:	4613      	mov	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	461a      	mov	r2, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	4413      	add	r3, r2
 80047b2:	01ca      	lsls	r2, r1, #7
 80047b4:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 80047b6:	7dfa      	ldrb	r2, [r7, #23]
 80047b8:	4613      	mov	r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	461a      	mov	r2, r3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	4413      	add	r3, r2
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	7dfa      	ldrb	r2, [r7, #23]
 80047ca:	4613      	mov	r3, r2
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	461a      	mov	r2, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4413      	add	r3, r2
 80047d8:	01ca      	lsls	r2, r1, #7
 80047da:	605a      	str	r2, [r3, #4]
				break;
 80047dc:	e079      	b.n	80048d2 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80047de:	7dfa      	ldrb	r2, [r7, #23]
 80047e0:	4613      	mov	r3, r2
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	461a      	mov	r2, r3
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	4413      	add	r3, r2
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	7dfa      	ldrb	r2, [r7, #23]
 80047f2:	4613      	mov	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	461a      	mov	r2, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4413      	add	r3, r2
 8004800:	02ca      	lsls	r2, r1, #11
 8004802:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8004804:	7dfa      	ldrb	r2, [r7, #23]
 8004806:	4613      	mov	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	461a      	mov	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	4413      	add	r3, r2
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	7dfa      	ldrb	r2, [r7, #23]
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	461a      	mov	r2, r3
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	4413      	add	r3, r2
 8004826:	02ca      	lsls	r2, r1, #11
 8004828:	605a      	str	r2, [r3, #4]
				break;
 800482a:	e052      	b.n	80048d2 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 800482c:	7dfa      	ldrb	r2, [r7, #23]
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	461a      	mov	r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4413      	add	r3, r2
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	7dfa      	ldrb	r2, [r7, #23]
 8004840:	4613      	mov	r3, r2
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	461a      	mov	r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	4413      	add	r3, r2
 800484e:	020a      	lsls	r2, r1, #8
 8004850:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8004852:	7dfa      	ldrb	r2, [r7, #23]
 8004854:	4613      	mov	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	461a      	mov	r2, r3
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	4413      	add	r3, r2
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	7dfa      	ldrb	r2, [r7, #23]
 8004866:	4613      	mov	r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	461a      	mov	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4413      	add	r3, r2
 8004874:	020a      	lsls	r2, r1, #8
 8004876:	605a      	str	r2, [r3, #4]
				break;
 8004878:	e02b      	b.n	80048d2 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 800487a:	7dfa      	ldrb	r2, [r7, #23]
 800487c:	4613      	mov	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	461a      	mov	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	4413      	add	r3, r2
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	7df9      	ldrb	r1, [r7, #23]
 800488e:	460b      	mov	r3, r1
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	440b      	add	r3, r1
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4619      	mov	r1, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	4419      	add	r1, r3
 800489c:	4613      	mov	r3, r2
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 80048a4:	7dfa      	ldrb	r2, [r7, #23]
 80048a6:	4613      	mov	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	461a      	mov	r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	7df9      	ldrb	r1, [r7, #23]
 80048b8:	460b      	mov	r3, r1
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	440b      	add	r3, r1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4619      	mov	r1, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	4419      	add	r1, r3
 80048c6:	4613      	mov	r3, r2
 80048c8:	041b      	lsls	r3, r3, #16
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	604b      	str	r3, [r1, #4]
				break;
 80048ce:	e000      	b.n	80048d2 <vl53l8cx_set_detection_thresholds+0x25e>
			default:
				break;
 80048d0:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	3301      	adds	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	2b3f      	cmp	r3, #63	; 0x3f
 80048dc:	f67f aedb 	bls.w	8004696 <vl53l8cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 80048e0:	f107 010c 	add.w	r1, r7, #12
 80048e4:	2308      	movs	r3, #8
 80048e6:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff fdb2 	bl	8004454 <vl53l8cx_dci_write_data>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	7dbb      	ldrb	r3, [r7, #22]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 80048fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048fe:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 8004902:	6839      	ldr	r1, [r7, #0]
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff fda5 	bl	8004454 <vl53l8cx_dci_write_data>
 800490a:	4603      	mov	r3, r0
 800490c:	461a      	mov	r2, r3
 800490e:	7dbb      	ldrb	r3, [r7, #22]
 8004910:	4313      	orrs	r3, r2
 8004912:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L8CX_NB_THRESHOLDS
			*sizeof(VL53L8CX_DetectionThresholds)));

	return status;
 8004914:	7dbb      	ldrb	r3, [r7, #22]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	08008f60 	.word	0x08008f60

08004924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <SystemInit+0x20>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	4a05      	ldr	r2, [pc, #20]	; (8004944 <SystemInit+0x20>)
 8004930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000ed00 	.word	0xe000ed00

08004948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800494c:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <HAL_Init+0x40>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0d      	ldr	r2, [pc, #52]	; (8004988 <HAL_Init+0x40>)
 8004952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_Init+0x40>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <HAL_Init+0x40>)
 800495e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <HAL_Init+0x40>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a07      	ldr	r2, [pc, #28]	; (8004988 <HAL_Init+0x40>)
 800496a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004970:	2003      	movs	r0, #3
 8004972:	f000 f94f 	bl	8004c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004976:	2000      	movs	r0, #0
 8004978:	f000 f808 	bl	800498c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800497c:	f7fc fa9e 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023c00 	.word	0x40023c00

0800498c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004994:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <HAL_InitTick+0x54>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <HAL_InitTick+0x58>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f967 	bl	8004c7e <HAL_SYSTICK_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e00e      	b.n	80049d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b0f      	cmp	r3, #15
 80049be:	d80a      	bhi.n	80049d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049c0:	2200      	movs	r2, #0
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295
 80049c8:	f000 f92f 	bl	8004c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049cc:	4a06      	ldr	r2, [pc, #24]	; (80049e8 <HAL_InitTick+0x5c>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e000      	b.n	80049d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000044 	.word	0x20000044
 80049e4:	2000004c 	.word	0x2000004c
 80049e8:	20000048 	.word	0x20000048

080049ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_IncTick+0x20>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_IncTick+0x24>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4413      	add	r3, r2
 80049fc:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <HAL_IncTick+0x24>)
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	2000004c 	.word	0x2000004c
 8004a10:	200029b0 	.word	0x200029b0

08004a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return uwTick;
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <HAL_GetTick+0x14>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	200029b0 	.word	0x200029b0

08004a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a34:	f7ff ffee 	bl	8004a14 <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d005      	beq.n	8004a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_Delay+0x44>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a52:	bf00      	nop
 8004a54:	f7ff ffde 	bl	8004a14 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d8f7      	bhi.n	8004a54 <HAL_Delay+0x28>
  {
  }
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	2000004c 	.word	0x2000004c

08004a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a90:	4013      	ands	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aa6:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	60d3      	str	r3, [r2, #12]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	f003 0307 	and.w	r3, r3, #7
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	db0b      	blt.n	8004b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	f003 021f 	and.w	r2, r3, #31
 8004af0:	4907      	ldr	r1, [pc, #28]	; (8004b10 <__NVIC_EnableIRQ+0x38>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2001      	movs	r0, #1
 8004afa:	fa00 f202 	lsl.w	r2, r0, r2
 8004afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000e100 	.word	0xe000e100

08004b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	db0a      	blt.n	8004b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	490c      	ldr	r1, [pc, #48]	; (8004b60 <__NVIC_SetPriority+0x4c>)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	0112      	lsls	r2, r2, #4
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	440b      	add	r3, r1
 8004b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b3c:	e00a      	b.n	8004b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4908      	ldr	r1, [pc, #32]	; (8004b64 <__NVIC_SetPriority+0x50>)
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	3b04      	subs	r3, #4
 8004b4c:	0112      	lsls	r2, r2, #4
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	440b      	add	r3, r1
 8004b52:	761a      	strb	r2, [r3, #24]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	e000e100 	.word	0xe000e100
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b089      	sub	sp, #36	; 0x24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f1c3 0307 	rsb	r3, r3, #7
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	bf28      	it	cs
 8004b86:	2304      	movcs	r3, #4
 8004b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d902      	bls.n	8004b98 <NVIC_EncodePriority+0x30>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3b03      	subs	r3, #3
 8004b96:	e000      	b.n	8004b9a <NVIC_EncodePriority+0x32>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	401a      	ands	r2, r3
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bba:	43d9      	mvns	r1, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	4313      	orrs	r3, r2
         );
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3724      	adds	r7, #36	; 0x24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004be0:	d301      	bcc.n	8004be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004be2:	2301      	movs	r3, #1
 8004be4:	e00f      	b.n	8004c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <SysTick_Config+0x40>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bee:	210f      	movs	r1, #15
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	f7ff ff8e 	bl	8004b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <SysTick_Config+0x40>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bfe:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <SysTick_Config+0x40>)
 8004c00:	2207      	movs	r2, #7
 8004c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	e000e010 	.word	0xe000e010

08004c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff29 	bl	8004a74 <__NVIC_SetPriorityGrouping>
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	4603      	mov	r3, r0
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c3c:	f7ff ff3e 	bl	8004abc <__NVIC_GetPriorityGrouping>
 8004c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	6978      	ldr	r0, [r7, #20]
 8004c48:	f7ff ff8e 	bl	8004b68 <NVIC_EncodePriority>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff5d 	bl	8004b14 <__NVIC_SetPriority>
}
 8004c5a:	bf00      	nop
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	4603      	mov	r3, r0
 8004c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ff31 	bl	8004ad8 <__NVIC_EnableIRQ>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff ffa2 	bl	8004bd0 <SysTick_Config>
 8004c8c:	4603      	mov	r3, r0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004c96:	b480      	push	{r7}
 8004c98:	b087      	sub	sp, #28
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004ca8:	7afb      	ldrb	r3, [r7, #11]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d103      	bne.n	8004cb6 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	605a      	str	r2, [r3, #4]
      break;
 8004cb4:	e002      	b.n	8004cbc <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cba:	bf00      	nop
  }

  return status;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e003      	b.n	8004ce6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
  }
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2201      	movs	r2, #1
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <HAL_EXTI_IRQHandler+0x44>)
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4013      	ands	r3, r2
 8004d14:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d009      	beq.n	8004d30 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8004d1c:	4a06      	ldr	r2, [pc, #24]	; (8004d38 <HAL_EXTI_IRQHandler+0x44>)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4798      	blx	r3
    }
  }
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40013c00 	.word	0x40013c00

08004d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b089      	sub	sp, #36	; 0x24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	e159      	b.n	800500c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d58:	2201      	movs	r2, #1
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	f040 8148 	bne.w	8005006 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d005      	beq.n	8004d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d130      	bne.n	8004df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	2203      	movs	r2, #3
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 0201 	and.w	r2, r3, #1
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d017      	beq.n	8004e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d123      	bne.n	8004e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	08da      	lsrs	r2, r3, #3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3208      	adds	r2, #8
 8004e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	220f      	movs	r2, #15
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	08da      	lsrs	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3208      	adds	r2, #8
 8004e7a:	69b9      	ldr	r1, [r7, #24]
 8004e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4013      	ands	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 0203 	and.w	r2, r3, #3
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80a2 	beq.w	8005006 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	4b57      	ldr	r3, [pc, #348]	; (8005024 <HAL_GPIO_Init+0x2e8>)
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	4a56      	ldr	r2, [pc, #344]	; (8005024 <HAL_GPIO_Init+0x2e8>)
 8004ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ed2:	4b54      	ldr	r3, [pc, #336]	; (8005024 <HAL_GPIO_Init+0x2e8>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ede:	4a52      	ldr	r2, [pc, #328]	; (8005028 <HAL_GPIO_Init+0x2ec>)
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	220f      	movs	r2, #15
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4013      	ands	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a49      	ldr	r2, [pc, #292]	; (800502c <HAL_GPIO_Init+0x2f0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d019      	beq.n	8004f3e <HAL_GPIO_Init+0x202>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a48      	ldr	r2, [pc, #288]	; (8005030 <HAL_GPIO_Init+0x2f4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_GPIO_Init+0x1fe>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a47      	ldr	r2, [pc, #284]	; (8005034 <HAL_GPIO_Init+0x2f8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00d      	beq.n	8004f36 <HAL_GPIO_Init+0x1fa>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a46      	ldr	r2, [pc, #280]	; (8005038 <HAL_GPIO_Init+0x2fc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d007      	beq.n	8004f32 <HAL_GPIO_Init+0x1f6>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a45      	ldr	r2, [pc, #276]	; (800503c <HAL_GPIO_Init+0x300>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d101      	bne.n	8004f2e <HAL_GPIO_Init+0x1f2>
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	e008      	b.n	8004f40 <HAL_GPIO_Init+0x204>
 8004f2e:	2307      	movs	r3, #7
 8004f30:	e006      	b.n	8004f40 <HAL_GPIO_Init+0x204>
 8004f32:	2303      	movs	r3, #3
 8004f34:	e004      	b.n	8004f40 <HAL_GPIO_Init+0x204>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e002      	b.n	8004f40 <HAL_GPIO_Init+0x204>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_GPIO_Init+0x204>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	f002 0203 	and.w	r2, r2, #3
 8004f46:	0092      	lsls	r2, r2, #2
 8004f48:	4093      	lsls	r3, r2
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f50:	4935      	ldr	r1, [pc, #212]	; (8005028 <HAL_GPIO_Init+0x2ec>)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	089b      	lsrs	r3, r3, #2
 8004f56:	3302      	adds	r3, #2
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f5e:	4b38      	ldr	r3, [pc, #224]	; (8005040 <HAL_GPIO_Init+0x304>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f82:	4a2f      	ldr	r2, [pc, #188]	; (8005040 <HAL_GPIO_Init+0x304>)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f88:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <HAL_GPIO_Init+0x304>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <HAL_GPIO_Init+0x304>)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fb2:	4b23      	ldr	r3, [pc, #140]	; (8005040 <HAL_GPIO_Init+0x304>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fd6:	4a1a      	ldr	r2, [pc, #104]	; (8005040 <HAL_GPIO_Init+0x304>)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fdc:	4b18      	ldr	r3, [pc, #96]	; (8005040 <HAL_GPIO_Init+0x304>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005000:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <HAL_GPIO_Init+0x304>)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3301      	adds	r3, #1
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b0f      	cmp	r3, #15
 8005010:	f67f aea2 	bls.w	8004d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	3724      	adds	r7, #36	; 0x24
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800
 8005028:	40013800 	.word	0x40013800
 800502c:	40020000 	.word	0x40020000
 8005030:	40020400 	.word	0x40020400
 8005034:	40020800 	.word	0x40020800
 8005038:	40020c00 	.word	0x40020c00
 800503c:	40021000 	.word	0x40021000
 8005040:	40013c00 	.word	0x40013c00

08005044 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800504e:	2300      	movs	r3, #0
 8005050:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e0bb      	b.n	80051d8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005060:	2201      	movs	r2, #1
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4013      	ands	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	429a      	cmp	r2, r3
 8005078:	f040 80ab 	bne.w	80051d2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800507c:	4a5c      	ldr	r2, [pc, #368]	; (80051f0 <HAL_GPIO_DeInit+0x1ac>)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	3302      	adds	r3, #2
 8005084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005088:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	220f      	movs	r2, #15
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	4013      	ands	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a54      	ldr	r2, [pc, #336]	; (80051f4 <HAL_GPIO_DeInit+0x1b0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d019      	beq.n	80050da <HAL_GPIO_DeInit+0x96>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a53      	ldr	r2, [pc, #332]	; (80051f8 <HAL_GPIO_DeInit+0x1b4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_GPIO_DeInit+0x92>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a52      	ldr	r2, [pc, #328]	; (80051fc <HAL_GPIO_DeInit+0x1b8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00d      	beq.n	80050d2 <HAL_GPIO_DeInit+0x8e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a51      	ldr	r2, [pc, #324]	; (8005200 <HAL_GPIO_DeInit+0x1bc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d007      	beq.n	80050ce <HAL_GPIO_DeInit+0x8a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a50      	ldr	r2, [pc, #320]	; (8005204 <HAL_GPIO_DeInit+0x1c0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d101      	bne.n	80050ca <HAL_GPIO_DeInit+0x86>
 80050c6:	2304      	movs	r3, #4
 80050c8:	e008      	b.n	80050dc <HAL_GPIO_DeInit+0x98>
 80050ca:	2307      	movs	r3, #7
 80050cc:	e006      	b.n	80050dc <HAL_GPIO_DeInit+0x98>
 80050ce:	2303      	movs	r3, #3
 80050d0:	e004      	b.n	80050dc <HAL_GPIO_DeInit+0x98>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e002      	b.n	80050dc <HAL_GPIO_DeInit+0x98>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <HAL_GPIO_DeInit+0x98>
 80050da:	2300      	movs	r3, #0
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	f002 0203 	and.w	r2, r2, #3
 80050e2:	0092      	lsls	r2, r2, #2
 80050e4:	4093      	lsls	r3, r2
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d132      	bne.n	8005152 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80050ec:	4b46      	ldr	r3, [pc, #280]	; (8005208 <HAL_GPIO_DeInit+0x1c4>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	43db      	mvns	r3, r3
 80050f4:	4944      	ldr	r1, [pc, #272]	; (8005208 <HAL_GPIO_DeInit+0x1c4>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80050fa:	4b43      	ldr	r3, [pc, #268]	; (8005208 <HAL_GPIO_DeInit+0x1c4>)
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	43db      	mvns	r3, r3
 8005102:	4941      	ldr	r1, [pc, #260]	; (8005208 <HAL_GPIO_DeInit+0x1c4>)
 8005104:	4013      	ands	r3, r2
 8005106:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005108:	4b3f      	ldr	r3, [pc, #252]	; (8005208 <HAL_GPIO_DeInit+0x1c4>)
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	43db      	mvns	r3, r3
 8005110:	493d      	ldr	r1, [pc, #244]	; (8005208 <HAL_GPIO_DeInit+0x1c4>)
 8005112:	4013      	ands	r3, r2
 8005114:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005116:	4b3c      	ldr	r3, [pc, #240]	; (8005208 <HAL_GPIO_DeInit+0x1c4>)
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	43db      	mvns	r3, r3
 800511e:	493a      	ldr	r1, [pc, #232]	; (8005208 <HAL_GPIO_DeInit+0x1c4>)
 8005120:	4013      	ands	r3, r2
 8005122:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	220f      	movs	r2, #15
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005134:	4a2e      	ldr	r2, [pc, #184]	; (80051f0 <HAL_GPIO_DeInit+0x1ac>)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	089b      	lsrs	r3, r3, #2
 800513a:	3302      	adds	r3, #2
 800513c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	43da      	mvns	r2, r3
 8005144:	482a      	ldr	r0, [pc, #168]	; (80051f0 <HAL_GPIO_DeInit+0x1ac>)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	400a      	ands	r2, r1
 800514c:	3302      	adds	r3, #2
 800514e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	2103      	movs	r1, #3
 800515c:	fa01 f303 	lsl.w	r3, r1, r3
 8005160:	43db      	mvns	r3, r3
 8005162:	401a      	ands	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	08da      	lsrs	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3208      	adds	r2, #8
 8005170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	220f      	movs	r2, #15
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	08d2      	lsrs	r2, r2, #3
 8005188:	4019      	ands	r1, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3208      	adds	r2, #8
 800518e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	2103      	movs	r1, #3
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	401a      	ands	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	2101      	movs	r1, #1
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	401a      	ands	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2103      	movs	r1, #3
 80051c6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	401a      	ands	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	3301      	adds	r3, #1
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	f67f af40 	bls.w	8005060 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40013800 	.word	0x40013800
 80051f4:	40020000 	.word	0x40020000
 80051f8:	40020400 	.word	0x40020400
 80051fc:	40020800 	.word	0x40020800
 8005200:	40020c00 	.word	0x40020c00
 8005204:	40021000 	.word	0x40021000
 8005208:	40013c00 	.word	0x40013c00

0800520c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
 8005218:	4613      	mov	r3, r2
 800521a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800521c:	787b      	ldrb	r3, [r7, #1]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005228:	e003      	b.n	8005232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800522a:	887b      	ldrh	r3, [r7, #2]
 800522c:	041a      	lsls	r2, r3, #16
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	619a      	str	r2, [r3, #24]
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	4013      	ands	r3, r2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d006      	beq.n	8005264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005256:	4a05      	ldr	r2, [pc, #20]	; (800526c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb fca0 	bl	8000ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40013c00 	.word	0x40013c00

08005270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e12b      	b.n	80054da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f95d 	bl	8005556 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052d4:	f001 fc5a 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 80052d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4a81      	ldr	r2, [pc, #516]	; (80054e4 <HAL_I2C_Init+0x274>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d807      	bhi.n	80052f4 <HAL_I2C_Init+0x84>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a80      	ldr	r2, [pc, #512]	; (80054e8 <HAL_I2C_Init+0x278>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	bf94      	ite	ls
 80052ec:	2301      	movls	r3, #1
 80052ee:	2300      	movhi	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e006      	b.n	8005302 <HAL_I2C_Init+0x92>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a7d      	ldr	r2, [pc, #500]	; (80054ec <HAL_I2C_Init+0x27c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bf94      	ite	ls
 80052fc:	2301      	movls	r3, #1
 80052fe:	2300      	movhi	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e0e7      	b.n	80054da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a78      	ldr	r2, [pc, #480]	; (80054f0 <HAL_I2C_Init+0x280>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	0c9b      	lsrs	r3, r3, #18
 8005314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4a6a      	ldr	r2, [pc, #424]	; (80054e4 <HAL_I2C_Init+0x274>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d802      	bhi.n	8005344 <HAL_I2C_Init+0xd4>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	3301      	adds	r3, #1
 8005342:	e009      	b.n	8005358 <HAL_I2C_Init+0xe8>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	4a69      	ldr	r2, [pc, #420]	; (80054f4 <HAL_I2C_Init+0x284>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	3301      	adds	r3, #1
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	430b      	orrs	r3, r1
 800535e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800536a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	495c      	ldr	r1, [pc, #368]	; (80054e4 <HAL_I2C_Init+0x274>)
 8005374:	428b      	cmp	r3, r1
 8005376:	d819      	bhi.n	80053ac <HAL_I2C_Init+0x13c>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1e59      	subs	r1, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fbb1 f3f3 	udiv	r3, r1, r3
 8005386:	1c59      	adds	r1, r3, #1
 8005388:	f640 73fc 	movw	r3, #4092	; 0xffc
 800538c:	400b      	ands	r3, r1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_I2C_Init+0x138>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1e59      	subs	r1, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a0:	3301      	adds	r3, #1
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	e051      	b.n	800544c <HAL_I2C_Init+0x1dc>
 80053a8:	2304      	movs	r3, #4
 80053aa:	e04f      	b.n	800544c <HAL_I2C_Init+0x1dc>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d111      	bne.n	80053d8 <HAL_I2C_Init+0x168>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1e58      	subs	r0, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	440b      	add	r3, r1
 80053c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e012      	b.n	80053fe <HAL_I2C_Init+0x18e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1e58      	subs	r0, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	0099      	lsls	r1, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_I2C_Init+0x196>
 8005402:	2301      	movs	r3, #1
 8005404:	e022      	b.n	800544c <HAL_I2C_Init+0x1dc>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10e      	bne.n	800542c <HAL_I2C_Init+0x1bc>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1e58      	subs	r0, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	440b      	add	r3, r1
 800541c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005420:	3301      	adds	r3, #1
 8005422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	e00f      	b.n	800544c <HAL_I2C_Init+0x1dc>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	1e58      	subs	r0, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	0099      	lsls	r1, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005442:	3301      	adds	r3, #1
 8005444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	6809      	ldr	r1, [r1, #0]
 8005450:	4313      	orrs	r3, r2
 8005452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800547a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6911      	ldr	r1, [r2, #16]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68d2      	ldr	r2, [r2, #12]
 8005486:	4311      	orrs	r1, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	430b      	orrs	r3, r1
 800548e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	000186a0 	.word	0x000186a0
 80054e8:	001e847f 	.word	0x001e847f
 80054ec:	003d08ff 	.word	0x003d08ff
 80054f0:	431bde83 	.word	0x431bde83
 80054f4:	10624dd3 	.word	0x10624dd3

080054f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e021      	b.n	800554e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2224      	movs	r2, #36	; 0x24
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0201 	bic.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f821 	bl	800556a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	461a      	mov	r2, r3
 800558e:	4603      	mov	r3, r0
 8005590:	817b      	strh	r3, [r7, #10]
 8005592:	460b      	mov	r3, r1
 8005594:	813b      	strh	r3, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800559a:	f7ff fa3b 	bl	8004a14 <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	f040 80d9 	bne.w	8005760 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2319      	movs	r3, #25
 80055b4:	2201      	movs	r2, #1
 80055b6:	496d      	ldr	r1, [pc, #436]	; (800576c <HAL_I2C_Mem_Write+0x1ec>)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fc99 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
 80055c6:	e0cc      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_I2C_Mem_Write+0x56>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e0c5      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d007      	beq.n	80055fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800560a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2221      	movs	r2, #33	; 0x21
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800562c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a4d      	ldr	r2, [pc, #308]	; (8005770 <HAL_I2C_Mem_Write+0x1f0>)
 800563c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800563e:	88f8      	ldrh	r0, [r7, #6]
 8005640:	893a      	ldrh	r2, [r7, #8]
 8005642:	8979      	ldrh	r1, [r7, #10]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4603      	mov	r3, r0
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fad0 	bl	8005bf4 <I2C_RequestMemoryWrite>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d052      	beq.n	8005700 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e081      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fd1a 	bl	800609c <I2C_WaitOnTXEFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00d      	beq.n	800568a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b04      	cmp	r3, #4
 8005674:	d107      	bne.n	8005686 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e06b      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d11b      	bne.n	8005700 <HAL_I2C_Mem_Write+0x180>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d017      	beq.n	8005700 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1aa      	bne.n	800565e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fd06 	bl	800611e <I2C_WaitOnBTFFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	2b04      	cmp	r3, #4
 800571e:	d107      	bne.n	8005730 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e016      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	00100002 	.word	0x00100002
 8005770:	ffff0000 	.word	0xffff0000

08005774 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08c      	sub	sp, #48	; 0x30
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	4608      	mov	r0, r1
 800577e:	4611      	mov	r1, r2
 8005780:	461a      	mov	r2, r3
 8005782:	4603      	mov	r3, r0
 8005784:	817b      	strh	r3, [r7, #10]
 8005786:	460b      	mov	r3, r1
 8005788:	813b      	strh	r3, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800578e:	f7ff f941 	bl	8004a14 <HAL_GetTick>
 8005792:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b20      	cmp	r3, #32
 800579e:	f040 8208 	bne.w	8005bb2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	2319      	movs	r3, #25
 80057a8:	2201      	movs	r2, #1
 80057aa:	497b      	ldr	r1, [pc, #492]	; (8005998 <HAL_I2C_Mem_Read+0x224>)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fb9f 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80057b8:	2302      	movs	r3, #2
 80057ba:	e1fb      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_I2C_Mem_Read+0x56>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e1f4      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x440>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d007      	beq.n	80057f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2222      	movs	r2, #34	; 0x22
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2240      	movs	r2, #64	; 0x40
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4a5b      	ldr	r2, [pc, #364]	; (800599c <HAL_I2C_Mem_Read+0x228>)
 8005830:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005832:	88f8      	ldrh	r0, [r7, #6]
 8005834:	893a      	ldrh	r2, [r7, #8]
 8005836:	8979      	ldrh	r1, [r7, #10]
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	4603      	mov	r3, r0
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fa6c 	bl	8005d20 <I2C_RequestMemoryRead>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e1b0      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d113      	bne.n	8005882 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585a:	2300      	movs	r3, #0
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	623b      	str	r3, [r7, #32]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	623b      	str	r3, [r7, #32]
 800586e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	e184      	b.n	8005b8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005886:	2b01      	cmp	r3, #1
 8005888:	d11b      	bne.n	80058c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589a:	2300      	movs	r3, #0
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	61fb      	str	r3, [r7, #28]
 80058ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e164      	b.n	8005b8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d11b      	bne.n	8005902 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ea:	2300      	movs	r3, #0
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	e144      	b.n	8005b8c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005918:	e138      	b.n	8005b8c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591e:	2b03      	cmp	r3, #3
 8005920:	f200 80f1 	bhi.w	8005b06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005928:	2b01      	cmp	r3, #1
 800592a:	d123      	bne.n	8005974 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fc35 	bl	80061a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e139      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005972:	e10b      	b.n	8005b8c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	2b02      	cmp	r3, #2
 800597a:	d14e      	bne.n	8005a1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	2200      	movs	r2, #0
 8005984:	4906      	ldr	r1, [pc, #24]	; (80059a0 <HAL_I2C_Mem_Read+0x22c>)
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fab2 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e10e      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x440>
 8005996:	bf00      	nop
 8005998:	00100002 	.word	0x00100002
 800599c:	ffff0000 	.word	0xffff0000
 80059a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a18:	e0b8      	b.n	8005b8c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	2200      	movs	r2, #0
 8005a22:	4966      	ldr	r1, [pc, #408]	; (8005bbc <HAL_I2C_Mem_Read+0x448>)
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fa63 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0bf      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	494f      	ldr	r1, [pc, #316]	; (8005bbc <HAL_I2C_Mem_Read+0x448>)
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fa35 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e091      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b04:	e042      	b.n	8005b8c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fb48 	bl	80061a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e04c      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d118      	bne.n	8005b8c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f47f aec2 	bne.w	800591a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e000      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005bb2:	2302      	movs	r3, #2
  }
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3728      	adds	r7, #40	; 0x28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	00010004 	.word	0x00010004

08005bc0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bce:	b2db      	uxtb	r3, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	4611      	mov	r1, r2
 8005c00:	461a      	mov	r2, r3
 8005c02:	4603      	mov	r3, r0
 8005c04:	817b      	strh	r3, [r7, #10]
 8005c06:	460b      	mov	r3, r1
 8005c08:	813b      	strh	r3, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f960 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c44:	d103      	bne.n	8005c4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e05f      	b.n	8005d12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c52:	897b      	ldrh	r3, [r7, #10]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	6a3a      	ldr	r2, [r7, #32]
 8005c66:	492d      	ldr	r1, [pc, #180]	; (8005d1c <I2C_RequestMemoryWrite+0x128>)
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f998 	bl	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e04c      	b.n	8005d12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c78:	2300      	movs	r3, #0
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c90:	6a39      	ldr	r1, [r7, #32]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fa02 	bl	800609c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d107      	bne.n	8005cb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e02b      	b.n	8005d12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d105      	bne.n	8005ccc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cc0:	893b      	ldrh	r3, [r7, #8]
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	611a      	str	r2, [r3, #16]
 8005cca:	e021      	b.n	8005d10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cdc:	6a39      	ldr	r1, [r7, #32]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f9dc 	bl	800609c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d107      	bne.n	8005d02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e005      	b.n	8005d12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d06:	893b      	ldrh	r3, [r7, #8]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	00010002 	.word	0x00010002

08005d20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	4608      	mov	r0, r1
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	817b      	strh	r3, [r7, #10]
 8005d32:	460b      	mov	r3, r1
 8005d34:	813b      	strh	r3, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f8c2 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00d      	beq.n	8005d8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d80:	d103      	bne.n	8005d8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e0aa      	b.n	8005ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d8e:	897b      	ldrh	r3, [r7, #10]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	4952      	ldr	r1, [pc, #328]	; (8005eec <I2C_RequestMemoryRead+0x1cc>)
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f8fa 	bl	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e097      	b.n	8005ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dcc:	6a39      	ldr	r1, [r7, #32]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f964 	bl	800609c <I2C_WaitOnTXEFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00d      	beq.n	8005df6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d107      	bne.n	8005df2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e076      	b.n	8005ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d105      	bne.n	8005e08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dfc:	893b      	ldrh	r3, [r7, #8]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	611a      	str	r2, [r3, #16]
 8005e06:	e021      	b.n	8005e4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e08:	893b      	ldrh	r3, [r7, #8]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e18:	6a39      	ldr	r1, [r7, #32]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f93e 	bl	800609c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d107      	bne.n	8005e3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e050      	b.n	8005ee4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e42:	893b      	ldrh	r3, [r7, #8]
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4e:	6a39      	ldr	r1, [r7, #32]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f923 	bl	800609c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d107      	bne.n	8005e74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e035      	b.n	8005ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f82b 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00d      	beq.n	8005ebc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eae:	d103      	bne.n	8005eb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e013      	b.n	8005ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ebc:	897b      	ldrh	r3, [r7, #10]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	6a3a      	ldr	r2, [r7, #32]
 8005ed0:	4906      	ldr	r1, [pc, #24]	; (8005eec <I2C_RequestMemoryRead+0x1cc>)
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f863 	bl	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	00010002 	.word	0x00010002

08005ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f00:	e025      	b.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d021      	beq.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0a:	f7fe fd83 	bl	8004a14 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d116      	bne.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e023      	b.n	8005f96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10d      	bne.n	8005f74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	43da      	mvns	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4013      	ands	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bf0c      	ite	eq
 8005f6a:	2301      	moveq	r3, #1
 8005f6c:	2300      	movne	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	e00c      	b.n	8005f8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	43da      	mvns	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d0b6      	beq.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fac:	e051      	b.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbc:	d123      	bne.n	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f043 0204 	orr.w	r2, r3, #4
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e046      	b.n	8006094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d021      	beq.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600e:	f7fe fd01 	bl	8004a14 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	429a      	cmp	r2, r3
 800601c:	d302      	bcc.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d116      	bne.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f043 0220 	orr.w	r2, r3, #32
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e020      	b.n	8006094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d10c      	bne.n	8006076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	43da      	mvns	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4013      	ands	r3, r2
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	bf14      	ite	ne
 800606e:	2301      	movne	r3, #1
 8006070:	2300      	moveq	r3, #0
 8006072:	b2db      	uxtb	r3, r3
 8006074:	e00b      	b.n	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	43da      	mvns	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d18d      	bne.n	8005fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060a8:	e02d      	b.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f8ce 	bl	800624c <I2C_IsAcknowledgeFailed>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e02d      	b.n	8006116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d021      	beq.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fe fca7 	bl	8004a14 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d116      	bne.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e007      	b.n	8006116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006110:	2b80      	cmp	r3, #128	; 0x80
 8006112:	d1ca      	bne.n	80060aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800612a:	e02d      	b.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f88d 	bl	800624c <I2C_IsAcknowledgeFailed>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e02d      	b.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006142:	d021      	beq.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006144:	f7fe fc66 	bl	8004a14 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d116      	bne.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f043 0220 	orr.w	r2, r3, #32
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e007      	b.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b04      	cmp	r3, #4
 8006194:	d1ca      	bne.n	800612c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061ac:	e042      	b.n	8006234 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d119      	bne.n	80061f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0210 	mvn.w	r2, #16
 80061c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e029      	b.n	8006244 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f0:	f7fe fc10 	bl	8004a14 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d302      	bcc.n	8006206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d116      	bne.n	8006234 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	f043 0220 	orr.w	r2, r3, #32
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e007      	b.n	8006244 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d1b5      	bne.n	80061ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006262:	d11b      	bne.n	800629c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800626c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	f043 0204 	orr.w	r2, r3, #4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e267      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d075      	beq.n	80063b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062ca:	4b88      	ldr	r3, [pc, #544]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d00c      	beq.n	80062f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d6:	4b85      	ldr	r3, [pc, #532]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062de:	2b08      	cmp	r3, #8
 80062e0:	d112      	bne.n	8006308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e2:	4b82      	ldr	r3, [pc, #520]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ee:	d10b      	bne.n	8006308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f0:	4b7e      	ldr	r3, [pc, #504]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d05b      	beq.n	80063b4 <HAL_RCC_OscConfig+0x108>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d157      	bne.n	80063b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e242      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006310:	d106      	bne.n	8006320 <HAL_RCC_OscConfig+0x74>
 8006312:	4b76      	ldr	r3, [pc, #472]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a75      	ldr	r2, [pc, #468]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e01d      	b.n	800635c <HAL_RCC_OscConfig+0xb0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006328:	d10c      	bne.n	8006344 <HAL_RCC_OscConfig+0x98>
 800632a:	4b70      	ldr	r3, [pc, #448]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a6f      	ldr	r2, [pc, #444]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4b6d      	ldr	r3, [pc, #436]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a6c      	ldr	r2, [pc, #432]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e00b      	b.n	800635c <HAL_RCC_OscConfig+0xb0>
 8006344:	4b69      	ldr	r3, [pc, #420]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a68      	ldr	r2, [pc, #416]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 800634a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	4b66      	ldr	r3, [pc, #408]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a65      	ldr	r2, [pc, #404]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800635a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006364:	f7fe fb56 	bl	8004a14 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800636c:	f7fe fb52 	bl	8004a14 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b64      	cmp	r3, #100	; 0x64
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e207      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637e:	4b5b      	ldr	r3, [pc, #364]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0xc0>
 800638a:	e014      	b.n	80063b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638c:	f7fe fb42 	bl	8004a14 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006394:	f7fe fb3e 	bl	8004a14 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b64      	cmp	r3, #100	; 0x64
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e1f3      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063a6:	4b51      	ldr	r3, [pc, #324]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0xe8>
 80063b2:	e000      	b.n	80063b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d063      	beq.n	800648a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063c2:	4b4a      	ldr	r3, [pc, #296]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 030c 	and.w	r3, r3, #12
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ce:	4b47      	ldr	r3, [pc, #284]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d11c      	bne.n	8006414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063da:	4b44      	ldr	r3, [pc, #272]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d116      	bne.n	8006414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e6:	4b41      	ldr	r3, [pc, #260]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <HAL_RCC_OscConfig+0x152>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d001      	beq.n	80063fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e1c7      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fe:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4937      	ldr	r1, [pc, #220]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 800640e:	4313      	orrs	r3, r2
 8006410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006412:	e03a      	b.n	800648a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d020      	beq.n	800645e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800641c:	4b34      	ldr	r3, [pc, #208]	; (80064f0 <HAL_RCC_OscConfig+0x244>)
 800641e:	2201      	movs	r2, #1
 8006420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006422:	f7fe faf7 	bl	8004a14 <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800642a:	f7fe faf3 	bl	8004a14 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e1a8      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800643c:	4b2b      	ldr	r3, [pc, #172]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f0      	beq.n	800642a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006448:	4b28      	ldr	r3, [pc, #160]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	4925      	ldr	r1, [pc, #148]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006458:	4313      	orrs	r3, r2
 800645a:	600b      	str	r3, [r1, #0]
 800645c:	e015      	b.n	800648a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800645e:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <HAL_RCC_OscConfig+0x244>)
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006464:	f7fe fad6 	bl	8004a14 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800646c:	f7fe fad2 	bl	8004a14 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e187      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800647e:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d036      	beq.n	8006504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800649e:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <HAL_RCC_OscConfig+0x248>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a4:	f7fe fab6 	bl	8004a14 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ac:	f7fe fab2 	bl	8004a14 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e167      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_RCC_OscConfig+0x240>)
 80064c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCC_OscConfig+0x200>
 80064ca:	e01b      	b.n	8006504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064cc:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <HAL_RCC_OscConfig+0x248>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d2:	f7fe fa9f 	bl	8004a14 <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d8:	e00e      	b.n	80064f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064da:	f7fe fa9b 	bl	8004a14 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d907      	bls.n	80064f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e150      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
 80064ec:	40023800 	.word	0x40023800
 80064f0:	42470000 	.word	0x42470000
 80064f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f8:	4b88      	ldr	r3, [pc, #544]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1ea      	bne.n	80064da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8097 	beq.w	8006640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006516:	4b81      	ldr	r3, [pc, #516]	; (800671c <HAL_RCC_OscConfig+0x470>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	4b7d      	ldr	r3, [pc, #500]	; (800671c <HAL_RCC_OscConfig+0x470>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	4a7c      	ldr	r2, [pc, #496]	; (800671c <HAL_RCC_OscConfig+0x470>)
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006530:	6413      	str	r3, [r2, #64]	; 0x40
 8006532:	4b7a      	ldr	r3, [pc, #488]	; (800671c <HAL_RCC_OscConfig+0x470>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006542:	4b77      	ldr	r3, [pc, #476]	; (8006720 <HAL_RCC_OscConfig+0x474>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d118      	bne.n	8006580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800654e:	4b74      	ldr	r3, [pc, #464]	; (8006720 <HAL_RCC_OscConfig+0x474>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a73      	ldr	r2, [pc, #460]	; (8006720 <HAL_RCC_OscConfig+0x474>)
 8006554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655a:	f7fe fa5b 	bl	8004a14 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006562:	f7fe fa57 	bl	8004a14 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e10c      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006574:	4b6a      	ldr	r3, [pc, #424]	; (8006720 <HAL_RCC_OscConfig+0x474>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0f0      	beq.n	8006562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d106      	bne.n	8006596 <HAL_RCC_OscConfig+0x2ea>
 8006588:	4b64      	ldr	r3, [pc, #400]	; (800671c <HAL_RCC_OscConfig+0x470>)
 800658a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658c:	4a63      	ldr	r2, [pc, #396]	; (800671c <HAL_RCC_OscConfig+0x470>)
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	6713      	str	r3, [r2, #112]	; 0x70
 8006594:	e01c      	b.n	80065d0 <HAL_RCC_OscConfig+0x324>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b05      	cmp	r3, #5
 800659c:	d10c      	bne.n	80065b8 <HAL_RCC_OscConfig+0x30c>
 800659e:	4b5f      	ldr	r3, [pc, #380]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	4a5e      	ldr	r2, [pc, #376]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80065a4:	f043 0304 	orr.w	r3, r3, #4
 80065a8:	6713      	str	r3, [r2, #112]	; 0x70
 80065aa:	4b5c      	ldr	r3, [pc, #368]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	4a5b      	ldr	r2, [pc, #364]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	6713      	str	r3, [r2, #112]	; 0x70
 80065b6:	e00b      	b.n	80065d0 <HAL_RCC_OscConfig+0x324>
 80065b8:	4b58      	ldr	r3, [pc, #352]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065bc:	4a57      	ldr	r2, [pc, #348]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	6713      	str	r3, [r2, #112]	; 0x70
 80065c4:	4b55      	ldr	r3, [pc, #340]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c8:	4a54      	ldr	r2, [pc, #336]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80065ca:	f023 0304 	bic.w	r3, r3, #4
 80065ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d015      	beq.n	8006604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d8:	f7fe fa1c 	bl	8004a14 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065e0:	f7fe fa18 	bl	8004a14 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e0cb      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f6:	4b49      	ldr	r3, [pc, #292]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0ee      	beq.n	80065e0 <HAL_RCC_OscConfig+0x334>
 8006602:	e014      	b.n	800662e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006604:	f7fe fa06 	bl	8004a14 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800660a:	e00a      	b.n	8006622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800660c:	f7fe fa02 	bl	8004a14 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f241 3288 	movw	r2, #5000	; 0x1388
 800661a:	4293      	cmp	r3, r2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e0b5      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006622:	4b3e      	ldr	r3, [pc, #248]	; (800671c <HAL_RCC_OscConfig+0x470>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1ee      	bne.n	800660c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d105      	bne.n	8006640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006634:	4b39      	ldr	r3, [pc, #228]	; (800671c <HAL_RCC_OscConfig+0x470>)
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	4a38      	ldr	r2, [pc, #224]	; (800671c <HAL_RCC_OscConfig+0x470>)
 800663a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800663e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80a1 	beq.w	800678c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800664a:	4b34      	ldr	r3, [pc, #208]	; (800671c <HAL_RCC_OscConfig+0x470>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 030c 	and.w	r3, r3, #12
 8006652:	2b08      	cmp	r3, #8
 8006654:	d05c      	beq.n	8006710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d141      	bne.n	80066e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665e:	4b31      	ldr	r3, [pc, #196]	; (8006724 <HAL_RCC_OscConfig+0x478>)
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006664:	f7fe f9d6 	bl	8004a14 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800666c:	f7fe f9d2 	bl	8004a14 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e087      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667e:	4b27      	ldr	r3, [pc, #156]	; (800671c <HAL_RCC_OscConfig+0x470>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69da      	ldr	r2, [r3, #28]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	019b      	lsls	r3, r3, #6
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	085b      	lsrs	r3, r3, #1
 80066a2:	3b01      	subs	r3, #1
 80066a4:	041b      	lsls	r3, r3, #16
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	061b      	lsls	r3, r3, #24
 80066ae:	491b      	ldr	r1, [pc, #108]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066b4:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <HAL_RCC_OscConfig+0x478>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ba:	f7fe f9ab 	bl	8004a14 <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c2:	f7fe f9a7 	bl	8004a14 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e05c      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d4:	4b11      	ldr	r3, [pc, #68]	; (800671c <HAL_RCC_OscConfig+0x470>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0f0      	beq.n	80066c2 <HAL_RCC_OscConfig+0x416>
 80066e0:	e054      	b.n	800678c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e2:	4b10      	ldr	r3, [pc, #64]	; (8006724 <HAL_RCC_OscConfig+0x478>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e8:	f7fe f994 	bl	8004a14 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f0:	f7fe f990 	bl	8004a14 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e045      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <HAL_RCC_OscConfig+0x470>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f0      	bne.n	80066f0 <HAL_RCC_OscConfig+0x444>
 800670e:	e03d      	b.n	800678c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d107      	bne.n	8006728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e038      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
 800671c:	40023800 	.word	0x40023800
 8006720:	40007000 	.word	0x40007000
 8006724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006728:	4b1b      	ldr	r3, [pc, #108]	; (8006798 <HAL_RCC_OscConfig+0x4ec>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d028      	beq.n	8006788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006740:	429a      	cmp	r2, r3
 8006742:	d121      	bne.n	8006788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d11a      	bne.n	8006788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006758:	4013      	ands	r3, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800675e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006760:	4293      	cmp	r3, r2
 8006762:	d111      	bne.n	8006788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	3b01      	subs	r3, #1
 8006772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006774:	429a      	cmp	r2, r3
 8006776:	d107      	bne.n	8006788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006784:	429a      	cmp	r2, r3
 8006786:	d001      	beq.n	800678c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40023800 	.word	0x40023800

0800679c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0cc      	b.n	800694a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067b0:	4b68      	ldr	r3, [pc, #416]	; (8006954 <HAL_RCC_ClockConfig+0x1b8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d90c      	bls.n	80067d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067be:	4b65      	ldr	r3, [pc, #404]	; (8006954 <HAL_RCC_ClockConfig+0x1b8>)
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c6:	4b63      	ldr	r3, [pc, #396]	; (8006954 <HAL_RCC_ClockConfig+0x1b8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0b8      	b.n	800694a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d020      	beq.n	8006826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d005      	beq.n	80067fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067f0:	4b59      	ldr	r3, [pc, #356]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	4a58      	ldr	r2, [pc, #352]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 80067f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006808:	4b53      	ldr	r3, [pc, #332]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	4a52      	ldr	r2, [pc, #328]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006814:	4b50      	ldr	r3, [pc, #320]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	494d      	ldr	r1, [pc, #308]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	4313      	orrs	r3, r2
 8006824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d044      	beq.n	80068bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d107      	bne.n	800684a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800683a:	4b47      	ldr	r3, [pc, #284]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d119      	bne.n	800687a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e07f      	b.n	800694a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b02      	cmp	r3, #2
 8006850:	d003      	beq.n	800685a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006856:	2b03      	cmp	r3, #3
 8006858:	d107      	bne.n	800686a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800685a:	4b3f      	ldr	r3, [pc, #252]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e06f      	b.n	800694a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800686a:	4b3b      	ldr	r3, [pc, #236]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e067      	b.n	800694a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800687a:	4b37      	ldr	r3, [pc, #220]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f023 0203 	bic.w	r2, r3, #3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4934      	ldr	r1, [pc, #208]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 8006888:	4313      	orrs	r3, r2
 800688a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800688c:	f7fe f8c2 	bl	8004a14 <HAL_GetTick>
 8006890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006892:	e00a      	b.n	80068aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006894:	f7fe f8be 	bl	8004a14 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e04f      	b.n	800694a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068aa:	4b2b      	ldr	r3, [pc, #172]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 020c 	and.w	r2, r3, #12
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d1eb      	bne.n	8006894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068bc:	4b25      	ldr	r3, [pc, #148]	; (8006954 <HAL_RCC_ClockConfig+0x1b8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d20c      	bcs.n	80068e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ca:	4b22      	ldr	r3, [pc, #136]	; (8006954 <HAL_RCC_ClockConfig+0x1b8>)
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d2:	4b20      	ldr	r3, [pc, #128]	; (8006954 <HAL_RCC_ClockConfig+0x1b8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d001      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e032      	b.n	800694a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d008      	beq.n	8006902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068f0:	4b19      	ldr	r3, [pc, #100]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	4916      	ldr	r1, [pc, #88]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0308 	and.w	r3, r3, #8
 800690a:	2b00      	cmp	r3, #0
 800690c:	d009      	beq.n	8006922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800690e:	4b12      	ldr	r3, [pc, #72]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	490e      	ldr	r1, [pc, #56]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	4313      	orrs	r3, r2
 8006920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006922:	f000 f821 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 8006926:	4602      	mov	r2, r0
 8006928:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <HAL_RCC_ClockConfig+0x1bc>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	091b      	lsrs	r3, r3, #4
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	490a      	ldr	r1, [pc, #40]	; (800695c <HAL_RCC_ClockConfig+0x1c0>)
 8006934:	5ccb      	ldrb	r3, [r1, r3]
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	4a09      	ldr	r2, [pc, #36]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 800693c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe f822 	bl	800498c <HAL_InitTick>

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40023c00 	.word	0x40023c00
 8006958:	40023800 	.word	0x40023800
 800695c:	0801e674 	.word	0x0801e674
 8006960:	20000044 	.word	0x20000044
 8006964:	20000048 	.word	0x20000048

08006968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800696c:	b094      	sub	sp, #80	; 0x50
 800696e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	647b      	str	r3, [r7, #68]	; 0x44
 8006974:	2300      	movs	r3, #0
 8006976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006978:	2300      	movs	r3, #0
 800697a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006980:	4b79      	ldr	r3, [pc, #484]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 030c 	and.w	r3, r3, #12
 8006988:	2b08      	cmp	r3, #8
 800698a:	d00d      	beq.n	80069a8 <HAL_RCC_GetSysClockFreq+0x40>
 800698c:	2b08      	cmp	r3, #8
 800698e:	f200 80e1 	bhi.w	8006b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0x34>
 8006996:	2b04      	cmp	r3, #4
 8006998:	d003      	beq.n	80069a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800699a:	e0db      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800699c:	4b73      	ldr	r3, [pc, #460]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800699e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80069a0:	e0db      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069a2:	4b73      	ldr	r3, [pc, #460]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80069a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069a6:	e0d8      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069a8:	4b6f      	ldr	r3, [pc, #444]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069b2:	4b6d      	ldr	r3, [pc, #436]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d063      	beq.n	8006a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069be:	4b6a      	ldr	r3, [pc, #424]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	099b      	lsrs	r3, r3, #6
 80069c4:	2200      	movs	r2, #0
 80069c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d0:	633b      	str	r3, [r7, #48]	; 0x30
 80069d2:	2300      	movs	r3, #0
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34
 80069d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069da:	4622      	mov	r2, r4
 80069dc:	462b      	mov	r3, r5
 80069de:	f04f 0000 	mov.w	r0, #0
 80069e2:	f04f 0100 	mov.w	r1, #0
 80069e6:	0159      	lsls	r1, r3, #5
 80069e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ec:	0150      	lsls	r0, r2, #5
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4621      	mov	r1, r4
 80069f4:	1a51      	subs	r1, r2, r1
 80069f6:	6139      	str	r1, [r7, #16]
 80069f8:	4629      	mov	r1, r5
 80069fa:	eb63 0301 	sbc.w	r3, r3, r1
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	018b      	lsls	r3, r1, #6
 8006a10:	4651      	mov	r1, sl
 8006a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a16:	4651      	mov	r1, sl
 8006a18:	018a      	lsls	r2, r1, #6
 8006a1a:	4651      	mov	r1, sl
 8006a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8006a20:	4659      	mov	r1, fp
 8006a22:	eb63 0901 	sbc.w	r9, r3, r1
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a3a:	4690      	mov	r8, r2
 8006a3c:	4699      	mov	r9, r3
 8006a3e:	4623      	mov	r3, r4
 8006a40:	eb18 0303 	adds.w	r3, r8, r3
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	462b      	mov	r3, r5
 8006a48:	eb49 0303 	adc.w	r3, r9, r3
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	024b      	lsls	r3, r1, #9
 8006a5e:	4621      	mov	r1, r4
 8006a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a64:	4621      	mov	r1, r4
 8006a66:	024a      	lsls	r2, r1, #9
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6e:	2200      	movs	r2, #0
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a78:	f7f9 fc02 	bl	8000280 <__aeabi_uldivmod>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4613      	mov	r3, r2
 8006a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a84:	e058      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a86:	4b38      	ldr	r3, [pc, #224]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	099b      	lsrs	r3, r3, #6
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	4611      	mov	r1, r2
 8006a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a96:	623b      	str	r3, [r7, #32]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f04f 0000 	mov.w	r0, #0
 8006aa8:	f04f 0100 	mov.w	r1, #0
 8006aac:	0159      	lsls	r1, r3, #5
 8006aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ab2:	0150      	lsls	r0, r2, #5
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4641      	mov	r1, r8
 8006aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8006abe:	4649      	mov	r1, r9
 8006ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8006adc:	eb63 050b 	sbc.w	r5, r3, fp
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	f04f 0300 	mov.w	r3, #0
 8006ae8:	00eb      	lsls	r3, r5, #3
 8006aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aee:	00e2      	lsls	r2, r4, #3
 8006af0:	4614      	mov	r4, r2
 8006af2:	461d      	mov	r5, r3
 8006af4:	4643      	mov	r3, r8
 8006af6:	18e3      	adds	r3, r4, r3
 8006af8:	603b      	str	r3, [r7, #0]
 8006afa:	464b      	mov	r3, r9
 8006afc:	eb45 0303 	adc.w	r3, r5, r3
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b0e:	4629      	mov	r1, r5
 8006b10:	028b      	lsls	r3, r1, #10
 8006b12:	4621      	mov	r1, r4
 8006b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b18:	4621      	mov	r1, r4
 8006b1a:	028a      	lsls	r2, r1, #10
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b22:	2200      	movs	r2, #0
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	61fa      	str	r2, [r7, #28]
 8006b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b2c:	f7f9 fba8 	bl	8000280 <__aeabi_uldivmod>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4613      	mov	r3, r2
 8006b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b38:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	0c1b      	lsrs	r3, r3, #16
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	3301      	adds	r3, #1
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b52:	e002      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3750      	adds	r7, #80	; 0x50
 8006b60:	46bd      	mov	sp, r7
 8006b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	00f42400 	.word	0x00f42400
 8006b70:	007a1200 	.word	0x007a1200

08006b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b78:	4b03      	ldr	r3, [pc, #12]	; (8006b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	20000044 	.word	0x20000044

08006b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b90:	f7ff fff0 	bl	8006b74 <HAL_RCC_GetHCLKFreq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	0a9b      	lsrs	r3, r3, #10
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	4903      	ldr	r1, [pc, #12]	; (8006bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba2:	5ccb      	ldrb	r3, [r1, r3]
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	0801e684 	.word	0x0801e684

08006bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bb8:	f7ff ffdc 	bl	8006b74 <HAL_RCC_GetHCLKFreq>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	0b5b      	lsrs	r3, r3, #13
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	4903      	ldr	r1, [pc, #12]	; (8006bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bca:	5ccb      	ldrb	r3, [r1, r3]
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	0801e684 	.word	0x0801e684

08006bdc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d105      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d035      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c04:	4b67      	ldr	r3, [pc, #412]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c0a:	f7fd ff03 	bl	8004a14 <HAL_GetTick>
 8006c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c10:	e008      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c12:	f7fd feff 	bl	8004a14 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0ba      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c24:	4b60      	ldr	r3, [pc, #384]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f0      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	019a      	lsls	r2, r3, #6
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	071b      	lsls	r3, r3, #28
 8006c3c:	495a      	ldr	r1, [pc, #360]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c44:	4b57      	ldr	r3, [pc, #348]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c4a:	f7fd fee3 	bl	8004a14 <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c50:	e008      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c52:	f7fd fedf 	bl	8004a14 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e09a      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c64:	4b50      	ldr	r3, [pc, #320]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0f0      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8083 	beq.w	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	4b49      	ldr	r3, [pc, #292]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	4a48      	ldr	r2, [pc, #288]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c8e:	4b46      	ldr	r3, [pc, #280]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c9a:	4b44      	ldr	r3, [pc, #272]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a43      	ldr	r2, [pc, #268]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ca6:	f7fd feb5 	bl	8004a14 <HAL_GetTick>
 8006caa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cae:	f7fd feb1 	bl	8004a14 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e06c      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cc0:	4b3a      	ldr	r3, [pc, #232]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ccc:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d02f      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d028      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cea:	4b2f      	ldr	r3, [pc, #188]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cf4:	4b2e      	ldr	r3, [pc, #184]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cfa:	4b2d      	ldr	r3, [pc, #180]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d00:	4a29      	ldr	r2, [pc, #164]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d06:	4b28      	ldr	r3, [pc, #160]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d114      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d12:	f7fd fe7f 	bl	8004a14 <HAL_GetTick>
 8006d16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d18:	e00a      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d1a:	f7fd fe7b 	bl	8004a14 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e034      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d30:	4b1d      	ldr	r3, [pc, #116]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0ee      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d48:	d10d      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d4a:	4b17      	ldr	r3, [pc, #92]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d5e:	4912      	ldr	r1, [pc, #72]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	608b      	str	r3, [r1, #8]
 8006d64:	e005      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d66:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4a0f      	ldr	r2, [pc, #60]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d70:	6093      	str	r3, [r2, #8]
 8006d72:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d7e:	490a      	ldr	r1, [pc, #40]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	7c1a      	ldrb	r2, [r3, #16]
 8006d94:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d96:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	42470068 	.word	0x42470068
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40007000 	.word	0x40007000
 8006db0:	42470e40 	.word	0x42470e40
 8006db4:	424711e0 	.word	0x424711e0

08006db8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e066      	b.n	8006e9c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7f5b      	ldrb	r3, [r3, #29]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d105      	bne.n	8006de4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fa f894 	bl	8000f0c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	22ca      	movs	r2, #202	; 0xca
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2253      	movs	r2, #83	; 0x53
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f998 	bl	8007130 <RTC_EnterInitMode>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d12c      	bne.n	8006e64 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6899      	ldr	r1, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	68d2      	ldr	r2, [r2, #12]
 8006e44:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6919      	ldr	r1, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	041a      	lsls	r2, r3, #16
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f99f 	bl	800719e <RTC_ExitInitMode>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d113      	bne.n	8006e92 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699a      	ldr	r2, [r3, #24]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	22ff      	movs	r2, #255	; 0xff
 8006e98:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ea4:	b590      	push	{r4, r7, lr}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	7f1b      	ldrb	r3, [r3, #28]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_RTC_SetTime+0x1c>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e087      	b.n	8006fd0 <HAL_RTC_SetTime+0x12c>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d126      	bne.n	8006f20 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 f97c 	bl	80071e8 <RTC_ByteToBcd2>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 f975 	bl	80071e8 <RTC_ByteToBcd2>
 8006efe:	4603      	mov	r3, r0
 8006f00:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f02:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	789b      	ldrb	r3, [r3, #2]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 f96d 	bl	80071e8 <RTC_ByteToBcd2>
 8006f0e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f10:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	78db      	ldrb	r3, [r3, #3]
 8006f18:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	e018      	b.n	8006f52 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2200      	movs	r2, #0
 8006f32:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f40:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006f46:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	78db      	ldrb	r3, [r3, #3]
 8006f4c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	22ca      	movs	r2, #202	; 0xca
 8006f58:	625a      	str	r2, [r3, #36]	; 0x24
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2253      	movs	r2, #83	; 0x53
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 f8e4 	bl	8007130 <RTC_EnterInitMode>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006f6c:	7cfb      	ldrb	r3, [r7, #19]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d120      	bne.n	8006fb4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006f7c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f80:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6899      	ldr	r1, [r3, #8]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f8f7 	bl	800719e <RTC_ExitInitMode>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006fb4:	7cfb      	ldrb	r3, [r7, #19]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	22ff      	movs	r2, #255	; 0xff
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	771a      	strb	r2, [r3, #28]

  return status;
 8006fce:	7cfb      	ldrb	r3, [r7, #19]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd90      	pop	{r4, r7, pc}

08006fd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	7f1b      	ldrb	r3, [r3, #28]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <HAL_RTC_SetDate+0x1c>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	e071      	b.n	80070d8 <HAL_RTC_SetDate+0x100>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10e      	bne.n	8007024 <HAL_RTC_SetDate+0x4c>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b00      	cmp	r3, #0
 8007010:	d008      	beq.n	8007024 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	f023 0310 	bic.w	r3, r3, #16
 800701a:	b2db      	uxtb	r3, r3
 800701c:	330a      	adds	r3, #10
 800701e:	b2da      	uxtb	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d11c      	bne.n	8007064 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	78db      	ldrb	r3, [r3, #3]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f8da 	bl	80071e8 <RTC_ByteToBcd2>
 8007034:	4603      	mov	r3, r0
 8007036:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f8d3 	bl	80071e8 <RTC_ByteToBcd2>
 8007042:	4603      	mov	r3, r0
 8007044:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007046:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	789b      	ldrb	r3, [r3, #2]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 f8cb 	bl	80071e8 <RTC_ByteToBcd2>
 8007052:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007054:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	e00e      	b.n	8007082 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	78db      	ldrb	r3, [r3, #3]
 8007068:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007070:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007076:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	22ca      	movs	r2, #202	; 0xca
 8007088:	625a      	str	r2, [r3, #36]	; 0x24
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2253      	movs	r2, #83	; 0x53
 8007090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 f84c 	bl	8007130 <RTC_EnterInitMode>
 8007098:	4603      	mov	r3, r0
 800709a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800709c:	7cfb      	ldrb	r3, [r7, #19]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10c      	bne.n	80070bc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80070ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f873 	bl	800719e <RTC_ExitInitMode>
 80070b8:	4603      	mov	r3, r0
 80070ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80070bc:	7cfb      	ldrb	r3, [r7, #19]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	22ff      	movs	r2, #255	; 0xff
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	771a      	strb	r2, [r3, #28]

  return status;
 80070d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd90      	pop	{r4, r7, pc}

080070e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070fa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070fc:	f7fd fc8a 	bl	8004a14 <HAL_GetTick>
 8007100:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007102:	e009      	b.n	8007118 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007104:	f7fd fc86 	bl	8004a14 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007112:	d901      	bls.n	8007118 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e007      	b.n	8007128 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ee      	beq.n	8007104 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714a:	2b00      	cmp	r3, #0
 800714c:	d122      	bne.n	8007194 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800715c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800715e:	f7fd fc59 	bl	8004a14 <HAL_GetTick>
 8007162:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007164:	e00c      	b.n	8007180 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007166:	f7fd fc55 	bl	8004a14 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007174:	d904      	bls.n	8007180 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2204      	movs	r2, #4
 800717a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <RTC_EnterInitMode+0x64>
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d1e8      	bne.n	8007166 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff ff89 	bl	80070e0 <HAL_RTC_WaitForSynchro>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2204      	movs	r2, #4
 80071d8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80071f6:	e005      	b.n	8007204 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	3301      	adds	r3, #1
 80071fc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	3b0a      	subs	r3, #10
 8007202:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	2b09      	cmp	r3, #9
 8007208:	d8f6      	bhi.n	80071f8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	b2da      	uxtb	r2, r3
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	4313      	orrs	r3, r2
 8007214:	b2db      	uxtb	r3, r3
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e03f      	b.n	80072b4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f837 	bl	80072bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2224      	movs	r2, #36	; 0x24
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007264:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f9d4 	bl	8007614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800727a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695a      	ldr	r2, [r3, #20]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800728a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800729a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	; 0x28
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	4613      	mov	r3, r2
 80072de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d17c      	bne.n	80073ea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <HAL_UART_Transmit+0x2c>
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e075      	b.n	80073ec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_UART_Transmit+0x3e>
 800730a:	2302      	movs	r3, #2
 800730c:	e06e      	b.n	80073ec <HAL_UART_Transmit+0x11c>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2221      	movs	r2, #33	; 0x21
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007324:	f7fd fb76 	bl	8004a14 <HAL_GetTick>
 8007328:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	88fa      	ldrh	r2, [r7, #6]
 8007334:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733e:	d108      	bne.n	8007352 <HAL_UART_Transmit+0x82>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	e003      	b.n	800735a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007362:	e02a      	b.n	80073ba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2200      	movs	r2, #0
 800736c:	2180      	movs	r1, #128	; 0x80
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f8e2 	bl	8007538 <UART_WaitOnFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e036      	b.n	80073ec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007392:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	3302      	adds	r3, #2
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	e007      	b.n	80073ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	781a      	ldrb	r2, [r3, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	3301      	adds	r3, #1
 80073aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1cf      	bne.n	8007364 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2200      	movs	r2, #0
 80073cc:	2140      	movs	r1, #64	; 0x40
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f8b2 	bl	8007538 <UART_WaitOnFlagUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e006      	b.n	80073ec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e000      	b.n	80073ec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073ea:	2302      	movs	r3, #2
  }
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b20      	cmp	r3, #32
 8007412:	f040 808c 	bne.w	800752e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <HAL_UART_Receive+0x2e>
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e084      	b.n	8007530 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_UART_Receive+0x40>
 8007430:	2302      	movs	r3, #2
 8007432:	e07d      	b.n	8007530 <HAL_UART_Receive+0x13c>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2222      	movs	r2, #34	; 0x22
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007450:	f7fd fae0 	bl	8004a14 <HAL_GetTick>
 8007454:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	88fa      	ldrh	r2, [r7, #6]
 800745a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	d108      	bne.n	800747e <HAL_UART_Receive+0x8a>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007474:	2300      	movs	r3, #0
 8007476:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	e003      	b.n	8007486 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800748e:	e043      	b.n	8007518 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2200      	movs	r2, #0
 8007498:	2120      	movs	r1, #32
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f84c 	bl	8007538 <UART_WaitOnFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e042      	b.n	8007530 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10c      	bne.n	80074ca <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074bc:	b29a      	uxth	r2, r3
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	3302      	adds	r3, #2
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	e01f      	b.n	800750a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d2:	d007      	beq.n	80074e4 <HAL_UART_Receive+0xf0>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <HAL_UART_Receive+0xfe>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d106      	bne.n	80074f2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e008      	b.n	8007504 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	3301      	adds	r3, #1
 8007508:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1b6      	bne.n	8007490 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e000      	b.n	8007530 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800752e:	2302      	movs	r3, #2
  }
}
 8007530:	4618      	mov	r0, r3
 8007532:	3720      	adds	r7, #32
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b090      	sub	sp, #64	; 0x40
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	4613      	mov	r3, r2
 8007546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007548:	e050      	b.n	80075ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800754a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d04c      	beq.n	80075ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <UART_WaitOnFlagUntilTimeout+0x30>
 8007558:	f7fd fa5c 	bl	8004a14 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007564:	429a      	cmp	r2, r3
 8007566:	d241      	bcs.n	80075ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	330c      	adds	r3, #12
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007588:	637a      	str	r2, [r7, #52]	; 0x34
 800758a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800758e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e5      	bne.n	8007568 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3314      	adds	r3, #20
 80075a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	613b      	str	r3, [r7, #16]
   return(result);
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3314      	adds	r3, #20
 80075ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075bc:	623a      	str	r2, [r7, #32]
 80075be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	69f9      	ldr	r1, [r7, #28]
 80075c2:	6a3a      	ldr	r2, [r7, #32]
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e5      	bne.n	800759c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e00f      	b.n	800760c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	4013      	ands	r3, r2
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	bf0c      	ite	eq
 80075fc:	2301      	moveq	r3, #1
 80075fe:	2300      	movne	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	461a      	mov	r2, r3
 8007604:	79fb      	ldrb	r3, [r7, #7]
 8007606:	429a      	cmp	r2, r3
 8007608:	d09f      	beq.n	800754a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3740      	adds	r7, #64	; 0x40
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007618:	b0c0      	sub	sp, #256	; 0x100
 800761a:	af00      	add	r7, sp, #0
 800761c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007630:	68d9      	ldr	r1, [r3, #12]
 8007632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	ea40 0301 	orr.w	r3, r0, r1
 800763c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800763e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	431a      	orrs	r2, r3
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	431a      	orrs	r2, r3
 8007654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	4313      	orrs	r3, r2
 800765c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800766c:	f021 010c 	bic.w	r1, r1, #12
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800767a:	430b      	orrs	r3, r1
 800767c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800767e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768e:	6999      	ldr	r1, [r3, #24]
 8007690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	ea40 0301 	orr.w	r3, r0, r1
 800769a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800769c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	4b8f      	ldr	r3, [pc, #572]	; (80078e0 <UART_SetConfig+0x2cc>)
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d005      	beq.n	80076b4 <UART_SetConfig+0xa0>
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b8d      	ldr	r3, [pc, #564]	; (80078e4 <UART_SetConfig+0x2d0>)
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d104      	bne.n	80076be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076b4:	f7ff fa7e 	bl	8006bb4 <HAL_RCC_GetPCLK2Freq>
 80076b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076bc:	e003      	b.n	80076c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076be:	f7ff fa65 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 80076c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d0:	f040 810c 	bne.w	80078ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80076e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80076e6:	4622      	mov	r2, r4
 80076e8:	462b      	mov	r3, r5
 80076ea:	1891      	adds	r1, r2, r2
 80076ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80076ee:	415b      	adcs	r3, r3
 80076f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076f6:	4621      	mov	r1, r4
 80076f8:	eb12 0801 	adds.w	r8, r2, r1
 80076fc:	4629      	mov	r1, r5
 80076fe:	eb43 0901 	adc.w	r9, r3, r1
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800770e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007716:	4690      	mov	r8, r2
 8007718:	4699      	mov	r9, r3
 800771a:	4623      	mov	r3, r4
 800771c:	eb18 0303 	adds.w	r3, r8, r3
 8007720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007724:	462b      	mov	r3, r5
 8007726:	eb49 0303 	adc.w	r3, r9, r3
 800772a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800773a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800773e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007742:	460b      	mov	r3, r1
 8007744:	18db      	adds	r3, r3, r3
 8007746:	653b      	str	r3, [r7, #80]	; 0x50
 8007748:	4613      	mov	r3, r2
 800774a:	eb42 0303 	adc.w	r3, r2, r3
 800774e:	657b      	str	r3, [r7, #84]	; 0x54
 8007750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007754:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007758:	f7f8 fd92 	bl	8000280 <__aeabi_uldivmod>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4b61      	ldr	r3, [pc, #388]	; (80078e8 <UART_SetConfig+0x2d4>)
 8007762:	fba3 2302 	umull	r2, r3, r3, r2
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	011c      	lsls	r4, r3, #4
 800776a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800776e:	2200      	movs	r2, #0
 8007770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007774:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007778:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800777c:	4642      	mov	r2, r8
 800777e:	464b      	mov	r3, r9
 8007780:	1891      	adds	r1, r2, r2
 8007782:	64b9      	str	r1, [r7, #72]	; 0x48
 8007784:	415b      	adcs	r3, r3
 8007786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007788:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800778c:	4641      	mov	r1, r8
 800778e:	eb12 0a01 	adds.w	sl, r2, r1
 8007792:	4649      	mov	r1, r9
 8007794:	eb43 0b01 	adc.w	fp, r3, r1
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077ac:	4692      	mov	sl, r2
 80077ae:	469b      	mov	fp, r3
 80077b0:	4643      	mov	r3, r8
 80077b2:	eb1a 0303 	adds.w	r3, sl, r3
 80077b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077ba:	464b      	mov	r3, r9
 80077bc:	eb4b 0303 	adc.w	r3, fp, r3
 80077c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077d8:	460b      	mov	r3, r1
 80077da:	18db      	adds	r3, r3, r3
 80077dc:	643b      	str	r3, [r7, #64]	; 0x40
 80077de:	4613      	mov	r3, r2
 80077e0:	eb42 0303 	adc.w	r3, r2, r3
 80077e4:	647b      	str	r3, [r7, #68]	; 0x44
 80077e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077ee:	f7f8 fd47 	bl	8000280 <__aeabi_uldivmod>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	4b3b      	ldr	r3, [pc, #236]	; (80078e8 <UART_SetConfig+0x2d4>)
 80077fa:	fba3 2301 	umull	r2, r3, r3, r1
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	2264      	movs	r2, #100	; 0x64
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	1acb      	subs	r3, r1, r3
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800780e:	4b36      	ldr	r3, [pc, #216]	; (80078e8 <UART_SetConfig+0x2d4>)
 8007810:	fba3 2302 	umull	r2, r3, r3, r2
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800781c:	441c      	add	r4, r3
 800781e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007822:	2200      	movs	r2, #0
 8007824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007828:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800782c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	1891      	adds	r1, r2, r2
 8007836:	63b9      	str	r1, [r7, #56]	; 0x38
 8007838:	415b      	adcs	r3, r3
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800783c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007840:	4641      	mov	r1, r8
 8007842:	1851      	adds	r1, r2, r1
 8007844:	6339      	str	r1, [r7, #48]	; 0x30
 8007846:	4649      	mov	r1, r9
 8007848:	414b      	adcs	r3, r1
 800784a:	637b      	str	r3, [r7, #52]	; 0x34
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007858:	4659      	mov	r1, fp
 800785a:	00cb      	lsls	r3, r1, #3
 800785c:	4651      	mov	r1, sl
 800785e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007862:	4651      	mov	r1, sl
 8007864:	00ca      	lsls	r2, r1, #3
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	4603      	mov	r3, r0
 800786c:	4642      	mov	r2, r8
 800786e:	189b      	adds	r3, r3, r2
 8007870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007874:	464b      	mov	r3, r9
 8007876:	460a      	mov	r2, r1
 8007878:	eb42 0303 	adc.w	r3, r2, r3
 800787c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800788c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007890:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007894:	460b      	mov	r3, r1
 8007896:	18db      	adds	r3, r3, r3
 8007898:	62bb      	str	r3, [r7, #40]	; 0x28
 800789a:	4613      	mov	r3, r2
 800789c:	eb42 0303 	adc.w	r3, r2, r3
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078aa:	f7f8 fce9 	bl	8000280 <__aeabi_uldivmod>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <UART_SetConfig+0x2d4>)
 80078b4:	fba3 1302 	umull	r1, r3, r3, r2
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	2164      	movs	r1, #100	; 0x64
 80078bc:	fb01 f303 	mul.w	r3, r1, r3
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	3332      	adds	r3, #50	; 0x32
 80078c6:	4a08      	ldr	r2, [pc, #32]	; (80078e8 <UART_SetConfig+0x2d4>)
 80078c8:	fba2 2303 	umull	r2, r3, r2, r3
 80078cc:	095b      	lsrs	r3, r3, #5
 80078ce:	f003 0207 	and.w	r2, r3, #7
 80078d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4422      	add	r2, r4
 80078da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078dc:	e105      	b.n	8007aea <UART_SetConfig+0x4d6>
 80078de:	bf00      	nop
 80078e0:	40011000 	.word	0x40011000
 80078e4:	40011400 	.word	0x40011400
 80078e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078fe:	4642      	mov	r2, r8
 8007900:	464b      	mov	r3, r9
 8007902:	1891      	adds	r1, r2, r2
 8007904:	6239      	str	r1, [r7, #32]
 8007906:	415b      	adcs	r3, r3
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
 800790a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800790e:	4641      	mov	r1, r8
 8007910:	1854      	adds	r4, r2, r1
 8007912:	4649      	mov	r1, r9
 8007914:	eb43 0501 	adc.w	r5, r3, r1
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	f04f 0300 	mov.w	r3, #0
 8007920:	00eb      	lsls	r3, r5, #3
 8007922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007926:	00e2      	lsls	r2, r4, #3
 8007928:	4614      	mov	r4, r2
 800792a:	461d      	mov	r5, r3
 800792c:	4643      	mov	r3, r8
 800792e:	18e3      	adds	r3, r4, r3
 8007930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007934:	464b      	mov	r3, r9
 8007936:	eb45 0303 	adc.w	r3, r5, r3
 800793a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800793e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800794a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800795a:	4629      	mov	r1, r5
 800795c:	008b      	lsls	r3, r1, #2
 800795e:	4621      	mov	r1, r4
 8007960:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007964:	4621      	mov	r1, r4
 8007966:	008a      	lsls	r2, r1, #2
 8007968:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800796c:	f7f8 fc88 	bl	8000280 <__aeabi_uldivmod>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4b60      	ldr	r3, [pc, #384]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007976:	fba3 2302 	umull	r2, r3, r3, r2
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	011c      	lsls	r4, r3, #4
 800797e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007982:	2200      	movs	r2, #0
 8007984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007988:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800798c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007990:	4642      	mov	r2, r8
 8007992:	464b      	mov	r3, r9
 8007994:	1891      	adds	r1, r2, r2
 8007996:	61b9      	str	r1, [r7, #24]
 8007998:	415b      	adcs	r3, r3
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079a0:	4641      	mov	r1, r8
 80079a2:	1851      	adds	r1, r2, r1
 80079a4:	6139      	str	r1, [r7, #16]
 80079a6:	4649      	mov	r1, r9
 80079a8:	414b      	adcs	r3, r1
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079b8:	4659      	mov	r1, fp
 80079ba:	00cb      	lsls	r3, r1, #3
 80079bc:	4651      	mov	r1, sl
 80079be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079c2:	4651      	mov	r1, sl
 80079c4:	00ca      	lsls	r2, r1, #3
 80079c6:	4610      	mov	r0, r2
 80079c8:	4619      	mov	r1, r3
 80079ca:	4603      	mov	r3, r0
 80079cc:	4642      	mov	r2, r8
 80079ce:	189b      	adds	r3, r3, r2
 80079d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079d4:	464b      	mov	r3, r9
 80079d6:	460a      	mov	r2, r1
 80079d8:	eb42 0303 	adc.w	r3, r2, r3
 80079dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80079ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079f8:	4649      	mov	r1, r9
 80079fa:	008b      	lsls	r3, r1, #2
 80079fc:	4641      	mov	r1, r8
 80079fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a02:	4641      	mov	r1, r8
 8007a04:	008a      	lsls	r2, r1, #2
 8007a06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a0a:	f7f8 fc39 	bl	8000280 <__aeabi_uldivmod>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4b39      	ldr	r3, [pc, #228]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007a14:	fba3 1302 	umull	r1, r3, r3, r2
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	2164      	movs	r1, #100	; 0x64
 8007a1c:	fb01 f303 	mul.w	r3, r1, r3
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	3332      	adds	r3, #50	; 0x32
 8007a26:	4a34      	ldr	r2, [pc, #208]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007a28:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a32:	441c      	add	r4, r3
 8007a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a38:	2200      	movs	r2, #0
 8007a3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007a3c:	677a      	str	r2, [r7, #116]	; 0x74
 8007a3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a42:	4642      	mov	r2, r8
 8007a44:	464b      	mov	r3, r9
 8007a46:	1891      	adds	r1, r2, r2
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	415b      	adcs	r3, r3
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a52:	4641      	mov	r1, r8
 8007a54:	1851      	adds	r1, r2, r1
 8007a56:	6039      	str	r1, [r7, #0]
 8007a58:	4649      	mov	r1, r9
 8007a5a:	414b      	adcs	r3, r1
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	f04f 0200 	mov.w	r2, #0
 8007a62:	f04f 0300 	mov.w	r3, #0
 8007a66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a6a:	4659      	mov	r1, fp
 8007a6c:	00cb      	lsls	r3, r1, #3
 8007a6e:	4651      	mov	r1, sl
 8007a70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a74:	4651      	mov	r1, sl
 8007a76:	00ca      	lsls	r2, r1, #3
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	4642      	mov	r2, r8
 8007a80:	189b      	adds	r3, r3, r2
 8007a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a84:	464b      	mov	r3, r9
 8007a86:	460a      	mov	r2, r1
 8007a88:	eb42 0303 	adc.w	r3, r2, r3
 8007a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	663b      	str	r3, [r7, #96]	; 0x60
 8007a98:	667a      	str	r2, [r7, #100]	; 0x64
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007aa6:	4649      	mov	r1, r9
 8007aa8:	008b      	lsls	r3, r1, #2
 8007aaa:	4641      	mov	r1, r8
 8007aac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	008a      	lsls	r2, r1, #2
 8007ab4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ab8:	f7f8 fbe2 	bl	8000280 <__aeabi_uldivmod>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ac6:	095b      	lsrs	r3, r3, #5
 8007ac8:	2164      	movs	r1, #100	; 0x64
 8007aca:	fb01 f303 	mul.w	r3, r1, r3
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	3332      	adds	r3, #50	; 0x32
 8007ad4:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ada:	095b      	lsrs	r3, r3, #5
 8007adc:	f003 020f 	and.w	r2, r3, #15
 8007ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4422      	add	r2, r4
 8007ae8:	609a      	str	r2, [r3, #8]
}
 8007aea:	bf00      	nop
 8007aec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007af0:	46bd      	mov	sp, r7
 8007af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007af6:	bf00      	nop
 8007af8:	51eb851f 	.word	0x51eb851f

08007afc <__errno>:
 8007afc:	4b01      	ldr	r3, [pc, #4]	; (8007b04 <__errno+0x8>)
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000050 	.word	0x20000050

08007b08 <__libc_init_array>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	4d0d      	ldr	r5, [pc, #52]	; (8007b40 <__libc_init_array+0x38>)
 8007b0c:	4c0d      	ldr	r4, [pc, #52]	; (8007b44 <__libc_init_array+0x3c>)
 8007b0e:	1b64      	subs	r4, r4, r5
 8007b10:	10a4      	asrs	r4, r4, #2
 8007b12:	2600      	movs	r6, #0
 8007b14:	42a6      	cmp	r6, r4
 8007b16:	d109      	bne.n	8007b2c <__libc_init_array+0x24>
 8007b18:	4d0b      	ldr	r5, [pc, #44]	; (8007b48 <__libc_init_array+0x40>)
 8007b1a:	4c0c      	ldr	r4, [pc, #48]	; (8007b4c <__libc_init_array+0x44>)
 8007b1c:	f001 f890 	bl	8008c40 <_init>
 8007b20:	1b64      	subs	r4, r4, r5
 8007b22:	10a4      	asrs	r4, r4, #2
 8007b24:	2600      	movs	r6, #0
 8007b26:	42a6      	cmp	r6, r4
 8007b28:	d105      	bne.n	8007b36 <__libc_init_array+0x2e>
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b30:	4798      	blx	r3
 8007b32:	3601      	adds	r6, #1
 8007b34:	e7ee      	b.n	8007b14 <__libc_init_array+0xc>
 8007b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3a:	4798      	blx	r3
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	e7f2      	b.n	8007b26 <__libc_init_array+0x1e>
 8007b40:	0801e72c 	.word	0x0801e72c
 8007b44:	0801e72c 	.word	0x0801e72c
 8007b48:	0801e72c 	.word	0x0801e72c
 8007b4c:	0801e730 	.word	0x0801e730

08007b50 <memcpy>:
 8007b50:	440a      	add	r2, r1
 8007b52:	4291      	cmp	r1, r2
 8007b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b58:	d100      	bne.n	8007b5c <memcpy+0xc>
 8007b5a:	4770      	bx	lr
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b66:	4291      	cmp	r1, r2
 8007b68:	d1f9      	bne.n	8007b5e <memcpy+0xe>
 8007b6a:	bd10      	pop	{r4, pc}

08007b6c <memset>:
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d100      	bne.n	8007b76 <memset+0xa>
 8007b74:	4770      	bx	lr
 8007b76:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7a:	e7f9      	b.n	8007b70 <memset+0x4>

08007b7c <iprintf>:
 8007b7c:	b40f      	push	{r0, r1, r2, r3}
 8007b7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <iprintf+0x2c>)
 8007b80:	b513      	push	{r0, r1, r4, lr}
 8007b82:	681c      	ldr	r4, [r3, #0]
 8007b84:	b124      	cbz	r4, 8007b90 <iprintf+0x14>
 8007b86:	69a3      	ldr	r3, [r4, #24]
 8007b88:	b913      	cbnz	r3, 8007b90 <iprintf+0x14>
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 fa74 	bl	8008078 <__sinit>
 8007b90:	ab05      	add	r3, sp, #20
 8007b92:	9a04      	ldr	r2, [sp, #16]
 8007b94:	68a1      	ldr	r1, [r4, #8]
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 fc7d 	bl	8008498 <_vfiprintf_r>
 8007b9e:	b002      	add	sp, #8
 8007ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ba4:	b004      	add	sp, #16
 8007ba6:	4770      	bx	lr
 8007ba8:	20000050 	.word	0x20000050

08007bac <putchar>:
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <putchar+0x28>)
 8007bae:	b513      	push	{r0, r1, r4, lr}
 8007bb0:	681c      	ldr	r4, [r3, #0]
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	b134      	cbz	r4, 8007bc4 <putchar+0x18>
 8007bb6:	69a3      	ldr	r3, [r4, #24]
 8007bb8:	b923      	cbnz	r3, 8007bc4 <putchar+0x18>
 8007bba:	9001      	str	r0, [sp, #4]
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 fa5b 	bl	8008078 <__sinit>
 8007bc2:	9901      	ldr	r1, [sp, #4]
 8007bc4:	68a2      	ldr	r2, [r4, #8]
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	b002      	add	sp, #8
 8007bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bce:	f000 bf27 	b.w	8008a20 <_putc_r>
 8007bd2:	bf00      	nop
 8007bd4:	20000050 	.word	0x20000050

08007bd8 <_puts_r>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	460e      	mov	r6, r1
 8007bdc:	4605      	mov	r5, r0
 8007bde:	b118      	cbz	r0, 8007be8 <_puts_r+0x10>
 8007be0:	6983      	ldr	r3, [r0, #24]
 8007be2:	b90b      	cbnz	r3, 8007be8 <_puts_r+0x10>
 8007be4:	f000 fa48 	bl	8008078 <__sinit>
 8007be8:	69ab      	ldr	r3, [r5, #24]
 8007bea:	68ac      	ldr	r4, [r5, #8]
 8007bec:	b913      	cbnz	r3, 8007bf4 <_puts_r+0x1c>
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fa42 	bl	8008078 <__sinit>
 8007bf4:	4b2c      	ldr	r3, [pc, #176]	; (8007ca8 <_puts_r+0xd0>)
 8007bf6:	429c      	cmp	r4, r3
 8007bf8:	d120      	bne.n	8007c3c <_puts_r+0x64>
 8007bfa:	686c      	ldr	r4, [r5, #4]
 8007bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bfe:	07db      	lsls	r3, r3, #31
 8007c00:	d405      	bmi.n	8007c0e <_puts_r+0x36>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	0598      	lsls	r0, r3, #22
 8007c06:	d402      	bmi.n	8007c0e <_puts_r+0x36>
 8007c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0a:	f000 fad3 	bl	80081b4 <__retarget_lock_acquire_recursive>
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	0719      	lsls	r1, r3, #28
 8007c12:	d51d      	bpl.n	8007c50 <_puts_r+0x78>
 8007c14:	6923      	ldr	r3, [r4, #16]
 8007c16:	b1db      	cbz	r3, 8007c50 <_puts_r+0x78>
 8007c18:	3e01      	subs	r6, #1
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c20:	3b01      	subs	r3, #1
 8007c22:	60a3      	str	r3, [r4, #8]
 8007c24:	bb39      	cbnz	r1, 8007c76 <_puts_r+0x9e>
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	da38      	bge.n	8007c9c <_puts_r+0xc4>
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	210a      	movs	r1, #10
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f000 f848 	bl	8007cc4 <__swbuf_r>
 8007c34:	3001      	adds	r0, #1
 8007c36:	d011      	beq.n	8007c5c <_puts_r+0x84>
 8007c38:	250a      	movs	r5, #10
 8007c3a:	e011      	b.n	8007c60 <_puts_r+0x88>
 8007c3c:	4b1b      	ldr	r3, [pc, #108]	; (8007cac <_puts_r+0xd4>)
 8007c3e:	429c      	cmp	r4, r3
 8007c40:	d101      	bne.n	8007c46 <_puts_r+0x6e>
 8007c42:	68ac      	ldr	r4, [r5, #8]
 8007c44:	e7da      	b.n	8007bfc <_puts_r+0x24>
 8007c46:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <_puts_r+0xd8>)
 8007c48:	429c      	cmp	r4, r3
 8007c4a:	bf08      	it	eq
 8007c4c:	68ec      	ldreq	r4, [r5, #12]
 8007c4e:	e7d5      	b.n	8007bfc <_puts_r+0x24>
 8007c50:	4621      	mov	r1, r4
 8007c52:	4628      	mov	r0, r5
 8007c54:	f000 f888 	bl	8007d68 <__swsetup_r>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d0dd      	beq.n	8007c18 <_puts_r+0x40>
 8007c5c:	f04f 35ff 	mov.w	r5, #4294967295
 8007c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c62:	07da      	lsls	r2, r3, #31
 8007c64:	d405      	bmi.n	8007c72 <_puts_r+0x9a>
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	059b      	lsls	r3, r3, #22
 8007c6a:	d402      	bmi.n	8007c72 <_puts_r+0x9a>
 8007c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c6e:	f000 faa2 	bl	80081b6 <__retarget_lock_release_recursive>
 8007c72:	4628      	mov	r0, r5
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	da04      	bge.n	8007c84 <_puts_r+0xac>
 8007c7a:	69a2      	ldr	r2, [r4, #24]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	dc06      	bgt.n	8007c8e <_puts_r+0xb6>
 8007c80:	290a      	cmp	r1, #10
 8007c82:	d004      	beq.n	8007c8e <_puts_r+0xb6>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	7019      	strb	r1, [r3, #0]
 8007c8c:	e7c5      	b.n	8007c1a <_puts_r+0x42>
 8007c8e:	4622      	mov	r2, r4
 8007c90:	4628      	mov	r0, r5
 8007c92:	f000 f817 	bl	8007cc4 <__swbuf_r>
 8007c96:	3001      	adds	r0, #1
 8007c98:	d1bf      	bne.n	8007c1a <_puts_r+0x42>
 8007c9a:	e7df      	b.n	8007c5c <_puts_r+0x84>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	250a      	movs	r5, #10
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	6022      	str	r2, [r4, #0]
 8007ca4:	701d      	strb	r5, [r3, #0]
 8007ca6:	e7db      	b.n	8007c60 <_puts_r+0x88>
 8007ca8:	0801e6b0 	.word	0x0801e6b0
 8007cac:	0801e6d0 	.word	0x0801e6d0
 8007cb0:	0801e690 	.word	0x0801e690

08007cb4 <puts>:
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <puts+0xc>)
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	f7ff bf8d 	b.w	8007bd8 <_puts_r>
 8007cbe:	bf00      	nop
 8007cc0:	20000050 	.word	0x20000050

08007cc4 <__swbuf_r>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	460e      	mov	r6, r1
 8007cc8:	4614      	mov	r4, r2
 8007cca:	4605      	mov	r5, r0
 8007ccc:	b118      	cbz	r0, 8007cd6 <__swbuf_r+0x12>
 8007cce:	6983      	ldr	r3, [r0, #24]
 8007cd0:	b90b      	cbnz	r3, 8007cd6 <__swbuf_r+0x12>
 8007cd2:	f000 f9d1 	bl	8008078 <__sinit>
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <__swbuf_r+0x98>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d12b      	bne.n	8007d34 <__swbuf_r+0x70>
 8007cdc:	686c      	ldr	r4, [r5, #4]
 8007cde:	69a3      	ldr	r3, [r4, #24]
 8007ce0:	60a3      	str	r3, [r4, #8]
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	071a      	lsls	r2, r3, #28
 8007ce6:	d52f      	bpl.n	8007d48 <__swbuf_r+0x84>
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	b36b      	cbz	r3, 8007d48 <__swbuf_r+0x84>
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	6820      	ldr	r0, [r4, #0]
 8007cf0:	1ac0      	subs	r0, r0, r3
 8007cf2:	6963      	ldr	r3, [r4, #20]
 8007cf4:	b2f6      	uxtb	r6, r6
 8007cf6:	4283      	cmp	r3, r0
 8007cf8:	4637      	mov	r7, r6
 8007cfa:	dc04      	bgt.n	8007d06 <__swbuf_r+0x42>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 f926 	bl	8007f50 <_fflush_r>
 8007d04:	bb30      	cbnz	r0, 8007d54 <__swbuf_r+0x90>
 8007d06:	68a3      	ldr	r3, [r4, #8]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	60a3      	str	r3, [r4, #8]
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	6022      	str	r2, [r4, #0]
 8007d12:	701e      	strb	r6, [r3, #0]
 8007d14:	6963      	ldr	r3, [r4, #20]
 8007d16:	3001      	adds	r0, #1
 8007d18:	4283      	cmp	r3, r0
 8007d1a:	d004      	beq.n	8007d26 <__swbuf_r+0x62>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	07db      	lsls	r3, r3, #31
 8007d20:	d506      	bpl.n	8007d30 <__swbuf_r+0x6c>
 8007d22:	2e0a      	cmp	r6, #10
 8007d24:	d104      	bne.n	8007d30 <__swbuf_r+0x6c>
 8007d26:	4621      	mov	r1, r4
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f000 f911 	bl	8007f50 <_fflush_r>
 8007d2e:	b988      	cbnz	r0, 8007d54 <__swbuf_r+0x90>
 8007d30:	4638      	mov	r0, r7
 8007d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d34:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <__swbuf_r+0x9c>)
 8007d36:	429c      	cmp	r4, r3
 8007d38:	d101      	bne.n	8007d3e <__swbuf_r+0x7a>
 8007d3a:	68ac      	ldr	r4, [r5, #8]
 8007d3c:	e7cf      	b.n	8007cde <__swbuf_r+0x1a>
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <__swbuf_r+0xa0>)
 8007d40:	429c      	cmp	r4, r3
 8007d42:	bf08      	it	eq
 8007d44:	68ec      	ldreq	r4, [r5, #12]
 8007d46:	e7ca      	b.n	8007cde <__swbuf_r+0x1a>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 f80c 	bl	8007d68 <__swsetup_r>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d0cb      	beq.n	8007cec <__swbuf_r+0x28>
 8007d54:	f04f 37ff 	mov.w	r7, #4294967295
 8007d58:	e7ea      	b.n	8007d30 <__swbuf_r+0x6c>
 8007d5a:	bf00      	nop
 8007d5c:	0801e6b0 	.word	0x0801e6b0
 8007d60:	0801e6d0 	.word	0x0801e6d0
 8007d64:	0801e690 	.word	0x0801e690

08007d68 <__swsetup_r>:
 8007d68:	4b32      	ldr	r3, [pc, #200]	; (8007e34 <__swsetup_r+0xcc>)
 8007d6a:	b570      	push	{r4, r5, r6, lr}
 8007d6c:	681d      	ldr	r5, [r3, #0]
 8007d6e:	4606      	mov	r6, r0
 8007d70:	460c      	mov	r4, r1
 8007d72:	b125      	cbz	r5, 8007d7e <__swsetup_r+0x16>
 8007d74:	69ab      	ldr	r3, [r5, #24]
 8007d76:	b913      	cbnz	r3, 8007d7e <__swsetup_r+0x16>
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 f97d 	bl	8008078 <__sinit>
 8007d7e:	4b2e      	ldr	r3, [pc, #184]	; (8007e38 <__swsetup_r+0xd0>)
 8007d80:	429c      	cmp	r4, r3
 8007d82:	d10f      	bne.n	8007da4 <__swsetup_r+0x3c>
 8007d84:	686c      	ldr	r4, [r5, #4]
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d8c:	0719      	lsls	r1, r3, #28
 8007d8e:	d42c      	bmi.n	8007dea <__swsetup_r+0x82>
 8007d90:	06dd      	lsls	r5, r3, #27
 8007d92:	d411      	bmi.n	8007db8 <__swsetup_r+0x50>
 8007d94:	2309      	movs	r3, #9
 8007d96:	6033      	str	r3, [r6, #0]
 8007d98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007da2:	e03e      	b.n	8007e22 <__swsetup_r+0xba>
 8007da4:	4b25      	ldr	r3, [pc, #148]	; (8007e3c <__swsetup_r+0xd4>)
 8007da6:	429c      	cmp	r4, r3
 8007da8:	d101      	bne.n	8007dae <__swsetup_r+0x46>
 8007daa:	68ac      	ldr	r4, [r5, #8]
 8007dac:	e7eb      	b.n	8007d86 <__swsetup_r+0x1e>
 8007dae:	4b24      	ldr	r3, [pc, #144]	; (8007e40 <__swsetup_r+0xd8>)
 8007db0:	429c      	cmp	r4, r3
 8007db2:	bf08      	it	eq
 8007db4:	68ec      	ldreq	r4, [r5, #12]
 8007db6:	e7e6      	b.n	8007d86 <__swsetup_r+0x1e>
 8007db8:	0758      	lsls	r0, r3, #29
 8007dba:	d512      	bpl.n	8007de2 <__swsetup_r+0x7a>
 8007dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dbe:	b141      	cbz	r1, 8007dd2 <__swsetup_r+0x6a>
 8007dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc4:	4299      	cmp	r1, r3
 8007dc6:	d002      	beq.n	8007dce <__swsetup_r+0x66>
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 fa5b 	bl	8008284 <_free_r>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6363      	str	r3, [r4, #52]	; 0x34
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	6063      	str	r3, [r4, #4]
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	f043 0308 	orr.w	r3, r3, #8
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	b94b      	cbnz	r3, 8007e02 <__swsetup_r+0x9a>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df8:	d003      	beq.n	8007e02 <__swsetup_r+0x9a>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f000 fa01 	bl	8008204 <__smakebuf_r>
 8007e02:	89a0      	ldrh	r0, [r4, #12]
 8007e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e08:	f010 0301 	ands.w	r3, r0, #1
 8007e0c:	d00a      	beq.n	8007e24 <__swsetup_r+0xbc>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60a3      	str	r3, [r4, #8]
 8007e12:	6963      	ldr	r3, [r4, #20]
 8007e14:	425b      	negs	r3, r3
 8007e16:	61a3      	str	r3, [r4, #24]
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	b943      	cbnz	r3, 8007e2e <__swsetup_r+0xc6>
 8007e1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e20:	d1ba      	bne.n	8007d98 <__swsetup_r+0x30>
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	0781      	lsls	r1, r0, #30
 8007e26:	bf58      	it	pl
 8007e28:	6963      	ldrpl	r3, [r4, #20]
 8007e2a:	60a3      	str	r3, [r4, #8]
 8007e2c:	e7f4      	b.n	8007e18 <__swsetup_r+0xb0>
 8007e2e:	2000      	movs	r0, #0
 8007e30:	e7f7      	b.n	8007e22 <__swsetup_r+0xba>
 8007e32:	bf00      	nop
 8007e34:	20000050 	.word	0x20000050
 8007e38:	0801e6b0 	.word	0x0801e6b0
 8007e3c:	0801e6d0 	.word	0x0801e6d0
 8007e40:	0801e690 	.word	0x0801e690

08007e44 <__sflush_r>:
 8007e44:	898a      	ldrh	r2, [r1, #12]
 8007e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	0710      	lsls	r0, r2, #28
 8007e4e:	460c      	mov	r4, r1
 8007e50:	d458      	bmi.n	8007f04 <__sflush_r+0xc0>
 8007e52:	684b      	ldr	r3, [r1, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dc05      	bgt.n	8007e64 <__sflush_r+0x20>
 8007e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dc02      	bgt.n	8007e64 <__sflush_r+0x20>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e66:	2e00      	cmp	r6, #0
 8007e68:	d0f9      	beq.n	8007e5e <__sflush_r+0x1a>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e70:	682f      	ldr	r7, [r5, #0]
 8007e72:	602b      	str	r3, [r5, #0]
 8007e74:	d032      	beq.n	8007edc <__sflush_r+0x98>
 8007e76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	075a      	lsls	r2, r3, #29
 8007e7c:	d505      	bpl.n	8007e8a <__sflush_r+0x46>
 8007e7e:	6863      	ldr	r3, [r4, #4]
 8007e80:	1ac0      	subs	r0, r0, r3
 8007e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e84:	b10b      	cbz	r3, 8007e8a <__sflush_r+0x46>
 8007e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e88:	1ac0      	subs	r0, r0, r3
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e90:	6a21      	ldr	r1, [r4, #32]
 8007e92:	4628      	mov	r0, r5
 8007e94:	47b0      	blx	r6
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	d106      	bne.n	8007eaa <__sflush_r+0x66>
 8007e9c:	6829      	ldr	r1, [r5, #0]
 8007e9e:	291d      	cmp	r1, #29
 8007ea0:	d82c      	bhi.n	8007efc <__sflush_r+0xb8>
 8007ea2:	4a2a      	ldr	r2, [pc, #168]	; (8007f4c <__sflush_r+0x108>)
 8007ea4:	40ca      	lsrs	r2, r1
 8007ea6:	07d6      	lsls	r6, r2, #31
 8007ea8:	d528      	bpl.n	8007efc <__sflush_r+0xb8>
 8007eaa:	2200      	movs	r2, #0
 8007eac:	6062      	str	r2, [r4, #4]
 8007eae:	04d9      	lsls	r1, r3, #19
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	6022      	str	r2, [r4, #0]
 8007eb4:	d504      	bpl.n	8007ec0 <__sflush_r+0x7c>
 8007eb6:	1c42      	adds	r2, r0, #1
 8007eb8:	d101      	bne.n	8007ebe <__sflush_r+0x7a>
 8007eba:	682b      	ldr	r3, [r5, #0]
 8007ebc:	b903      	cbnz	r3, 8007ec0 <__sflush_r+0x7c>
 8007ebe:	6560      	str	r0, [r4, #84]	; 0x54
 8007ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ec2:	602f      	str	r7, [r5, #0]
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	d0ca      	beq.n	8007e5e <__sflush_r+0x1a>
 8007ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	d002      	beq.n	8007ed6 <__sflush_r+0x92>
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f000 f9d7 	bl	8008284 <_free_r>
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8007eda:	e7c1      	b.n	8007e60 <__sflush_r+0x1c>
 8007edc:	6a21      	ldr	r1, [r4, #32]
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b0      	blx	r6
 8007ee4:	1c41      	adds	r1, r0, #1
 8007ee6:	d1c7      	bne.n	8007e78 <__sflush_r+0x34>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0c4      	beq.n	8007e78 <__sflush_r+0x34>
 8007eee:	2b1d      	cmp	r3, #29
 8007ef0:	d001      	beq.n	8007ef6 <__sflush_r+0xb2>
 8007ef2:	2b16      	cmp	r3, #22
 8007ef4:	d101      	bne.n	8007efa <__sflush_r+0xb6>
 8007ef6:	602f      	str	r7, [r5, #0]
 8007ef8:	e7b1      	b.n	8007e5e <__sflush_r+0x1a>
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	e7ad      	b.n	8007e60 <__sflush_r+0x1c>
 8007f04:	690f      	ldr	r7, [r1, #16]
 8007f06:	2f00      	cmp	r7, #0
 8007f08:	d0a9      	beq.n	8007e5e <__sflush_r+0x1a>
 8007f0a:	0793      	lsls	r3, r2, #30
 8007f0c:	680e      	ldr	r6, [r1, #0]
 8007f0e:	bf08      	it	eq
 8007f10:	694b      	ldreq	r3, [r1, #20]
 8007f12:	600f      	str	r7, [r1, #0]
 8007f14:	bf18      	it	ne
 8007f16:	2300      	movne	r3, #0
 8007f18:	eba6 0807 	sub.w	r8, r6, r7
 8007f1c:	608b      	str	r3, [r1, #8]
 8007f1e:	f1b8 0f00 	cmp.w	r8, #0
 8007f22:	dd9c      	ble.n	8007e5e <__sflush_r+0x1a>
 8007f24:	6a21      	ldr	r1, [r4, #32]
 8007f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f28:	4643      	mov	r3, r8
 8007f2a:	463a      	mov	r2, r7
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b0      	blx	r6
 8007f30:	2800      	cmp	r0, #0
 8007f32:	dc06      	bgt.n	8007f42 <__sflush_r+0xfe>
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f3a:	81a3      	strh	r3, [r4, #12]
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	e78e      	b.n	8007e60 <__sflush_r+0x1c>
 8007f42:	4407      	add	r7, r0
 8007f44:	eba8 0800 	sub.w	r8, r8, r0
 8007f48:	e7e9      	b.n	8007f1e <__sflush_r+0xda>
 8007f4a:	bf00      	nop
 8007f4c:	20400001 	.word	0x20400001

08007f50 <_fflush_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	690b      	ldr	r3, [r1, #16]
 8007f54:	4605      	mov	r5, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	b913      	cbnz	r3, 8007f60 <_fflush_r+0x10>
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	b118      	cbz	r0, 8007f6a <_fflush_r+0x1a>
 8007f62:	6983      	ldr	r3, [r0, #24]
 8007f64:	b90b      	cbnz	r3, 8007f6a <_fflush_r+0x1a>
 8007f66:	f000 f887 	bl	8008078 <__sinit>
 8007f6a:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <_fflush_r+0x6c>)
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	d11b      	bne.n	8007fa8 <_fflush_r+0x58>
 8007f70:	686c      	ldr	r4, [r5, #4]
 8007f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0ef      	beq.n	8007f5a <_fflush_r+0xa>
 8007f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f7c:	07d0      	lsls	r0, r2, #31
 8007f7e:	d404      	bmi.n	8007f8a <_fflush_r+0x3a>
 8007f80:	0599      	lsls	r1, r3, #22
 8007f82:	d402      	bmi.n	8007f8a <_fflush_r+0x3a>
 8007f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f86:	f000 f915 	bl	80081b4 <__retarget_lock_acquire_recursive>
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f7ff ff59 	bl	8007e44 <__sflush_r>
 8007f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f94:	07da      	lsls	r2, r3, #31
 8007f96:	4605      	mov	r5, r0
 8007f98:	d4e0      	bmi.n	8007f5c <_fflush_r+0xc>
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	059b      	lsls	r3, r3, #22
 8007f9e:	d4dd      	bmi.n	8007f5c <_fflush_r+0xc>
 8007fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fa2:	f000 f908 	bl	80081b6 <__retarget_lock_release_recursive>
 8007fa6:	e7d9      	b.n	8007f5c <_fflush_r+0xc>
 8007fa8:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <_fflush_r+0x70>)
 8007faa:	429c      	cmp	r4, r3
 8007fac:	d101      	bne.n	8007fb2 <_fflush_r+0x62>
 8007fae:	68ac      	ldr	r4, [r5, #8]
 8007fb0:	e7df      	b.n	8007f72 <_fflush_r+0x22>
 8007fb2:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <_fflush_r+0x74>)
 8007fb4:	429c      	cmp	r4, r3
 8007fb6:	bf08      	it	eq
 8007fb8:	68ec      	ldreq	r4, [r5, #12]
 8007fba:	e7da      	b.n	8007f72 <_fflush_r+0x22>
 8007fbc:	0801e6b0 	.word	0x0801e6b0
 8007fc0:	0801e6d0 	.word	0x0801e6d0
 8007fc4:	0801e690 	.word	0x0801e690

08007fc8 <std>:
 8007fc8:	2300      	movs	r3, #0
 8007fca:	b510      	push	{r4, lr}
 8007fcc:	4604      	mov	r4, r0
 8007fce:	e9c0 3300 	strd	r3, r3, [r0]
 8007fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fd6:	6083      	str	r3, [r0, #8]
 8007fd8:	8181      	strh	r1, [r0, #12]
 8007fda:	6643      	str	r3, [r0, #100]	; 0x64
 8007fdc:	81c2      	strh	r2, [r0, #14]
 8007fde:	6183      	str	r3, [r0, #24]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	305c      	adds	r0, #92	; 0x5c
 8007fe6:	f7ff fdc1 	bl	8007b6c <memset>
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <std+0x38>)
 8007fec:	6263      	str	r3, [r4, #36]	; 0x24
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <std+0x3c>)
 8007ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ff2:	4b05      	ldr	r3, [pc, #20]	; (8008008 <std+0x40>)
 8007ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <std+0x44>)
 8007ff8:	6224      	str	r4, [r4, #32]
 8007ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	bf00      	nop
 8008000:	08008ad1 	.word	0x08008ad1
 8008004:	08008af3 	.word	0x08008af3
 8008008:	08008b2b 	.word	0x08008b2b
 800800c:	08008b4f 	.word	0x08008b4f

08008010 <_cleanup_r>:
 8008010:	4901      	ldr	r1, [pc, #4]	; (8008018 <_cleanup_r+0x8>)
 8008012:	f000 b8af 	b.w	8008174 <_fwalk_reent>
 8008016:	bf00      	nop
 8008018:	08007f51 	.word	0x08007f51

0800801c <__sfmoreglue>:
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	2268      	movs	r2, #104	; 0x68
 8008020:	1e4d      	subs	r5, r1, #1
 8008022:	4355      	muls	r5, r2
 8008024:	460e      	mov	r6, r1
 8008026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800802a:	f000 f997 	bl	800835c <_malloc_r>
 800802e:	4604      	mov	r4, r0
 8008030:	b140      	cbz	r0, 8008044 <__sfmoreglue+0x28>
 8008032:	2100      	movs	r1, #0
 8008034:	e9c0 1600 	strd	r1, r6, [r0]
 8008038:	300c      	adds	r0, #12
 800803a:	60a0      	str	r0, [r4, #8]
 800803c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008040:	f7ff fd94 	bl	8007b6c <memset>
 8008044:	4620      	mov	r0, r4
 8008046:	bd70      	pop	{r4, r5, r6, pc}

08008048 <__sfp_lock_acquire>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__sfp_lock_acquire+0x8>)
 800804a:	f000 b8b3 	b.w	80081b4 <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	200029b5 	.word	0x200029b5

08008054 <__sfp_lock_release>:
 8008054:	4801      	ldr	r0, [pc, #4]	; (800805c <__sfp_lock_release+0x8>)
 8008056:	f000 b8ae 	b.w	80081b6 <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	200029b5 	.word	0x200029b5

08008060 <__sinit_lock_acquire>:
 8008060:	4801      	ldr	r0, [pc, #4]	; (8008068 <__sinit_lock_acquire+0x8>)
 8008062:	f000 b8a7 	b.w	80081b4 <__retarget_lock_acquire_recursive>
 8008066:	bf00      	nop
 8008068:	200029b6 	.word	0x200029b6

0800806c <__sinit_lock_release>:
 800806c:	4801      	ldr	r0, [pc, #4]	; (8008074 <__sinit_lock_release+0x8>)
 800806e:	f000 b8a2 	b.w	80081b6 <__retarget_lock_release_recursive>
 8008072:	bf00      	nop
 8008074:	200029b6 	.word	0x200029b6

08008078 <__sinit>:
 8008078:	b510      	push	{r4, lr}
 800807a:	4604      	mov	r4, r0
 800807c:	f7ff fff0 	bl	8008060 <__sinit_lock_acquire>
 8008080:	69a3      	ldr	r3, [r4, #24]
 8008082:	b11b      	cbz	r3, 800808c <__sinit+0x14>
 8008084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008088:	f7ff bff0 	b.w	800806c <__sinit_lock_release>
 800808c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008090:	6523      	str	r3, [r4, #80]	; 0x50
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <__sinit+0x68>)
 8008094:	4a13      	ldr	r2, [pc, #76]	; (80080e4 <__sinit+0x6c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	62a2      	str	r2, [r4, #40]	; 0x28
 800809a:	42a3      	cmp	r3, r4
 800809c:	bf04      	itt	eq
 800809e:	2301      	moveq	r3, #1
 80080a0:	61a3      	streq	r3, [r4, #24]
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f820 	bl	80080e8 <__sfp>
 80080a8:	6060      	str	r0, [r4, #4]
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 f81c 	bl	80080e8 <__sfp>
 80080b0:	60a0      	str	r0, [r4, #8]
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 f818 	bl	80080e8 <__sfp>
 80080b8:	2200      	movs	r2, #0
 80080ba:	60e0      	str	r0, [r4, #12]
 80080bc:	2104      	movs	r1, #4
 80080be:	6860      	ldr	r0, [r4, #4]
 80080c0:	f7ff ff82 	bl	8007fc8 <std>
 80080c4:	68a0      	ldr	r0, [r4, #8]
 80080c6:	2201      	movs	r2, #1
 80080c8:	2109      	movs	r1, #9
 80080ca:	f7ff ff7d 	bl	8007fc8 <std>
 80080ce:	68e0      	ldr	r0, [r4, #12]
 80080d0:	2202      	movs	r2, #2
 80080d2:	2112      	movs	r1, #18
 80080d4:	f7ff ff78 	bl	8007fc8 <std>
 80080d8:	2301      	movs	r3, #1
 80080da:	61a3      	str	r3, [r4, #24]
 80080dc:	e7d2      	b.n	8008084 <__sinit+0xc>
 80080de:	bf00      	nop
 80080e0:	0801e68c 	.word	0x0801e68c
 80080e4:	08008011 	.word	0x08008011

080080e8 <__sfp>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	4607      	mov	r7, r0
 80080ec:	f7ff ffac 	bl	8008048 <__sfp_lock_acquire>
 80080f0:	4b1e      	ldr	r3, [pc, #120]	; (800816c <__sfp+0x84>)
 80080f2:	681e      	ldr	r6, [r3, #0]
 80080f4:	69b3      	ldr	r3, [r6, #24]
 80080f6:	b913      	cbnz	r3, 80080fe <__sfp+0x16>
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff ffbd 	bl	8008078 <__sinit>
 80080fe:	3648      	adds	r6, #72	; 0x48
 8008100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008104:	3b01      	subs	r3, #1
 8008106:	d503      	bpl.n	8008110 <__sfp+0x28>
 8008108:	6833      	ldr	r3, [r6, #0]
 800810a:	b30b      	cbz	r3, 8008150 <__sfp+0x68>
 800810c:	6836      	ldr	r6, [r6, #0]
 800810e:	e7f7      	b.n	8008100 <__sfp+0x18>
 8008110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008114:	b9d5      	cbnz	r5, 800814c <__sfp+0x64>
 8008116:	4b16      	ldr	r3, [pc, #88]	; (8008170 <__sfp+0x88>)
 8008118:	60e3      	str	r3, [r4, #12]
 800811a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800811e:	6665      	str	r5, [r4, #100]	; 0x64
 8008120:	f000 f847 	bl	80081b2 <__retarget_lock_init_recursive>
 8008124:	f7ff ff96 	bl	8008054 <__sfp_lock_release>
 8008128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800812c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008130:	6025      	str	r5, [r4, #0]
 8008132:	61a5      	str	r5, [r4, #24]
 8008134:	2208      	movs	r2, #8
 8008136:	4629      	mov	r1, r5
 8008138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800813c:	f7ff fd16 	bl	8007b6c <memset>
 8008140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008148:	4620      	mov	r0, r4
 800814a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800814c:	3468      	adds	r4, #104	; 0x68
 800814e:	e7d9      	b.n	8008104 <__sfp+0x1c>
 8008150:	2104      	movs	r1, #4
 8008152:	4638      	mov	r0, r7
 8008154:	f7ff ff62 	bl	800801c <__sfmoreglue>
 8008158:	4604      	mov	r4, r0
 800815a:	6030      	str	r0, [r6, #0]
 800815c:	2800      	cmp	r0, #0
 800815e:	d1d5      	bne.n	800810c <__sfp+0x24>
 8008160:	f7ff ff78 	bl	8008054 <__sfp_lock_release>
 8008164:	230c      	movs	r3, #12
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	e7ee      	b.n	8008148 <__sfp+0x60>
 800816a:	bf00      	nop
 800816c:	0801e68c 	.word	0x0801e68c
 8008170:	ffff0001 	.word	0xffff0001

08008174 <_fwalk_reent>:
 8008174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008178:	4606      	mov	r6, r0
 800817a:	4688      	mov	r8, r1
 800817c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008180:	2700      	movs	r7, #0
 8008182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008186:	f1b9 0901 	subs.w	r9, r9, #1
 800818a:	d505      	bpl.n	8008198 <_fwalk_reent+0x24>
 800818c:	6824      	ldr	r4, [r4, #0]
 800818e:	2c00      	cmp	r4, #0
 8008190:	d1f7      	bne.n	8008182 <_fwalk_reent+0xe>
 8008192:	4638      	mov	r0, r7
 8008194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008198:	89ab      	ldrh	r3, [r5, #12]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d907      	bls.n	80081ae <_fwalk_reent+0x3a>
 800819e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081a2:	3301      	adds	r3, #1
 80081a4:	d003      	beq.n	80081ae <_fwalk_reent+0x3a>
 80081a6:	4629      	mov	r1, r5
 80081a8:	4630      	mov	r0, r6
 80081aa:	47c0      	blx	r8
 80081ac:	4307      	orrs	r7, r0
 80081ae:	3568      	adds	r5, #104	; 0x68
 80081b0:	e7e9      	b.n	8008186 <_fwalk_reent+0x12>

080081b2 <__retarget_lock_init_recursive>:
 80081b2:	4770      	bx	lr

080081b4 <__retarget_lock_acquire_recursive>:
 80081b4:	4770      	bx	lr

080081b6 <__retarget_lock_release_recursive>:
 80081b6:	4770      	bx	lr

080081b8 <__swhatbuf_r>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	460e      	mov	r6, r1
 80081bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c0:	2900      	cmp	r1, #0
 80081c2:	b096      	sub	sp, #88	; 0x58
 80081c4:	4614      	mov	r4, r2
 80081c6:	461d      	mov	r5, r3
 80081c8:	da08      	bge.n	80081dc <__swhatbuf_r+0x24>
 80081ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	602a      	str	r2, [r5, #0]
 80081d2:	061a      	lsls	r2, r3, #24
 80081d4:	d410      	bmi.n	80081f8 <__swhatbuf_r+0x40>
 80081d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081da:	e00e      	b.n	80081fa <__swhatbuf_r+0x42>
 80081dc:	466a      	mov	r2, sp
 80081de:	f000 fcdd 	bl	8008b9c <_fstat_r>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	dbf1      	blt.n	80081ca <__swhatbuf_r+0x12>
 80081e6:	9a01      	ldr	r2, [sp, #4]
 80081e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081f0:	425a      	negs	r2, r3
 80081f2:	415a      	adcs	r2, r3
 80081f4:	602a      	str	r2, [r5, #0]
 80081f6:	e7ee      	b.n	80081d6 <__swhatbuf_r+0x1e>
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	2000      	movs	r0, #0
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	b016      	add	sp, #88	; 0x58
 8008200:	bd70      	pop	{r4, r5, r6, pc}
	...

08008204 <__smakebuf_r>:
 8008204:	898b      	ldrh	r3, [r1, #12]
 8008206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008208:	079d      	lsls	r5, r3, #30
 800820a:	4606      	mov	r6, r0
 800820c:	460c      	mov	r4, r1
 800820e:	d507      	bpl.n	8008220 <__smakebuf_r+0x1c>
 8008210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	2301      	movs	r3, #1
 800821a:	6163      	str	r3, [r4, #20]
 800821c:	b002      	add	sp, #8
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	ab01      	add	r3, sp, #4
 8008222:	466a      	mov	r2, sp
 8008224:	f7ff ffc8 	bl	80081b8 <__swhatbuf_r>
 8008228:	9900      	ldr	r1, [sp, #0]
 800822a:	4605      	mov	r5, r0
 800822c:	4630      	mov	r0, r6
 800822e:	f000 f895 	bl	800835c <_malloc_r>
 8008232:	b948      	cbnz	r0, 8008248 <__smakebuf_r+0x44>
 8008234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008238:	059a      	lsls	r2, r3, #22
 800823a:	d4ef      	bmi.n	800821c <__smakebuf_r+0x18>
 800823c:	f023 0303 	bic.w	r3, r3, #3
 8008240:	f043 0302 	orr.w	r3, r3, #2
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	e7e3      	b.n	8008210 <__smakebuf_r+0xc>
 8008248:	4b0d      	ldr	r3, [pc, #52]	; (8008280 <__smakebuf_r+0x7c>)
 800824a:	62b3      	str	r3, [r6, #40]	; 0x28
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	6020      	str	r0, [r4, #0]
 8008250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	9b00      	ldr	r3, [sp, #0]
 8008258:	6163      	str	r3, [r4, #20]
 800825a:	9b01      	ldr	r3, [sp, #4]
 800825c:	6120      	str	r0, [r4, #16]
 800825e:	b15b      	cbz	r3, 8008278 <__smakebuf_r+0x74>
 8008260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008264:	4630      	mov	r0, r6
 8008266:	f000 fcab 	bl	8008bc0 <_isatty_r>
 800826a:	b128      	cbz	r0, 8008278 <__smakebuf_r+0x74>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f023 0303 	bic.w	r3, r3, #3
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	89a0      	ldrh	r0, [r4, #12]
 800827a:	4305      	orrs	r5, r0
 800827c:	81a5      	strh	r5, [r4, #12]
 800827e:	e7cd      	b.n	800821c <__smakebuf_r+0x18>
 8008280:	08008011 	.word	0x08008011

08008284 <_free_r>:
 8008284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008286:	2900      	cmp	r1, #0
 8008288:	d044      	beq.n	8008314 <_free_r+0x90>
 800828a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800828e:	9001      	str	r0, [sp, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f1a1 0404 	sub.w	r4, r1, #4
 8008296:	bfb8      	it	lt
 8008298:	18e4      	addlt	r4, r4, r3
 800829a:	f000 fcb3 	bl	8008c04 <__malloc_lock>
 800829e:	4a1e      	ldr	r2, [pc, #120]	; (8008318 <_free_r+0x94>)
 80082a0:	9801      	ldr	r0, [sp, #4]
 80082a2:	6813      	ldr	r3, [r2, #0]
 80082a4:	b933      	cbnz	r3, 80082b4 <_free_r+0x30>
 80082a6:	6063      	str	r3, [r4, #4]
 80082a8:	6014      	str	r4, [r2, #0]
 80082aa:	b003      	add	sp, #12
 80082ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082b0:	f000 bcae 	b.w	8008c10 <__malloc_unlock>
 80082b4:	42a3      	cmp	r3, r4
 80082b6:	d908      	bls.n	80082ca <_free_r+0x46>
 80082b8:	6825      	ldr	r5, [r4, #0]
 80082ba:	1961      	adds	r1, r4, r5
 80082bc:	428b      	cmp	r3, r1
 80082be:	bf01      	itttt	eq
 80082c0:	6819      	ldreq	r1, [r3, #0]
 80082c2:	685b      	ldreq	r3, [r3, #4]
 80082c4:	1949      	addeq	r1, r1, r5
 80082c6:	6021      	streq	r1, [r4, #0]
 80082c8:	e7ed      	b.n	80082a6 <_free_r+0x22>
 80082ca:	461a      	mov	r2, r3
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	b10b      	cbz	r3, 80082d4 <_free_r+0x50>
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	d9fa      	bls.n	80082ca <_free_r+0x46>
 80082d4:	6811      	ldr	r1, [r2, #0]
 80082d6:	1855      	adds	r5, r2, r1
 80082d8:	42a5      	cmp	r5, r4
 80082da:	d10b      	bne.n	80082f4 <_free_r+0x70>
 80082dc:	6824      	ldr	r4, [r4, #0]
 80082de:	4421      	add	r1, r4
 80082e0:	1854      	adds	r4, r2, r1
 80082e2:	42a3      	cmp	r3, r4
 80082e4:	6011      	str	r1, [r2, #0]
 80082e6:	d1e0      	bne.n	80082aa <_free_r+0x26>
 80082e8:	681c      	ldr	r4, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	6053      	str	r3, [r2, #4]
 80082ee:	4421      	add	r1, r4
 80082f0:	6011      	str	r1, [r2, #0]
 80082f2:	e7da      	b.n	80082aa <_free_r+0x26>
 80082f4:	d902      	bls.n	80082fc <_free_r+0x78>
 80082f6:	230c      	movs	r3, #12
 80082f8:	6003      	str	r3, [r0, #0]
 80082fa:	e7d6      	b.n	80082aa <_free_r+0x26>
 80082fc:	6825      	ldr	r5, [r4, #0]
 80082fe:	1961      	adds	r1, r4, r5
 8008300:	428b      	cmp	r3, r1
 8008302:	bf04      	itt	eq
 8008304:	6819      	ldreq	r1, [r3, #0]
 8008306:	685b      	ldreq	r3, [r3, #4]
 8008308:	6063      	str	r3, [r4, #4]
 800830a:	bf04      	itt	eq
 800830c:	1949      	addeq	r1, r1, r5
 800830e:	6021      	streq	r1, [r4, #0]
 8008310:	6054      	str	r4, [r2, #4]
 8008312:	e7ca      	b.n	80082aa <_free_r+0x26>
 8008314:	b003      	add	sp, #12
 8008316:	bd30      	pop	{r4, r5, pc}
 8008318:	200029b8 	.word	0x200029b8

0800831c <sbrk_aligned>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	4e0e      	ldr	r6, [pc, #56]	; (8008358 <sbrk_aligned+0x3c>)
 8008320:	460c      	mov	r4, r1
 8008322:	6831      	ldr	r1, [r6, #0]
 8008324:	4605      	mov	r5, r0
 8008326:	b911      	cbnz	r1, 800832e <sbrk_aligned+0x12>
 8008328:	f000 fbc2 	bl	8008ab0 <_sbrk_r>
 800832c:	6030      	str	r0, [r6, #0]
 800832e:	4621      	mov	r1, r4
 8008330:	4628      	mov	r0, r5
 8008332:	f000 fbbd 	bl	8008ab0 <_sbrk_r>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d00a      	beq.n	8008350 <sbrk_aligned+0x34>
 800833a:	1cc4      	adds	r4, r0, #3
 800833c:	f024 0403 	bic.w	r4, r4, #3
 8008340:	42a0      	cmp	r0, r4
 8008342:	d007      	beq.n	8008354 <sbrk_aligned+0x38>
 8008344:	1a21      	subs	r1, r4, r0
 8008346:	4628      	mov	r0, r5
 8008348:	f000 fbb2 	bl	8008ab0 <_sbrk_r>
 800834c:	3001      	adds	r0, #1
 800834e:	d101      	bne.n	8008354 <sbrk_aligned+0x38>
 8008350:	f04f 34ff 	mov.w	r4, #4294967295
 8008354:	4620      	mov	r0, r4
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	200029bc 	.word	0x200029bc

0800835c <_malloc_r>:
 800835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008360:	1ccd      	adds	r5, r1, #3
 8008362:	f025 0503 	bic.w	r5, r5, #3
 8008366:	3508      	adds	r5, #8
 8008368:	2d0c      	cmp	r5, #12
 800836a:	bf38      	it	cc
 800836c:	250c      	movcc	r5, #12
 800836e:	2d00      	cmp	r5, #0
 8008370:	4607      	mov	r7, r0
 8008372:	db01      	blt.n	8008378 <_malloc_r+0x1c>
 8008374:	42a9      	cmp	r1, r5
 8008376:	d905      	bls.n	8008384 <_malloc_r+0x28>
 8008378:	230c      	movs	r3, #12
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	2600      	movs	r6, #0
 800837e:	4630      	mov	r0, r6
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	4e2e      	ldr	r6, [pc, #184]	; (8008440 <_malloc_r+0xe4>)
 8008386:	f000 fc3d 	bl	8008c04 <__malloc_lock>
 800838a:	6833      	ldr	r3, [r6, #0]
 800838c:	461c      	mov	r4, r3
 800838e:	bb34      	cbnz	r4, 80083de <_malloc_r+0x82>
 8008390:	4629      	mov	r1, r5
 8008392:	4638      	mov	r0, r7
 8008394:	f7ff ffc2 	bl	800831c <sbrk_aligned>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	4604      	mov	r4, r0
 800839c:	d14d      	bne.n	800843a <_malloc_r+0xde>
 800839e:	6834      	ldr	r4, [r6, #0]
 80083a0:	4626      	mov	r6, r4
 80083a2:	2e00      	cmp	r6, #0
 80083a4:	d140      	bne.n	8008428 <_malloc_r+0xcc>
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	4631      	mov	r1, r6
 80083aa:	4638      	mov	r0, r7
 80083ac:	eb04 0803 	add.w	r8, r4, r3
 80083b0:	f000 fb7e 	bl	8008ab0 <_sbrk_r>
 80083b4:	4580      	cmp	r8, r0
 80083b6:	d13a      	bne.n	800842e <_malloc_r+0xd2>
 80083b8:	6821      	ldr	r1, [r4, #0]
 80083ba:	3503      	adds	r5, #3
 80083bc:	1a6d      	subs	r5, r5, r1
 80083be:	f025 0503 	bic.w	r5, r5, #3
 80083c2:	3508      	adds	r5, #8
 80083c4:	2d0c      	cmp	r5, #12
 80083c6:	bf38      	it	cc
 80083c8:	250c      	movcc	r5, #12
 80083ca:	4629      	mov	r1, r5
 80083cc:	4638      	mov	r0, r7
 80083ce:	f7ff ffa5 	bl	800831c <sbrk_aligned>
 80083d2:	3001      	adds	r0, #1
 80083d4:	d02b      	beq.n	800842e <_malloc_r+0xd2>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	442b      	add	r3, r5
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	e00e      	b.n	80083fc <_malloc_r+0xa0>
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	1b52      	subs	r2, r2, r5
 80083e2:	d41e      	bmi.n	8008422 <_malloc_r+0xc6>
 80083e4:	2a0b      	cmp	r2, #11
 80083e6:	d916      	bls.n	8008416 <_malloc_r+0xba>
 80083e8:	1961      	adds	r1, r4, r5
 80083ea:	42a3      	cmp	r3, r4
 80083ec:	6025      	str	r5, [r4, #0]
 80083ee:	bf18      	it	ne
 80083f0:	6059      	strne	r1, [r3, #4]
 80083f2:	6863      	ldr	r3, [r4, #4]
 80083f4:	bf08      	it	eq
 80083f6:	6031      	streq	r1, [r6, #0]
 80083f8:	5162      	str	r2, [r4, r5]
 80083fa:	604b      	str	r3, [r1, #4]
 80083fc:	4638      	mov	r0, r7
 80083fe:	f104 060b 	add.w	r6, r4, #11
 8008402:	f000 fc05 	bl	8008c10 <__malloc_unlock>
 8008406:	f026 0607 	bic.w	r6, r6, #7
 800840a:	1d23      	adds	r3, r4, #4
 800840c:	1af2      	subs	r2, r6, r3
 800840e:	d0b6      	beq.n	800837e <_malloc_r+0x22>
 8008410:	1b9b      	subs	r3, r3, r6
 8008412:	50a3      	str	r3, [r4, r2]
 8008414:	e7b3      	b.n	800837e <_malloc_r+0x22>
 8008416:	6862      	ldr	r2, [r4, #4]
 8008418:	42a3      	cmp	r3, r4
 800841a:	bf0c      	ite	eq
 800841c:	6032      	streq	r2, [r6, #0]
 800841e:	605a      	strne	r2, [r3, #4]
 8008420:	e7ec      	b.n	80083fc <_malloc_r+0xa0>
 8008422:	4623      	mov	r3, r4
 8008424:	6864      	ldr	r4, [r4, #4]
 8008426:	e7b2      	b.n	800838e <_malloc_r+0x32>
 8008428:	4634      	mov	r4, r6
 800842a:	6876      	ldr	r6, [r6, #4]
 800842c:	e7b9      	b.n	80083a2 <_malloc_r+0x46>
 800842e:	230c      	movs	r3, #12
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	4638      	mov	r0, r7
 8008434:	f000 fbec 	bl	8008c10 <__malloc_unlock>
 8008438:	e7a1      	b.n	800837e <_malloc_r+0x22>
 800843a:	6025      	str	r5, [r4, #0]
 800843c:	e7de      	b.n	80083fc <_malloc_r+0xa0>
 800843e:	bf00      	nop
 8008440:	200029b8 	.word	0x200029b8

08008444 <__sfputc_r>:
 8008444:	6893      	ldr	r3, [r2, #8]
 8008446:	3b01      	subs	r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	b410      	push	{r4}
 800844c:	6093      	str	r3, [r2, #8]
 800844e:	da08      	bge.n	8008462 <__sfputc_r+0x1e>
 8008450:	6994      	ldr	r4, [r2, #24]
 8008452:	42a3      	cmp	r3, r4
 8008454:	db01      	blt.n	800845a <__sfputc_r+0x16>
 8008456:	290a      	cmp	r1, #10
 8008458:	d103      	bne.n	8008462 <__sfputc_r+0x1e>
 800845a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800845e:	f7ff bc31 	b.w	8007cc4 <__swbuf_r>
 8008462:	6813      	ldr	r3, [r2, #0]
 8008464:	1c58      	adds	r0, r3, #1
 8008466:	6010      	str	r0, [r2, #0]
 8008468:	7019      	strb	r1, [r3, #0]
 800846a:	4608      	mov	r0, r1
 800846c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008470:	4770      	bx	lr

08008472 <__sfputs_r>:
 8008472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008474:	4606      	mov	r6, r0
 8008476:	460f      	mov	r7, r1
 8008478:	4614      	mov	r4, r2
 800847a:	18d5      	adds	r5, r2, r3
 800847c:	42ac      	cmp	r4, r5
 800847e:	d101      	bne.n	8008484 <__sfputs_r+0x12>
 8008480:	2000      	movs	r0, #0
 8008482:	e007      	b.n	8008494 <__sfputs_r+0x22>
 8008484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008488:	463a      	mov	r2, r7
 800848a:	4630      	mov	r0, r6
 800848c:	f7ff ffda 	bl	8008444 <__sfputc_r>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d1f3      	bne.n	800847c <__sfputs_r+0xa>
 8008494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008498 <_vfiprintf_r>:
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	460d      	mov	r5, r1
 800849e:	b09d      	sub	sp, #116	; 0x74
 80084a0:	4614      	mov	r4, r2
 80084a2:	4698      	mov	r8, r3
 80084a4:	4606      	mov	r6, r0
 80084a6:	b118      	cbz	r0, 80084b0 <_vfiprintf_r+0x18>
 80084a8:	6983      	ldr	r3, [r0, #24]
 80084aa:	b90b      	cbnz	r3, 80084b0 <_vfiprintf_r+0x18>
 80084ac:	f7ff fde4 	bl	8008078 <__sinit>
 80084b0:	4b89      	ldr	r3, [pc, #548]	; (80086d8 <_vfiprintf_r+0x240>)
 80084b2:	429d      	cmp	r5, r3
 80084b4:	d11b      	bne.n	80084ee <_vfiprintf_r+0x56>
 80084b6:	6875      	ldr	r5, [r6, #4]
 80084b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ba:	07d9      	lsls	r1, r3, #31
 80084bc:	d405      	bmi.n	80084ca <_vfiprintf_r+0x32>
 80084be:	89ab      	ldrh	r3, [r5, #12]
 80084c0:	059a      	lsls	r2, r3, #22
 80084c2:	d402      	bmi.n	80084ca <_vfiprintf_r+0x32>
 80084c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084c6:	f7ff fe75 	bl	80081b4 <__retarget_lock_acquire_recursive>
 80084ca:	89ab      	ldrh	r3, [r5, #12]
 80084cc:	071b      	lsls	r3, r3, #28
 80084ce:	d501      	bpl.n	80084d4 <_vfiprintf_r+0x3c>
 80084d0:	692b      	ldr	r3, [r5, #16]
 80084d2:	b9eb      	cbnz	r3, 8008510 <_vfiprintf_r+0x78>
 80084d4:	4629      	mov	r1, r5
 80084d6:	4630      	mov	r0, r6
 80084d8:	f7ff fc46 	bl	8007d68 <__swsetup_r>
 80084dc:	b1c0      	cbz	r0, 8008510 <_vfiprintf_r+0x78>
 80084de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e0:	07dc      	lsls	r4, r3, #31
 80084e2:	d50e      	bpl.n	8008502 <_vfiprintf_r+0x6a>
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295
 80084e8:	b01d      	add	sp, #116	; 0x74
 80084ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ee:	4b7b      	ldr	r3, [pc, #492]	; (80086dc <_vfiprintf_r+0x244>)
 80084f0:	429d      	cmp	r5, r3
 80084f2:	d101      	bne.n	80084f8 <_vfiprintf_r+0x60>
 80084f4:	68b5      	ldr	r5, [r6, #8]
 80084f6:	e7df      	b.n	80084b8 <_vfiprintf_r+0x20>
 80084f8:	4b79      	ldr	r3, [pc, #484]	; (80086e0 <_vfiprintf_r+0x248>)
 80084fa:	429d      	cmp	r5, r3
 80084fc:	bf08      	it	eq
 80084fe:	68f5      	ldreq	r5, [r6, #12]
 8008500:	e7da      	b.n	80084b8 <_vfiprintf_r+0x20>
 8008502:	89ab      	ldrh	r3, [r5, #12]
 8008504:	0598      	lsls	r0, r3, #22
 8008506:	d4ed      	bmi.n	80084e4 <_vfiprintf_r+0x4c>
 8008508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800850a:	f7ff fe54 	bl	80081b6 <__retarget_lock_release_recursive>
 800850e:	e7e9      	b.n	80084e4 <_vfiprintf_r+0x4c>
 8008510:	2300      	movs	r3, #0
 8008512:	9309      	str	r3, [sp, #36]	; 0x24
 8008514:	2320      	movs	r3, #32
 8008516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800851a:	f8cd 800c 	str.w	r8, [sp, #12]
 800851e:	2330      	movs	r3, #48	; 0x30
 8008520:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086e4 <_vfiprintf_r+0x24c>
 8008524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008528:	f04f 0901 	mov.w	r9, #1
 800852c:	4623      	mov	r3, r4
 800852e:	469a      	mov	sl, r3
 8008530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008534:	b10a      	cbz	r2, 800853a <_vfiprintf_r+0xa2>
 8008536:	2a25      	cmp	r2, #37	; 0x25
 8008538:	d1f9      	bne.n	800852e <_vfiprintf_r+0x96>
 800853a:	ebba 0b04 	subs.w	fp, sl, r4
 800853e:	d00b      	beq.n	8008558 <_vfiprintf_r+0xc0>
 8008540:	465b      	mov	r3, fp
 8008542:	4622      	mov	r2, r4
 8008544:	4629      	mov	r1, r5
 8008546:	4630      	mov	r0, r6
 8008548:	f7ff ff93 	bl	8008472 <__sfputs_r>
 800854c:	3001      	adds	r0, #1
 800854e:	f000 80aa 	beq.w	80086a6 <_vfiprintf_r+0x20e>
 8008552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008554:	445a      	add	r2, fp
 8008556:	9209      	str	r2, [sp, #36]	; 0x24
 8008558:	f89a 3000 	ldrb.w	r3, [sl]
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 80a2 	beq.w	80086a6 <_vfiprintf_r+0x20e>
 8008562:	2300      	movs	r3, #0
 8008564:	f04f 32ff 	mov.w	r2, #4294967295
 8008568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800856c:	f10a 0a01 	add.w	sl, sl, #1
 8008570:	9304      	str	r3, [sp, #16]
 8008572:	9307      	str	r3, [sp, #28]
 8008574:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008578:	931a      	str	r3, [sp, #104]	; 0x68
 800857a:	4654      	mov	r4, sl
 800857c:	2205      	movs	r2, #5
 800857e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008582:	4858      	ldr	r0, [pc, #352]	; (80086e4 <_vfiprintf_r+0x24c>)
 8008584:	f7f7 fe2c 	bl	80001e0 <memchr>
 8008588:	9a04      	ldr	r2, [sp, #16]
 800858a:	b9d8      	cbnz	r0, 80085c4 <_vfiprintf_r+0x12c>
 800858c:	06d1      	lsls	r1, r2, #27
 800858e:	bf44      	itt	mi
 8008590:	2320      	movmi	r3, #32
 8008592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008596:	0713      	lsls	r3, r2, #28
 8008598:	bf44      	itt	mi
 800859a:	232b      	movmi	r3, #43	; 0x2b
 800859c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a0:	f89a 3000 	ldrb.w	r3, [sl]
 80085a4:	2b2a      	cmp	r3, #42	; 0x2a
 80085a6:	d015      	beq.n	80085d4 <_vfiprintf_r+0x13c>
 80085a8:	9a07      	ldr	r2, [sp, #28]
 80085aa:	4654      	mov	r4, sl
 80085ac:	2000      	movs	r0, #0
 80085ae:	f04f 0c0a 	mov.w	ip, #10
 80085b2:	4621      	mov	r1, r4
 80085b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085b8:	3b30      	subs	r3, #48	; 0x30
 80085ba:	2b09      	cmp	r3, #9
 80085bc:	d94e      	bls.n	800865c <_vfiprintf_r+0x1c4>
 80085be:	b1b0      	cbz	r0, 80085ee <_vfiprintf_r+0x156>
 80085c0:	9207      	str	r2, [sp, #28]
 80085c2:	e014      	b.n	80085ee <_vfiprintf_r+0x156>
 80085c4:	eba0 0308 	sub.w	r3, r0, r8
 80085c8:	fa09 f303 	lsl.w	r3, r9, r3
 80085cc:	4313      	orrs	r3, r2
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	46a2      	mov	sl, r4
 80085d2:	e7d2      	b.n	800857a <_vfiprintf_r+0xe2>
 80085d4:	9b03      	ldr	r3, [sp, #12]
 80085d6:	1d19      	adds	r1, r3, #4
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	9103      	str	r1, [sp, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	bfbb      	ittet	lt
 80085e0:	425b      	neglt	r3, r3
 80085e2:	f042 0202 	orrlt.w	r2, r2, #2
 80085e6:	9307      	strge	r3, [sp, #28]
 80085e8:	9307      	strlt	r3, [sp, #28]
 80085ea:	bfb8      	it	lt
 80085ec:	9204      	strlt	r2, [sp, #16]
 80085ee:	7823      	ldrb	r3, [r4, #0]
 80085f0:	2b2e      	cmp	r3, #46	; 0x2e
 80085f2:	d10c      	bne.n	800860e <_vfiprintf_r+0x176>
 80085f4:	7863      	ldrb	r3, [r4, #1]
 80085f6:	2b2a      	cmp	r3, #42	; 0x2a
 80085f8:	d135      	bne.n	8008666 <_vfiprintf_r+0x1ce>
 80085fa:	9b03      	ldr	r3, [sp, #12]
 80085fc:	1d1a      	adds	r2, r3, #4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	9203      	str	r2, [sp, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfb8      	it	lt
 8008606:	f04f 33ff 	movlt.w	r3, #4294967295
 800860a:	3402      	adds	r4, #2
 800860c:	9305      	str	r3, [sp, #20]
 800860e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086f4 <_vfiprintf_r+0x25c>
 8008612:	7821      	ldrb	r1, [r4, #0]
 8008614:	2203      	movs	r2, #3
 8008616:	4650      	mov	r0, sl
 8008618:	f7f7 fde2 	bl	80001e0 <memchr>
 800861c:	b140      	cbz	r0, 8008630 <_vfiprintf_r+0x198>
 800861e:	2340      	movs	r3, #64	; 0x40
 8008620:	eba0 000a 	sub.w	r0, r0, sl
 8008624:	fa03 f000 	lsl.w	r0, r3, r0
 8008628:	9b04      	ldr	r3, [sp, #16]
 800862a:	4303      	orrs	r3, r0
 800862c:	3401      	adds	r4, #1
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008634:	482c      	ldr	r0, [pc, #176]	; (80086e8 <_vfiprintf_r+0x250>)
 8008636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863a:	2206      	movs	r2, #6
 800863c:	f7f7 fdd0 	bl	80001e0 <memchr>
 8008640:	2800      	cmp	r0, #0
 8008642:	d03f      	beq.n	80086c4 <_vfiprintf_r+0x22c>
 8008644:	4b29      	ldr	r3, [pc, #164]	; (80086ec <_vfiprintf_r+0x254>)
 8008646:	bb1b      	cbnz	r3, 8008690 <_vfiprintf_r+0x1f8>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	3307      	adds	r3, #7
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	3308      	adds	r3, #8
 8008652:	9303      	str	r3, [sp, #12]
 8008654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008656:	443b      	add	r3, r7
 8008658:	9309      	str	r3, [sp, #36]	; 0x24
 800865a:	e767      	b.n	800852c <_vfiprintf_r+0x94>
 800865c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008660:	460c      	mov	r4, r1
 8008662:	2001      	movs	r0, #1
 8008664:	e7a5      	b.n	80085b2 <_vfiprintf_r+0x11a>
 8008666:	2300      	movs	r3, #0
 8008668:	3401      	adds	r4, #1
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	4619      	mov	r1, r3
 800866e:	f04f 0c0a 	mov.w	ip, #10
 8008672:	4620      	mov	r0, r4
 8008674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008678:	3a30      	subs	r2, #48	; 0x30
 800867a:	2a09      	cmp	r2, #9
 800867c:	d903      	bls.n	8008686 <_vfiprintf_r+0x1ee>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0c5      	beq.n	800860e <_vfiprintf_r+0x176>
 8008682:	9105      	str	r1, [sp, #20]
 8008684:	e7c3      	b.n	800860e <_vfiprintf_r+0x176>
 8008686:	fb0c 2101 	mla	r1, ip, r1, r2
 800868a:	4604      	mov	r4, r0
 800868c:	2301      	movs	r3, #1
 800868e:	e7f0      	b.n	8008672 <_vfiprintf_r+0x1da>
 8008690:	ab03      	add	r3, sp, #12
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	462a      	mov	r2, r5
 8008696:	4b16      	ldr	r3, [pc, #88]	; (80086f0 <_vfiprintf_r+0x258>)
 8008698:	a904      	add	r1, sp, #16
 800869a:	4630      	mov	r0, r6
 800869c:	f3af 8000 	nop.w
 80086a0:	4607      	mov	r7, r0
 80086a2:	1c78      	adds	r0, r7, #1
 80086a4:	d1d6      	bne.n	8008654 <_vfiprintf_r+0x1bc>
 80086a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a8:	07d9      	lsls	r1, r3, #31
 80086aa:	d405      	bmi.n	80086b8 <_vfiprintf_r+0x220>
 80086ac:	89ab      	ldrh	r3, [r5, #12]
 80086ae:	059a      	lsls	r2, r3, #22
 80086b0:	d402      	bmi.n	80086b8 <_vfiprintf_r+0x220>
 80086b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086b4:	f7ff fd7f 	bl	80081b6 <__retarget_lock_release_recursive>
 80086b8:	89ab      	ldrh	r3, [r5, #12]
 80086ba:	065b      	lsls	r3, r3, #25
 80086bc:	f53f af12 	bmi.w	80084e4 <_vfiprintf_r+0x4c>
 80086c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086c2:	e711      	b.n	80084e8 <_vfiprintf_r+0x50>
 80086c4:	ab03      	add	r3, sp, #12
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	462a      	mov	r2, r5
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <_vfiprintf_r+0x258>)
 80086cc:	a904      	add	r1, sp, #16
 80086ce:	4630      	mov	r0, r6
 80086d0:	f000 f880 	bl	80087d4 <_printf_i>
 80086d4:	e7e4      	b.n	80086a0 <_vfiprintf_r+0x208>
 80086d6:	bf00      	nop
 80086d8:	0801e6b0 	.word	0x0801e6b0
 80086dc:	0801e6d0 	.word	0x0801e6d0
 80086e0:	0801e690 	.word	0x0801e690
 80086e4:	0801e6f0 	.word	0x0801e6f0
 80086e8:	0801e6fa 	.word	0x0801e6fa
 80086ec:	00000000 	.word	0x00000000
 80086f0:	08008473 	.word	0x08008473
 80086f4:	0801e6f6 	.word	0x0801e6f6

080086f8 <_printf_common>:
 80086f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086fc:	4616      	mov	r6, r2
 80086fe:	4699      	mov	r9, r3
 8008700:	688a      	ldr	r2, [r1, #8]
 8008702:	690b      	ldr	r3, [r1, #16]
 8008704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008708:	4293      	cmp	r3, r2
 800870a:	bfb8      	it	lt
 800870c:	4613      	movlt	r3, r2
 800870e:	6033      	str	r3, [r6, #0]
 8008710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008714:	4607      	mov	r7, r0
 8008716:	460c      	mov	r4, r1
 8008718:	b10a      	cbz	r2, 800871e <_printf_common+0x26>
 800871a:	3301      	adds	r3, #1
 800871c:	6033      	str	r3, [r6, #0]
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	0699      	lsls	r1, r3, #26
 8008722:	bf42      	ittt	mi
 8008724:	6833      	ldrmi	r3, [r6, #0]
 8008726:	3302      	addmi	r3, #2
 8008728:	6033      	strmi	r3, [r6, #0]
 800872a:	6825      	ldr	r5, [r4, #0]
 800872c:	f015 0506 	ands.w	r5, r5, #6
 8008730:	d106      	bne.n	8008740 <_printf_common+0x48>
 8008732:	f104 0a19 	add.w	sl, r4, #25
 8008736:	68e3      	ldr	r3, [r4, #12]
 8008738:	6832      	ldr	r2, [r6, #0]
 800873a:	1a9b      	subs	r3, r3, r2
 800873c:	42ab      	cmp	r3, r5
 800873e:	dc26      	bgt.n	800878e <_printf_common+0x96>
 8008740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008744:	1e13      	subs	r3, r2, #0
 8008746:	6822      	ldr	r2, [r4, #0]
 8008748:	bf18      	it	ne
 800874a:	2301      	movne	r3, #1
 800874c:	0692      	lsls	r2, r2, #26
 800874e:	d42b      	bmi.n	80087a8 <_printf_common+0xb0>
 8008750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008754:	4649      	mov	r1, r9
 8008756:	4638      	mov	r0, r7
 8008758:	47c0      	blx	r8
 800875a:	3001      	adds	r0, #1
 800875c:	d01e      	beq.n	800879c <_printf_common+0xa4>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	68e5      	ldr	r5, [r4, #12]
 8008762:	6832      	ldr	r2, [r6, #0]
 8008764:	f003 0306 	and.w	r3, r3, #6
 8008768:	2b04      	cmp	r3, #4
 800876a:	bf08      	it	eq
 800876c:	1aad      	subeq	r5, r5, r2
 800876e:	68a3      	ldr	r3, [r4, #8]
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	bf0c      	ite	eq
 8008774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008778:	2500      	movne	r5, #0
 800877a:	4293      	cmp	r3, r2
 800877c:	bfc4      	itt	gt
 800877e:	1a9b      	subgt	r3, r3, r2
 8008780:	18ed      	addgt	r5, r5, r3
 8008782:	2600      	movs	r6, #0
 8008784:	341a      	adds	r4, #26
 8008786:	42b5      	cmp	r5, r6
 8008788:	d11a      	bne.n	80087c0 <_printf_common+0xc8>
 800878a:	2000      	movs	r0, #0
 800878c:	e008      	b.n	80087a0 <_printf_common+0xa8>
 800878e:	2301      	movs	r3, #1
 8008790:	4652      	mov	r2, sl
 8008792:	4649      	mov	r1, r9
 8008794:	4638      	mov	r0, r7
 8008796:	47c0      	blx	r8
 8008798:	3001      	adds	r0, #1
 800879a:	d103      	bne.n	80087a4 <_printf_common+0xac>
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a4:	3501      	adds	r5, #1
 80087a6:	e7c6      	b.n	8008736 <_printf_common+0x3e>
 80087a8:	18e1      	adds	r1, r4, r3
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	2030      	movs	r0, #48	; 0x30
 80087ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087b2:	4422      	add	r2, r4
 80087b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087bc:	3302      	adds	r3, #2
 80087be:	e7c7      	b.n	8008750 <_printf_common+0x58>
 80087c0:	2301      	movs	r3, #1
 80087c2:	4622      	mov	r2, r4
 80087c4:	4649      	mov	r1, r9
 80087c6:	4638      	mov	r0, r7
 80087c8:	47c0      	blx	r8
 80087ca:	3001      	adds	r0, #1
 80087cc:	d0e6      	beq.n	800879c <_printf_common+0xa4>
 80087ce:	3601      	adds	r6, #1
 80087d0:	e7d9      	b.n	8008786 <_printf_common+0x8e>
	...

080087d4 <_printf_i>:
 80087d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d8:	7e0f      	ldrb	r7, [r1, #24]
 80087da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087dc:	2f78      	cmp	r7, #120	; 0x78
 80087de:	4691      	mov	r9, r2
 80087e0:	4680      	mov	r8, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	469a      	mov	sl, r3
 80087e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ea:	d807      	bhi.n	80087fc <_printf_i+0x28>
 80087ec:	2f62      	cmp	r7, #98	; 0x62
 80087ee:	d80a      	bhi.n	8008806 <_printf_i+0x32>
 80087f0:	2f00      	cmp	r7, #0
 80087f2:	f000 80d8 	beq.w	80089a6 <_printf_i+0x1d2>
 80087f6:	2f58      	cmp	r7, #88	; 0x58
 80087f8:	f000 80a3 	beq.w	8008942 <_printf_i+0x16e>
 80087fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008804:	e03a      	b.n	800887c <_printf_i+0xa8>
 8008806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800880a:	2b15      	cmp	r3, #21
 800880c:	d8f6      	bhi.n	80087fc <_printf_i+0x28>
 800880e:	a101      	add	r1, pc, #4	; (adr r1, 8008814 <_printf_i+0x40>)
 8008810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008814:	0800886d 	.word	0x0800886d
 8008818:	08008881 	.word	0x08008881
 800881c:	080087fd 	.word	0x080087fd
 8008820:	080087fd 	.word	0x080087fd
 8008824:	080087fd 	.word	0x080087fd
 8008828:	080087fd 	.word	0x080087fd
 800882c:	08008881 	.word	0x08008881
 8008830:	080087fd 	.word	0x080087fd
 8008834:	080087fd 	.word	0x080087fd
 8008838:	080087fd 	.word	0x080087fd
 800883c:	080087fd 	.word	0x080087fd
 8008840:	0800898d 	.word	0x0800898d
 8008844:	080088b1 	.word	0x080088b1
 8008848:	0800896f 	.word	0x0800896f
 800884c:	080087fd 	.word	0x080087fd
 8008850:	080087fd 	.word	0x080087fd
 8008854:	080089af 	.word	0x080089af
 8008858:	080087fd 	.word	0x080087fd
 800885c:	080088b1 	.word	0x080088b1
 8008860:	080087fd 	.word	0x080087fd
 8008864:	080087fd 	.word	0x080087fd
 8008868:	08008977 	.word	0x08008977
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	1d1a      	adds	r2, r3, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	602a      	str	r2, [r5, #0]
 8008874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800887c:	2301      	movs	r3, #1
 800887e:	e0a3      	b.n	80089c8 <_printf_i+0x1f4>
 8008880:	6820      	ldr	r0, [r4, #0]
 8008882:	6829      	ldr	r1, [r5, #0]
 8008884:	0606      	lsls	r6, r0, #24
 8008886:	f101 0304 	add.w	r3, r1, #4
 800888a:	d50a      	bpl.n	80088a2 <_printf_i+0xce>
 800888c:	680e      	ldr	r6, [r1, #0]
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	2e00      	cmp	r6, #0
 8008892:	da03      	bge.n	800889c <_printf_i+0xc8>
 8008894:	232d      	movs	r3, #45	; 0x2d
 8008896:	4276      	negs	r6, r6
 8008898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889c:	485e      	ldr	r0, [pc, #376]	; (8008a18 <_printf_i+0x244>)
 800889e:	230a      	movs	r3, #10
 80088a0:	e019      	b.n	80088d6 <_printf_i+0x102>
 80088a2:	680e      	ldr	r6, [r1, #0]
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088aa:	bf18      	it	ne
 80088ac:	b236      	sxthne	r6, r6
 80088ae:	e7ef      	b.n	8008890 <_printf_i+0xbc>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	1d19      	adds	r1, r3, #4
 80088b6:	6029      	str	r1, [r5, #0]
 80088b8:	0601      	lsls	r1, r0, #24
 80088ba:	d501      	bpl.n	80088c0 <_printf_i+0xec>
 80088bc:	681e      	ldr	r6, [r3, #0]
 80088be:	e002      	b.n	80088c6 <_printf_i+0xf2>
 80088c0:	0646      	lsls	r6, r0, #25
 80088c2:	d5fb      	bpl.n	80088bc <_printf_i+0xe8>
 80088c4:	881e      	ldrh	r6, [r3, #0]
 80088c6:	4854      	ldr	r0, [pc, #336]	; (8008a18 <_printf_i+0x244>)
 80088c8:	2f6f      	cmp	r7, #111	; 0x6f
 80088ca:	bf0c      	ite	eq
 80088cc:	2308      	moveq	r3, #8
 80088ce:	230a      	movne	r3, #10
 80088d0:	2100      	movs	r1, #0
 80088d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088d6:	6865      	ldr	r5, [r4, #4]
 80088d8:	60a5      	str	r5, [r4, #8]
 80088da:	2d00      	cmp	r5, #0
 80088dc:	bfa2      	ittt	ge
 80088de:	6821      	ldrge	r1, [r4, #0]
 80088e0:	f021 0104 	bicge.w	r1, r1, #4
 80088e4:	6021      	strge	r1, [r4, #0]
 80088e6:	b90e      	cbnz	r6, 80088ec <_printf_i+0x118>
 80088e8:	2d00      	cmp	r5, #0
 80088ea:	d04d      	beq.n	8008988 <_printf_i+0x1b4>
 80088ec:	4615      	mov	r5, r2
 80088ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80088f2:	fb03 6711 	mls	r7, r3, r1, r6
 80088f6:	5dc7      	ldrb	r7, [r0, r7]
 80088f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088fc:	4637      	mov	r7, r6
 80088fe:	42bb      	cmp	r3, r7
 8008900:	460e      	mov	r6, r1
 8008902:	d9f4      	bls.n	80088ee <_printf_i+0x11a>
 8008904:	2b08      	cmp	r3, #8
 8008906:	d10b      	bne.n	8008920 <_printf_i+0x14c>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	07de      	lsls	r6, r3, #31
 800890c:	d508      	bpl.n	8008920 <_printf_i+0x14c>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	6861      	ldr	r1, [r4, #4]
 8008912:	4299      	cmp	r1, r3
 8008914:	bfde      	ittt	le
 8008916:	2330      	movle	r3, #48	; 0x30
 8008918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800891c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008920:	1b52      	subs	r2, r2, r5
 8008922:	6122      	str	r2, [r4, #16]
 8008924:	f8cd a000 	str.w	sl, [sp]
 8008928:	464b      	mov	r3, r9
 800892a:	aa03      	add	r2, sp, #12
 800892c:	4621      	mov	r1, r4
 800892e:	4640      	mov	r0, r8
 8008930:	f7ff fee2 	bl	80086f8 <_printf_common>
 8008934:	3001      	adds	r0, #1
 8008936:	d14c      	bne.n	80089d2 <_printf_i+0x1fe>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	b004      	add	sp, #16
 800893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008942:	4835      	ldr	r0, [pc, #212]	; (8008a18 <_printf_i+0x244>)
 8008944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008948:	6829      	ldr	r1, [r5, #0]
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008950:	6029      	str	r1, [r5, #0]
 8008952:	061d      	lsls	r5, r3, #24
 8008954:	d514      	bpl.n	8008980 <_printf_i+0x1ac>
 8008956:	07df      	lsls	r7, r3, #31
 8008958:	bf44      	itt	mi
 800895a:	f043 0320 	orrmi.w	r3, r3, #32
 800895e:	6023      	strmi	r3, [r4, #0]
 8008960:	b91e      	cbnz	r6, 800896a <_printf_i+0x196>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	f023 0320 	bic.w	r3, r3, #32
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	2310      	movs	r3, #16
 800896c:	e7b0      	b.n	80088d0 <_printf_i+0xfc>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	f043 0320 	orr.w	r3, r3, #32
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	2378      	movs	r3, #120	; 0x78
 8008978:	4828      	ldr	r0, [pc, #160]	; (8008a1c <_printf_i+0x248>)
 800897a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800897e:	e7e3      	b.n	8008948 <_printf_i+0x174>
 8008980:	0659      	lsls	r1, r3, #25
 8008982:	bf48      	it	mi
 8008984:	b2b6      	uxthmi	r6, r6
 8008986:	e7e6      	b.n	8008956 <_printf_i+0x182>
 8008988:	4615      	mov	r5, r2
 800898a:	e7bb      	b.n	8008904 <_printf_i+0x130>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	6826      	ldr	r6, [r4, #0]
 8008990:	6961      	ldr	r1, [r4, #20]
 8008992:	1d18      	adds	r0, r3, #4
 8008994:	6028      	str	r0, [r5, #0]
 8008996:	0635      	lsls	r5, r6, #24
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	d501      	bpl.n	80089a0 <_printf_i+0x1cc>
 800899c:	6019      	str	r1, [r3, #0]
 800899e:	e002      	b.n	80089a6 <_printf_i+0x1d2>
 80089a0:	0670      	lsls	r0, r6, #25
 80089a2:	d5fb      	bpl.n	800899c <_printf_i+0x1c8>
 80089a4:	8019      	strh	r1, [r3, #0]
 80089a6:	2300      	movs	r3, #0
 80089a8:	6123      	str	r3, [r4, #16]
 80089aa:	4615      	mov	r5, r2
 80089ac:	e7ba      	b.n	8008924 <_printf_i+0x150>
 80089ae:	682b      	ldr	r3, [r5, #0]
 80089b0:	1d1a      	adds	r2, r3, #4
 80089b2:	602a      	str	r2, [r5, #0]
 80089b4:	681d      	ldr	r5, [r3, #0]
 80089b6:	6862      	ldr	r2, [r4, #4]
 80089b8:	2100      	movs	r1, #0
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7f7 fc10 	bl	80001e0 <memchr>
 80089c0:	b108      	cbz	r0, 80089c6 <_printf_i+0x1f2>
 80089c2:	1b40      	subs	r0, r0, r5
 80089c4:	6060      	str	r0, [r4, #4]
 80089c6:	6863      	ldr	r3, [r4, #4]
 80089c8:	6123      	str	r3, [r4, #16]
 80089ca:	2300      	movs	r3, #0
 80089cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d0:	e7a8      	b.n	8008924 <_printf_i+0x150>
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	462a      	mov	r2, r5
 80089d6:	4649      	mov	r1, r9
 80089d8:	4640      	mov	r0, r8
 80089da:	47d0      	blx	sl
 80089dc:	3001      	adds	r0, #1
 80089de:	d0ab      	beq.n	8008938 <_printf_i+0x164>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	079b      	lsls	r3, r3, #30
 80089e4:	d413      	bmi.n	8008a0e <_printf_i+0x23a>
 80089e6:	68e0      	ldr	r0, [r4, #12]
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	4298      	cmp	r0, r3
 80089ec:	bfb8      	it	lt
 80089ee:	4618      	movlt	r0, r3
 80089f0:	e7a4      	b.n	800893c <_printf_i+0x168>
 80089f2:	2301      	movs	r3, #1
 80089f4:	4632      	mov	r2, r6
 80089f6:	4649      	mov	r1, r9
 80089f8:	4640      	mov	r0, r8
 80089fa:	47d0      	blx	sl
 80089fc:	3001      	adds	r0, #1
 80089fe:	d09b      	beq.n	8008938 <_printf_i+0x164>
 8008a00:	3501      	adds	r5, #1
 8008a02:	68e3      	ldr	r3, [r4, #12]
 8008a04:	9903      	ldr	r1, [sp, #12]
 8008a06:	1a5b      	subs	r3, r3, r1
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	dcf2      	bgt.n	80089f2 <_printf_i+0x21e>
 8008a0c:	e7eb      	b.n	80089e6 <_printf_i+0x212>
 8008a0e:	2500      	movs	r5, #0
 8008a10:	f104 0619 	add.w	r6, r4, #25
 8008a14:	e7f5      	b.n	8008a02 <_printf_i+0x22e>
 8008a16:	bf00      	nop
 8008a18:	0801e701 	.word	0x0801e701
 8008a1c:	0801e712 	.word	0x0801e712

08008a20 <_putc_r>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	460d      	mov	r5, r1
 8008a24:	4614      	mov	r4, r2
 8008a26:	4606      	mov	r6, r0
 8008a28:	b118      	cbz	r0, 8008a32 <_putc_r+0x12>
 8008a2a:	6983      	ldr	r3, [r0, #24]
 8008a2c:	b90b      	cbnz	r3, 8008a32 <_putc_r+0x12>
 8008a2e:	f7ff fb23 	bl	8008078 <__sinit>
 8008a32:	4b1c      	ldr	r3, [pc, #112]	; (8008aa4 <_putc_r+0x84>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d124      	bne.n	8008a82 <_putc_r+0x62>
 8008a38:	6874      	ldr	r4, [r6, #4]
 8008a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a3c:	07d8      	lsls	r0, r3, #31
 8008a3e:	d405      	bmi.n	8008a4c <_putc_r+0x2c>
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	0599      	lsls	r1, r3, #22
 8008a44:	d402      	bmi.n	8008a4c <_putc_r+0x2c>
 8008a46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a48:	f7ff fbb4 	bl	80081b4 <__retarget_lock_acquire_recursive>
 8008a4c:	68a3      	ldr	r3, [r4, #8]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	60a3      	str	r3, [r4, #8]
 8008a54:	da05      	bge.n	8008a62 <_putc_r+0x42>
 8008a56:	69a2      	ldr	r2, [r4, #24]
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	db1c      	blt.n	8008a96 <_putc_r+0x76>
 8008a5c:	b2eb      	uxtb	r3, r5
 8008a5e:	2b0a      	cmp	r3, #10
 8008a60:	d019      	beq.n	8008a96 <_putc_r+0x76>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	6022      	str	r2, [r4, #0]
 8008a68:	701d      	strb	r5, [r3, #0]
 8008a6a:	b2ed      	uxtb	r5, r5
 8008a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a6e:	07da      	lsls	r2, r3, #31
 8008a70:	d405      	bmi.n	8008a7e <_putc_r+0x5e>
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	059b      	lsls	r3, r3, #22
 8008a76:	d402      	bmi.n	8008a7e <_putc_r+0x5e>
 8008a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a7a:	f7ff fb9c 	bl	80081b6 <__retarget_lock_release_recursive>
 8008a7e:	4628      	mov	r0, r5
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
 8008a82:	4b09      	ldr	r3, [pc, #36]	; (8008aa8 <_putc_r+0x88>)
 8008a84:	429c      	cmp	r4, r3
 8008a86:	d101      	bne.n	8008a8c <_putc_r+0x6c>
 8008a88:	68b4      	ldr	r4, [r6, #8]
 8008a8a:	e7d6      	b.n	8008a3a <_putc_r+0x1a>
 8008a8c:	4b07      	ldr	r3, [pc, #28]	; (8008aac <_putc_r+0x8c>)
 8008a8e:	429c      	cmp	r4, r3
 8008a90:	bf08      	it	eq
 8008a92:	68f4      	ldreq	r4, [r6, #12]
 8008a94:	e7d1      	b.n	8008a3a <_putc_r+0x1a>
 8008a96:	4629      	mov	r1, r5
 8008a98:	4622      	mov	r2, r4
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7ff f912 	bl	8007cc4 <__swbuf_r>
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	e7e3      	b.n	8008a6c <_putc_r+0x4c>
 8008aa4:	0801e6b0 	.word	0x0801e6b0
 8008aa8:	0801e6d0 	.word	0x0801e6d0
 8008aac:	0801e690 	.word	0x0801e690

08008ab0 <_sbrk_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d06      	ldr	r5, [pc, #24]	; (8008acc <_sbrk_r+0x1c>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	f7f8 fdc6 	bl	800164c <_sbrk>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_sbrk_r+0x1a>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_sbrk_r+0x1a>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	200029c0 	.word	0x200029c0

08008ad0 <__sread>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad8:	f000 f8a0 	bl	8008c1c <_read_r>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	bfab      	itete	ge
 8008ae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ae4:	181b      	addge	r3, r3, r0
 8008ae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008aea:	bfac      	ite	ge
 8008aec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008aee:	81a3      	strhlt	r3, [r4, #12]
 8008af0:	bd10      	pop	{r4, pc}

08008af2 <__swrite>:
 8008af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af6:	461f      	mov	r7, r3
 8008af8:	898b      	ldrh	r3, [r1, #12]
 8008afa:	05db      	lsls	r3, r3, #23
 8008afc:	4605      	mov	r5, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	4616      	mov	r6, r2
 8008b02:	d505      	bpl.n	8008b10 <__swrite+0x1e>
 8008b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b08:	2302      	movs	r3, #2
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f000 f868 	bl	8008be0 <_lseek_r>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	4632      	mov	r2, r6
 8008b1e:	463b      	mov	r3, r7
 8008b20:	4628      	mov	r0, r5
 8008b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b26:	f000 b817 	b.w	8008b58 <_write_r>

08008b2a <__sseek>:
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b32:	f000 f855 	bl	8008be0 <_lseek_r>
 8008b36:	1c43      	adds	r3, r0, #1
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	bf15      	itete	ne
 8008b3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b46:	81a3      	strheq	r3, [r4, #12]
 8008b48:	bf18      	it	ne
 8008b4a:	81a3      	strhne	r3, [r4, #12]
 8008b4c:	bd10      	pop	{r4, pc}

08008b4e <__sclose>:
 8008b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b52:	f000 b813 	b.w	8008b7c <_close_r>
	...

08008b58 <_write_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d07      	ldr	r5, [pc, #28]	; (8008b78 <_write_r+0x20>)
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4611      	mov	r1, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	602a      	str	r2, [r5, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f7f8 fd1f 	bl	80015aa <_write>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_write_r+0x1e>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_write_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	200029c0 	.word	0x200029c0

08008b7c <_close_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d06      	ldr	r5, [pc, #24]	; (8008b98 <_close_r+0x1c>)
 8008b80:	2300      	movs	r3, #0
 8008b82:	4604      	mov	r4, r0
 8008b84:	4608      	mov	r0, r1
 8008b86:	602b      	str	r3, [r5, #0]
 8008b88:	f7f8 fd2b 	bl	80015e2 <_close>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	d102      	bne.n	8008b96 <_close_r+0x1a>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	b103      	cbz	r3, 8008b96 <_close_r+0x1a>
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	200029c0 	.word	0x200029c0

08008b9c <_fstat_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4d07      	ldr	r5, [pc, #28]	; (8008bbc <_fstat_r+0x20>)
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	4608      	mov	r0, r1
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	602b      	str	r3, [r5, #0]
 8008baa:	f7f8 fd26 	bl	80015fa <_fstat>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d102      	bne.n	8008bb8 <_fstat_r+0x1c>
 8008bb2:	682b      	ldr	r3, [r5, #0]
 8008bb4:	b103      	cbz	r3, 8008bb8 <_fstat_r+0x1c>
 8008bb6:	6023      	str	r3, [r4, #0]
 8008bb8:	bd38      	pop	{r3, r4, r5, pc}
 8008bba:	bf00      	nop
 8008bbc:	200029c0 	.word	0x200029c0

08008bc0 <_isatty_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4d06      	ldr	r5, [pc, #24]	; (8008bdc <_isatty_r+0x1c>)
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4608      	mov	r0, r1
 8008bca:	602b      	str	r3, [r5, #0]
 8008bcc:	f7f8 fd25 	bl	800161a <_isatty>
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	d102      	bne.n	8008bda <_isatty_r+0x1a>
 8008bd4:	682b      	ldr	r3, [r5, #0]
 8008bd6:	b103      	cbz	r3, 8008bda <_isatty_r+0x1a>
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	200029c0 	.word	0x200029c0

08008be0 <_lseek_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d07      	ldr	r5, [pc, #28]	; (8008c00 <_lseek_r+0x20>)
 8008be4:	4604      	mov	r4, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	4611      	mov	r1, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7f8 fd1e 	bl	8001630 <_lseek>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_lseek_r+0x1e>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_lseek_r+0x1e>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	200029c0 	.word	0x200029c0

08008c04 <__malloc_lock>:
 8008c04:	4801      	ldr	r0, [pc, #4]	; (8008c0c <__malloc_lock+0x8>)
 8008c06:	f7ff bad5 	b.w	80081b4 <__retarget_lock_acquire_recursive>
 8008c0a:	bf00      	nop
 8008c0c:	200029b4 	.word	0x200029b4

08008c10 <__malloc_unlock>:
 8008c10:	4801      	ldr	r0, [pc, #4]	; (8008c18 <__malloc_unlock+0x8>)
 8008c12:	f7ff bad0 	b.w	80081b6 <__retarget_lock_release_recursive>
 8008c16:	bf00      	nop
 8008c18:	200029b4 	.word	0x200029b4

08008c1c <_read_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d07      	ldr	r5, [pc, #28]	; (8008c3c <_read_r+0x20>)
 8008c20:	4604      	mov	r4, r0
 8008c22:	4608      	mov	r0, r1
 8008c24:	4611      	mov	r1, r2
 8008c26:	2200      	movs	r2, #0
 8008c28:	602a      	str	r2, [r5, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f7f8 fca0 	bl	8001570 <_read>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_read_r+0x1e>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_read_r+0x1e>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	200029c0 	.word	0x200029c0

08008c40 <_init>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	bf00      	nop
 8008c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c46:	bc08      	pop	{r3}
 8008c48:	469e      	mov	lr, r3
 8008c4a:	4770      	bx	lr

08008c4c <_fini>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr
